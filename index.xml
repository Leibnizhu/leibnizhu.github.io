<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Heaven's Door</title><link>https://leibnizhu.github.io/</link><description>Recent content on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Sep 2022 08:23:39 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>锻炼记录</title><link>https://leibnizhu.github.io/%E9%94%BB%E7%82%BC%E8%AE%B0%E5%BD%95/</link><pubDate>Thu, 22 Sep 2022 08:23:39 +0800</pubDate><guid>https://leibnizhu.github.io/%E9%94%BB%E7%82%BC%E8%AE%B0%E5%BD%95/</guid><description>&lt;p>&lt;img src="https://leibnizhu.github.io/%E9%94%BB%E7%82%BC%E8%AE%B0%E5%BD%95/github.svg"
loading="lazy"
alt="Running Github"
>&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/%E9%94%BB%E7%82%BC%E8%AE%B0%E5%BD%95/grid.svg"
loading="lazy"
alt="Running Grid"
>&lt;/p></description></item><item><title>Dagster快速入门</title><link>https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Fri, 26 Aug 2022 15:21:08 +0800</pubDate><guid>https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/thumbnail.jpg" alt="Featured image of post Dagster快速入门" />&lt;p>dagster是 &lt;a class="link" href="https://octolis.com/blog/modern-stack-data" target="_blank" rel="noopener"
>MDS&lt;/a> 中推荐使用的调度组件。Dagster的官方文档已经挺完善挺人性化的了，但为了公司内推广，还是写一篇快速入门的文档吧。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;p>首先，Dagster需要Python环境和pip：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.python.org/downloads/" target="_blank" rel="noopener"
>Python下载安装&lt;/a> ：MacOS已自带。请确保 &lt;a class="link" href="https://github.com/dagster-io/dagster/releases/tag/1.0.0" target="_blank" rel="noopener"
>Python3.7及以上版本&lt;/a> 。&lt;/li>
&lt;li>&lt;a class="link" href="https://pip.pypa.io/en/stable/installation/" target="_blank" rel="noopener"
>pip安装&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>使用pip安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install dagster
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建第一个项目">创建第一个项目&lt;/h3>
&lt;p>执行以下命令创建一个简单的dagster项目：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dagster project scaffold --name my-dagster-project
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用官方例子创建项目，请参见： &lt;a class="link" href="https://docs.dagster.io/getting-started/create-new-project" target="_blank" rel="noopener"
>Create a New Project&lt;/a> 。&lt;/p>
&lt;p>随后执行以下命令安装依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd my-dagster-project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -e &lt;span style="color:#48b685">&amp;#34;.[dev]&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后执行下述命令启动一个dagster服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dagit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到控制台打印出类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>To persist information across sessions, set the environment variable DAGSTER_HOME to a directory to use.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0it &lt;span style="color:#5bc4bf">[&lt;/span>00:00, ?it/s&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0it &lt;span style="color:#5bc4bf">[&lt;/span>00:00, ?it/s&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2022-09-20 15:39:59 +0800 - dagit - INFO - Serving dagit on http://127.0.0.1:3000 in process &lt;span style="color:#f99b15">37014&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可在浏览器打开 http://127.0.0.1:3000 进入dagster页面。&lt;/p>
&lt;h2 id="快速理解dagster基本概念">快速理解dagster基本概念&lt;/h2>
&lt;h3 id="命令">命令&lt;/h3>
&lt;p>dagster提供了两个命令：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>dagster&lt;/code>&lt;/strong>: 核心CLI程序，可以用于执行单个job、查询asset、debug等，具体可通过 &lt;code>dagster -h&lt;/code> 查询。&lt;/li>
&lt;li>&lt;strong>&lt;code>dagit&lt;/code>&lt;/strong>: dagster的UI服务，前面小节已经使用到了。&lt;/li>
&lt;/ul>
&lt;h3 id="asset">Asset&lt;/h3>
&lt;p>在传统的工作流/DAG调度工具里，我们面向执行的任务编写(代码)/(通过UI)编辑工作流，关注的是一个个任务的流转。&lt;br>
而这里定义的任务，对于数据处理而言，一般是读取一个数据源，经过处理后，写入另一个数据源。&lt;br>
我们知道一个任务处理了哪个数据源、输出了什么数据源，只能通过任务命名、或阅读任务的代码/注释/文档。&lt;br>
如果想知道这些用到的数据源之间的血缘关系，则需要调度工具支持+任务中声明输入输出的数据，或者在任务中调用第三方血缘关系管理的服务。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/task.png"
width="928"
height="300"
srcset="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/task_hu879e739db9db7af54c6a5a2bb86d56e4_34001_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/task_hu879e739db9db7af54c6a5a2bb86d56e4_34001_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="任务视角"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/p>
&lt;p>对于单纯的执行而言，这无疑是直观的。但如果从数仓建设的角度来看，这是很不人性化的：我们只能看到一步步做了什么，不能直观地看到数仓每一层的数据流转、依赖。&lt;/p>
&lt;p>而 &lt;strong>Dagster&lt;/strong>，提供了调度工作流的另一个视角： &lt;strong>数据资产视角&lt;/strong> ，去审视数仓的数据流，从而声明式定义工作流。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/asset.png"
width="1090"
height="304"
srcset="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/asset_hu8fb7be1c597c1a79d19d3321c2e71cc6_34194_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/asset_hu8fb7be1c597c1a79d19d3321c2e71cc6_34194_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="数据资产视角"
class="gallery-image"
data-flex-grow="358"
data-flex-basis="860px"
>&lt;/p>
&lt;p>也就是说，在dagster里面，不再关注需要写什么任务，而是捋清到底有哪些数据资产，以及这些数据资产之间的关系。&lt;br>
然后在代码里声明：&lt;/p>
&lt;ul>
&lt;li>数据资产：&lt;code>@asset&lt;/code> 注解&lt;/li>
&lt;li>这个数据资产依赖什么上游的数据资产：&lt;code>@asset&lt;/code> 注解的 &lt;code>ins&lt;/code> 或 &lt;code>non_argument_deps&lt;/code> 属性&lt;/li>
&lt;li>如何利用上游的数据资产产生当前数据资产：在 &lt;code>@asset&lt;/code> 声明的方法里通过py代码实现，比如依赖的DataFrame，在方法代码里用DataFrame API，编写业务逻辑，定义return 一个新的DataFrame&lt;/li>
&lt;/ul>
&lt;p>就可以了。&lt;br>
当你把数据资产都定义完，可以通过 &lt;code>define_asset_job&lt;/code> 方法，将选定的数据资产，按依赖关系自动构建出DAG工作流（dagster称之为 &lt;strong>job&lt;/strong>），然后就可以执行了。&lt;/p>
&lt;p>关于 asset 的定义和使用更多信息，请参考官方文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/tutorial/assets/defining-an-asset" target="_blank" rel="noopener"
>A First Asset&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/tutorial/assets/asset-graph" target="_blank" rel="noopener"
>Building Graphs of Assets&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/tutorial/assets/non-argument-deps" target="_blank" rel="noopener"
>Assets without Arguments and Return Values&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/tutorial/assets/testing-assets" target="_blank" rel="noopener"
>Testing Assets&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/assets/software-defined-assets" target="_blank" rel="noopener"
>Software-Defined Assets&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/assets/asset-materializations" target="_blank" rel="noopener"
>Asset Materializations&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/assets/asset-observations" target="_blank" rel="noopener"
>Asset Observations&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/assets/multi-assets" target="_blank" rel="noopener"
>Multi-Assets&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>等。&lt;/p>
&lt;blockquote>
&lt;p>说到这里，好像缺了什么？&lt;br>
DataFrame是定义完了，DataFrame保存到哪里？又是从哪里读的？&lt;/p>
&lt;/blockquote>
&lt;h3 id="io-manager">IO Manager&lt;/h3>
&lt;p>Asset只定义了数据资产的来源依赖与自身定义，关注的是数据的业务逻辑。&lt;br>
在传统的ETL工具或工作流工具里，数据的读写和处理逻辑是在同一个任务/工作流里定义的，而在Dagster中，数据的读写和处理逻辑是解耦的，处理逻辑在Asset定义了，而读写在 &lt;strong>IO Manager&lt;/strong> 中定义。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/io-manager.png"
width="683"
height="410"
srcset="https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/io-manager_hub795264ee94acdfaa51c31cb7b58fba3_61032_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Dagster%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/io-manager_hub795264ee94acdfaa51c31cb7b58fba3_61032_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="IO Manager"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="399px"
>&lt;/p>
&lt;p>IO Manager有一些官方的实现，也可以自己实现。&lt;br>
具体来说是继承 &lt;code>dagster.IOManager&lt;/code>，实现 &lt;code>handle_output&lt;/code>（数据输出） 和 &lt;code>load_input&lt;/code>（数据读取） 方法。&lt;br>
而每个Asset使用哪个IO Manager，则是在 &lt;code>@asset&lt;/code> 注解的 &lt;code>io_manager_key&lt;/code> 属性中设置，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MyIOManager&lt;/span>(IOManager):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">handle_output&lt;/span>(self, context, obj):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">load_input&lt;/span>(self, context):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@io_manager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">my_io_manager&lt;/span>(init_context):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> MyIOManager()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@asset&lt;/span>(io_manager_key&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;my_io_manager&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">my_op&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体请参见官方文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/io-management/io-managers" target="_blank" rel="noopener"
>IO Managers&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.dagster.io/concepts/io-management/unconnected-inputs" target="_blank" rel="noopener"
>Unconnected Inputs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="op--graph--job">Op &amp;amp;&amp;amp; Graph &amp;amp;&amp;amp; Job&lt;/h3>
&lt;p>//TODO&lt;/p></description></item><item><title>数据湖调研：Delta Lake vs Iceberg</title><link>https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/</link><pubDate>Wed, 20 Jul 2022 10:03:41 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/magician.jpg" alt="Featured image of post 数据湖调研：Delta Lake vs Iceberg" />&lt;h2 id="delta-lake">Delta Lake&lt;/h2>
&lt;p>Delta Lake是Databricks推出的流批一体存储层，分为开源版和商业版，深度绑定自家Spark。&lt;/p>
&lt;h3 id="lakehouse论文">Lakehouse论文&lt;/h3>
&lt;p>请先快速阅读Databricks的论文 &lt;a class="link" href="https://databricks.com/wp-content/uploads/2020/12/cidr_lakehouse.pdf" target="_blank" rel="noopener"
>Lakehouse: A New Generation of Open Platforms that Unify Data Warehousing and Advanced Analytics&lt;/a>。&lt;/p>
&lt;p>这篇论文主要讲了传统的数仓和数据湖模型的缺陷，在此基础上提出湖仓一体的LakeHouse模型，并阐述了LakeHouse的一些设计细节。下面挑一些要点来讲讲。&lt;/p>
&lt;p>LakeHouse是Databricks提出的一种将在未来几年取代传统数仓结构的架构。传统数仓将业务数据库数据收集到集中式的数仓，在写入时针对下游BI消费对schema进行优化；然而传统数仓将计算与存储耦合，且对非结构化数据支持不佳。于是出现了数据湖，以开放格式（如Parquet、ORC）存储在低成本的存储系统（如S3），湖中的数据ETL到下游数仓，再提供给BI使用。但这样的两层结构带来了一下问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可靠性&lt;/strong>：难以维持数据湖与下游数仓的数据一致性&lt;/li>
&lt;li>&lt;strong>数据不及时&lt;/strong>：需要两次ETL才到BI，对于传统数仓而言，甚至是开历史倒车&lt;/li>
&lt;li>&lt;strong>对高级分析支持不佳&lt;/strong>：机器学习Tensorflow、PyTorch等，需要通过非SQL处理大量数据，无法通过JDBC/ODBC高效运行&lt;/li>
&lt;li>&lt;strong>总成本高&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>于是噔噔瞪瞪，LakeHouse出来了：基于开放文件格式（如ORC/Parquet）的低成本存储，同时提供数仓的管理功能、传统DBMS的管理特性（如ACID事务、版本控制、审计、索引、缓存等）、及for高级分析（如机器学习）的高速I/O，的高性能系统。同时在设计上适应可存储计算隔离的云计算环境。LakeHouse解决了以下关键问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>可靠的数据管理&lt;/strong>：传统数据湖只是管理了一堆半结构化文件，在事务、回滚等方面的能力太差。&lt;/li>
&lt;li>&lt;strong>支持机器学习&lt;/strong>：支持DataFrame API；而ML系统可以直接读取数据湖的格式，很多也支持DataFrame&lt;/li>
&lt;li>&lt;strong>SQL查询性能&lt;/strong>：归功于过去对ORC/Parquet做SQL查询的性能优化经验&lt;/li>
&lt;/ul>
&lt;p>下面是这三代数仓/数据湖结构对比：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse1.png"
width="2100"
height="836"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse1_hua80d5848797b05fbcec254ae3a94cf3f_794557_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse1_hua80d5848797b05fbcec254ae3a94cf3f_794557_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="三代数仓/数据湖结构对比"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="602px"
>&lt;/p>
&lt;p>下面是LakeHouse架构和实现要点。&lt;/p>
&lt;p>&lt;strong>元数据层&lt;/strong>：&lt;/p>
&lt;p>LakeHouse设计理念是使用标准文件格式以低成本存储，在存储的顶层设计实现传统的元数据层，可提高抽象级别、实现ACID事务、版本控制等特性。DeltaLake &lt;em>&lt;strong>以Parquet格式在数据湖本身的存储上存放事务日志&lt;/strong>&lt;/em> ，可以存储哪些对象属于表的信息：&lt;/p>
&lt;ul>
&lt;li>实践证明这套设计在性能类似或更优于原始Parquet/ORC的同时，提供了事务等管理功能&lt;/li>
&lt;li>元数据层同时可以保证数据质量，如强制schema（schema enforcement）可以保障新增数据必须匹配已有schema，并提供了API允许配置数据约束（如某列数据需要满足枚举要求）。&lt;/li>
&lt;li>元数据层可实施ACL、日志审计等功能&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>SQL性能优化&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>缓存：热数据缓存到更快的存储设备，如SSD、RAM&lt;/li>
&lt;li>辅助数据：Lakehouse虽然使用了公开的文件格式（Parquet/ORC），但可以通过辅助数据帮助优化查询速度，如构建索引、维护统计信息。DeltaLake在上面提到的事务日志中维护列的最大最小值信息，方便查询时跳过；并实现了基于布龙过滤器的索引&lt;/li>
&lt;li>数据布局优化：在Parquet格式不变的基础上，还是有优化空间，如记录排序，让数据聚拢便于读取。DeltaLake使用Z-order和Hilbert曲线对记录排序以在读取时更好地进行文件修剪。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>针对高级分析的优化&lt;/strong>：&lt;/p>
&lt;p>通过声明式的DataFrame API加速高级分析。DataFrame API在DeltaLake的位置：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse2.png"
width="1046"
height="788"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse2_hu29e2705cbf93e41a5d284ca61a497d45_214685_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse2_hu29e2705cbf93e41a5d284ca61a497d45_214685_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DataFrame API在DeltaLake的位置"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>下图是Spark MLlib中执行声明式的DataFrame API。用户的DataFrame调用是lazy的，执行时Spark引擎获取执行计划，传给DeltaLake的库，后者读取元数据层，根据缓存、索引、统计信息等进行优化查询，最后执行。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse3.png"
width="1030"
height="568"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse3_hu9da49551a80d03814825ede3c8f48533_95914_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/lakehouse3_hu9da49551a80d03814825ede3c8f48533_95914_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DeltaLake的DataFrame查询优化"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;h3 id="delta-lake白皮书">Delta Lake白皮书&lt;/h3>
&lt;p>请先快速阅读Databricks的论文 &lt;a class="link" href="https://databricks.com/wp-content/uploads/2020/08/p975-armbrust.pdf" target="_blank" rel="noopener"
>Delta Lake: High-Performance ACID Table Storage over Cloud Object Stores&lt;/a> 。&lt;/p>
&lt;p>&lt;strong>纯Parquet/ORC的缺陷&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>多对象更新不是原子的，所以查询之间没有隔离；回滚写操作也很困难：如果更新查询崩溃，则表处于损坏状态。&lt;/li>
&lt;li>元数据操作的成本很高&lt;/li>
&lt;li>大多数企业数据集是不断更新的，因此它们需要一个原子性的写入解决方案&lt;/li>
&lt;/ul>
&lt;p>Delta Lake应运而生，它是一个云对象存储上的ACID表存储层。核心思想：&lt;/p>
&lt;ul>
&lt;li>用ACID方式在云对象中存储日志（write-ahead），以纪录哪些对象是Delta表的一部分&lt;/li>
&lt;li>日志还包含元数据，例如每个数据文件的最小/最大统计信息，用于查询优化。&lt;/li>
&lt;li>将所有元数据都存在底层对象存储中，并且使用针对对象存储的乐观并发协议实现事务，意味着不需要运行服务器来维护Delta表的状态&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>特性&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>Time travel&lt;/li>
&lt;li>UPSERT, DELETE and MERGE operations&lt;/li>
&lt;li>Efficient streamingI/O&lt;/li>
&lt;li>Caching&lt;/li>
&lt;li>Data layout optimization&lt;/li>
&lt;li>Schema evolution&lt;/li>
&lt;li>Audit logging&lt;/li>
&lt;/ul>
&lt;p>使用DeltaLake的例子：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/deltalake1.png"
width="1008"
height="1166"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/deltalake1_hu4e9ebd4c418f2361977445627d1a6903_285704_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/deltalake1_hu4e9ebd4c418f2361977445627d1a6903_285704_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="使用DeltaLake的例子"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="207px"
>&lt;/p>
&lt;p>&lt;strong>旧世界的桎梏&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>对象存储API：云对象存储的API太慢太麻烦云云&lt;/li>
&lt;li>一致性保证：云对象存储为每个键提供了最终的一致性，并且没有跨键的一致性保证；对现有对象的更新可能不会立即对其他客户端可见&lt;/li>
&lt;li>性能问题&lt;/li>
&lt;li>目前有三种表存储方式：
&lt;ul>
&lt;li>文件目录：将表存储为对象的集合，基于一个或多个属性将记录“分区”到目录中。比如Hive。主要问题是存在性能和一致性问题&lt;/li>
&lt;li>自定义存储引擎：在一个单独的、高度一致的服务中管理元数据本身。比如Snowflake。需要运行一个高可用性的服务来管理元数据，这可能很开销很大；而且表的所有I/O操作都需要联系元数据服务，这会增加其资源成本，降低性能和可用性；现有计算引擎的连接器需要更多的开发对接工作。&lt;/li>
&lt;li>噔噔瞪瞪，&lt;em>&lt;strong>对象存储中的元数据&lt;/strong>&lt;/em> ：DeltaLake将事务日志和元数据直接存储在云对象存储中，并在对象存储操作上使用一组协议来实现序列化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>后面是具体的存储格式和访问协议，篇幅太长，不展开了。后面再补吧。&lt;/p>
&lt;h3 id="deltalake基本概念与使用">DeltaLake基本概念与使用&lt;/h3>
&lt;p>&lt;a class="link" href="https://docs.delta.io/latest/delta-intro.html" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;p>注意到上文所说的事务日志放在对象存储的同一位置，就是在表的目录下，有个 &lt;code>_delta_log&lt;/code> 子目录，一个版本对应里面一个json，记录了事务操作，Time Travel显然也是基于此。&lt;/p>
&lt;h2 id="iceberg">Iceberg&lt;/h2>
&lt;h3 id="设计理念">设计理念&lt;/h3>
&lt;p>Meetup视频： &lt;a class="link" href="https://www.youtube.com/watch?v=N4gAi_zpN88" target="_blank" rel="noopener"
>Data Science DC Nov 2021 Meetup: Apache Iceberg - An Architectural Look Under the Covers&lt;/a>，也可以看 &lt;a class="link" href="https://www.dremio.com/resources/guides/apache-iceberg-an-architectural-look-under-the-covers/" target="_blank" rel="noopener"
>演讲稿&lt;/a>。&lt;/p>
&lt;h4 id="what-is-iceberg">What is Iceberg&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>✅ Iceberg 是……&lt;/th>
&lt;th>❌ Iceberg不是……&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Table Format定义&lt;/td>
&lt;td>存储引擎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>遵循Iceberg Table Format定义与表进行交互的一套API及库&lt;/td>
&lt;td>执行引擎&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>一套服务&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="table-format">Table Format?&lt;/h4>
&lt;blockquote>
&lt;p>A good way to define a table format is a way to organize a dataset’s files to present them as a single “table”.&lt;br/>
Another somewhat simpler definition from a user’s perspective is a way to answer the question “what data is in this table?”.&lt;br/>
A single answer to that question allows multiple people, groups, and tools to interact with data in the table at the same time, whether they’re writing to the table or reading from the table.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Table Format&lt;/code> 是表的抽象，将数据集文件组合起来，以单个“表”的形式呈现，允许人和工具与表数据高效交互。&lt;/p>
&lt;h4 id="table-format简史">Table Format简史&lt;/h4>
&lt;p>&lt;strong>Hadoop刀耕火种&lt;/strong>：直撸HDFS，用户必须清楚如何将问题转化为MR模型并用java编码，数据也没有schema，用户必须熟知他处理的文件的实际schema。&lt;/p>
&lt;p>&lt;strong>Hive&lt;/strong>：针对Hadoop第一个问题，用SQL替代之；针对Hadoop第二个问题，用metastore记录schema。Hive从此成为了事实上的Table Format标准。Hive的Table Format我们比较熟知，就不细述了，更多优点也不说了，看视频有。说下缺点：&lt;/p>
&lt;ul>
&lt;li>修改数据太低效，尤其分区很大，修改里面的少量数据、或频繁更改&lt;/li>
&lt;li>无法安全地更改多个分区的数据，Hive只保证单个分区的事务一致性&lt;/li>
&lt;li>在实际操作中，多个作业同时修改一个数据集是不安全的&lt;/li>
&lt;li>对于大型表，即便只是列出所有目录也要耗费很多时间&lt;/li>
&lt;li>为了利用分区优化查询，用户必须知道物理的分区布局（比如按年、月、日分区）&lt;/li>
&lt;li>Hive表的统计信息往往是过时的，可能导致优化器选择效率低的计划&lt;/li>
&lt;li>在云存储中性能不佳。Hive表一个分区中的所有数据都具有相同的目录前缀，利用不到云存储不同前缀的分流&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Iceberg&lt;/strong>：Netflix发现，解决Hive Table Format问题的关键是放弃在文件夹级别跟踪表数据，改为在文件级别跟踪。修改之后，还能做到：&lt;/p>
&lt;ul>
&lt;li>保证表视图的正确性和一致性&lt;/li>
&lt;li>实现更快的查询计划和执行&lt;/li>
&lt;li>用户无需了解数据的物理布局（如分区）&lt;/li>
&lt;li>实现更好、更安全的表进化（table evolution，即表schema变更）&lt;/li>
&lt;/ul>
&lt;h4 id="iceberg-table-format定义">Iceberg Table Format定义&lt;/h4>
&lt;p>&lt;strong>Iceberg Table Format架构&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/iceberg1.png"
width="1230"
height="1282"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/iceberg1_hu60d45ae1d07beb91112bb0d0d565fdfb_134710_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/iceberg1_hu60d45ae1d07beb91112bb0d0d565fdfb_134710_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Iceberg Table Format架构"
class="gallery-image"
data-flex-grow="95"
data-flex-basis="230px"
>&lt;/p>
&lt;p>分了三层：&lt;/p>
&lt;ol>
&lt;li>&lt;code>Iceberg catalog&lt;/code> ：记录各个表当前元数据指针的位置。&lt;code>Iceberg catalog&lt;/code> 要求元数据指针的实现支持原子性的更新操作。实际的存储方式取决于具体使用的存储：
&lt;ol>
&lt;li>HDFS：元数据文件夹中有一个名为 &lt;code>version-hint.text&lt;/code> 的文件，其内容是当前元数据文件的版本号&lt;/li>
&lt;li>Hive metastore：metastore的表对象用表属性记录当前元数据文件的位置&lt;/li>
&lt;li>Nessie：Nessie保存了当前元数据文件的位置&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>metadata layer&lt;/code>，具体又包括：
&lt;ol>
&lt;li>&lt;code>metadata file&lt;/code>：存储表的元信息，包括表的schema、分区信息、所有快照信息、及当前快照等等,json格式。查询过程：按 &lt;code>current-snapshot-id&lt;/code> 在 &lt;code>snapshots&lt;/code> 找到对应快照，读取其 &lt;code>manifest-list&lt;/code> 属性，打开 &lt;code>manifest lists&lt;/code>。&lt;/li>
&lt;li>&lt;code>manifest list&lt;/code>：&lt;code>manifest files&lt;/code> 的列表，每一行是构成该快照的一个 &lt;code>manifest file&lt;/code> 的信息，包括 &lt;code>manifest file&lt;/code> 位置、所属分区、分区列的最大最小值等。查询时可以在此阶段进行一些优化，例如使用行计数或使用分区信息过滤数据。&lt;/li>
&lt;li>&lt;code>manifest file&lt;/code>：记录数据文件以及有关每个文件的其他详细信息和统计信息，可用于优化查询，而且这些信息是在写入操作期间更新的，比Hive记录的统计信息的更准确、更新。Iceberg 与文件格式无关，因此清单文件还指定了数据文件的文件格式，例如 Parquet、ORC 或 Avro&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>data layer&lt;/code> ：实际存储的文件&lt;/li>
&lt;/ol>
&lt;p>日常表操作在Iceberg Table Format中的体现：&lt;/p>
&lt;ol>
&lt;li>&lt;code>CREATE TABLE xxx&lt;/code>：创建metadata file，里面有快照s0（但不指向任何manifest list），表的当前元数据指针指向该metadata file&lt;/li>
&lt;li>&lt;code>INSERT INTO xxx&lt;/code>：
&lt;ol>
&lt;li>创建数据文件（Parquet或其他格式）&lt;/li>
&lt;li>创建manifest file，指向该数据文件&lt;/li>
&lt;li>创建manifest list，指向该manifest file&lt;/li>
&lt;li>创建新的metadata file，带有快照s1和s0，&lt;code>current-snapshot-id&lt;/code> 是s1&lt;/li>
&lt;li>表的当前元数据指针指向新的metadata file&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>MERGE INTO xxx USING ... ON ... WHEN MATCHED THEN UPDATE ... WHEN NOT MATCHED THEN INSERT...&lt;/code>：upsert的操作，步骤比较多：
&lt;ol>
&lt;li>找出满足 &lt;code>USING ... ON ...&lt;/code> 条件的数据，读取查询引擎，执行 &lt;code>UPDATE&lt;/code> 子句的更新，写入新的数据文件（不满足条件的也写入了，也就是 &lt;code>copy-on-write&lt;/code> 策略；此外还有&lt;code>merge-on-read&lt;/code> 策略）&lt;/li>
&lt;li>读取不满足 &lt;code>ON&lt;/code> 条件的外部表数据，写入另一个数据文件&lt;/li>
&lt;li>创建manifest file，指向新建的两个数据文件&lt;/li>
&lt;li>创建manifest list，指向该manifest file&lt;/li>
&lt;li>创建新的metadata file，带有快照s2、s1和s0，&lt;code>current-snapshot-id&lt;/code> 是s2&lt;/li>
&lt;li>表的当前元数据指针指向新的metadata file&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>SELECT * FROM xxx&lt;/code>：
&lt;ol>
&lt;li>查询Iceberg catalog，获取表的当前云数据指针&lt;/li>
&lt;li>读取当前元数据指针指向的metadata file，获取当前快照的manifest list地址&lt;/li>
&lt;li>读取manifest list，获取manifest file地址&lt;/li>
&lt;li>读取manifest file，获取所有数据文件的地址&lt;/li>
&lt;li>读取所有数据文件、返回&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>隐式分区查询&lt;/strong> ：前面说到的，Hive的分区查询经常需要用户熟知分区物理布局，Iceberg对此进行了优化，实际操作是：a)读取 &lt;code>metadata file&lt;/code>，获取要查询的snapshot的分区信息（有哪些字段，当前查询的是否包含在内），b)读取 &lt;code>manifest file&lt;/code>，读取里面记录的所有数据文件的分区字段信息，与用户的查询条件做对比，找出要读取的数据文件，c)最后只读取这些数据文件&lt;/li>
&lt;li>&lt;strong>Time Travel&lt;/strong>：其实就是表级版本控制，语法是 &lt;code>SELECT * FROM xxx AS OF '日期'&lt;/code>，实际操作是：打开当前 &lt;code>metadata file&lt;/code>，在 &lt;code>snapshots&lt;/code> 数组查找满足查询版本日期的snapshot，后面就是正常流程（&lt;code>manifest list&lt;/code> -&amp;gt; &lt;code>manifest file&lt;/code> -&amp;gt; 数据文件）。&lt;/li>
&lt;/ol>
&lt;p>注意 &lt;strong>Time Travel&lt;/strong>，Iceberg保留了旧版本的数据，也提供了异步后台进程去清理这些旧snapshot（垃圾回收GC）。用户可以配置GC策略，这里就是存储空间的衡量了。&lt;/p>
&lt;h4 id="小文件合并compaction">小文件合并（Compaction）&lt;/h4>
&lt;p>Compaction是后台的异步进程，负责将一组小文件合并压缩成少量大文件，可以平衡写入和读取性能的权衡：低延迟写入需要在获取数据后尽快写入，意味着生产更多小文件；而高吞吐量读取需要单个文件保存尽量多的文件。合并操作的输入输出可以是不同的文件格式。&lt;/p>
&lt;p>但Iceberg只是提供了File Format及其API和库，实际的Compaction操作由集成了Iceberg的其他工具/引擎负责调度、执行。&lt;/p>
&lt;h4 id="iceberg-table-format优势">Iceberg Table Format优势&lt;/h4>
&lt;ul>
&lt;li>事务的快照隔离：乐观锁&lt;/li>
&lt;li>更快的执行计划和执行速度：写入数据时更新统计信息、文件级跟踪统计信息&lt;/li>
&lt;li>对物理布局做抽象，对用户暴露逻辑视图&lt;/li>
&lt;li>所有引擎都能立即看到变化：写入时更新&lt;/li>
&lt;li>事件监听器：允许在Iceberg表上发生事件时通知其他服务&lt;/li>
&lt;li>有效地对数据集进行较小的更新：文件级别跟踪数据&lt;/li>
&lt;/ul>
&lt;h3 id="iceberg基本使用">Iceberg基本使用&lt;/h3>
&lt;p>目前有 Spark、Flink、PrestoDB、Hive、Impala等集成。&lt;/p>
&lt;p>&lt;a class="link" href="https://iceberg.apache.org/spark-quickstart/" target="_blank" rel="noopener"
>Quick Start&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://iceberg.apache.org/docs/latest/" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.dremio.com/subsurface/migrating-a-hive-table-to-an-iceberg-table-hands-on-tutorial/" target="_blank" rel="noopener"
>从Hive迁移到Iceberg&lt;/a>&lt;/p>
&lt;h2 id="delta-lake-vs-iceberg">Delta Lake vs Iceberg&lt;/h2>
&lt;h3 id="解决的痛点">解决的痛点&lt;/h3>
&lt;p>从上面的介绍可以看出，DeltaLake和Iceberg的着重点不太一样。DataLake着眼于数仓/数据湖的架构优化、对流批一体的支持，而Iceberg站在了更高的抽象级别，定义TableFormat，制定标准和核心API，提供多种实现。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>DeltaLake&lt;/th>
&lt;th>Iceberg&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>• 快速upsert/delete数据&lt;br/>• Schema限制&lt;br/>• ACID事务&lt;br/>• 多版本控制&lt;br/>• 小文件Compaction&lt;br/>• 支持流批读写&lt;/td>
&lt;td>• ACID事务&lt;br/>• 多版本控制&lt;br/>• 抽象、通用、优雅&lt;br/>• 灵活的元数据管理&lt;br/>• 元数据性能(文件粒度跟踪)&lt;br/>• 隐式分区、分区演进&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="对比表">对比表&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Iceberg&lt;/th>
&lt;th>Hudi&lt;/th>
&lt;th>Delta Lake&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACID事务&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>分区演进&lt;/td>
&lt;td>&lt;a class="link" href="https://iceberg.apache.org/docs/latest/partitioning/" target="_blank" rel="noopener"
>分区演进&lt;/a> 支持更改分区方案；&lt;br/>&lt;a class="link" href="https://iceberg.apache.org/spec/#partition-transforms" target="_blank" rel="noopener"
>分区转换&lt;/a> 可对时间戳字段以年、月、日、小时粒度隐式分区&lt;/td>
&lt;td>× &lt;a class="link" href="https://docs.databricks.com/delta/delta-batch.html#deltausegeneratedcolumns" target="_blank" rel="noopener"
>Generated Columns&lt;/a>可以实现类似隐式分区的功能，但目前是Public Preview状态&lt;/td>
&lt;td>× &lt;a class="link" href="https://hudi.apache.org/releases/release-0.11.0/#data-skipping-with-metadata-table" target="_blank" rel="noopener"
>Data Skipping&lt;/a>可以实现类似隐式分区的功能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Schema演进&lt;/td>
&lt;td>增/删/改/重命名/重排列&lt;/td>
&lt;td>删/改名/重排只在Spark中支持&lt;/td>
&lt;td>2.0.0之前只支持增加列、列重命名、更新列、重排序，&lt;a class="link" href="https://github.com/delta-io/delta/releases/tag/v2.0.0" target="_blank" rel="noopener"
>2.0.0&lt;/a>(2022-07-21发布)开始支持删除列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Time-Travel(表版本管理)&lt;/td>
&lt;td>√ 通过快照实现&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√ 每个Delta文件都代表了表对上一版本的更改，&lt;a class="link" href="https://docs.delta.io/latest/delta-batch.html#data-retention" target="_blank" rel="noopener"
>默认保留30天&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>项目级别&lt;/td>
&lt;td>Apache顶级项目&lt;/td>
&lt;td>Apache顶级项目&lt;/td>
&lt;td>Linux基金会项目（Databricks TSC）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>社区活跃度&lt;br/>(截至2022/03/28)&lt;/td>
&lt;td>240贡献者&lt;br/>2241已合并PR&lt;br/>275未关闭PR&lt;/td>
&lt;td>252贡献者&lt;br/>2880已合并PR&lt;br/>160未关闭PR&lt;/td>
&lt;td>145贡献者&lt;br/>16已合并PR&lt;br/>43未关闭PR&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>兼容读取的工具&lt;/td>
&lt;td>Apache Hive, Dremio Sonar, Apache Flink, Apache Spark, Presto, Trino, Athena, Snowflake, Databricks Spark, Apache Impala, Apache Drill&lt;/td>
&lt;td>Apache Hive, Apache Flink, Apache Spark, Presto, Trino, Athena, Databricks Spark, Redshift, Apache Impala, BigQuery&lt;/td>
&lt;td>Apache Hive, Dremio Sonar, Apache Flink, Databricks Spark, Apache Spark, Databricks SQL Analytics, Trino, Presto, Snowflake, Redshift, Apache Beam, Athena&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>兼容写入的工具&lt;/td>
&lt;td>Apache Hive, Dremio Sonar, Apache Flink, Apache Spark, Trino, Athena, Databricks Spark, Debezium&lt;/td>
&lt;td>Apache Flink, Apache Spark, Databricks Spark, Debezium, Kafka Connect&lt;/td>
&lt;td>OSS Delta Lake: Trino, Apache Spark, Databricks Spark Apache Flink, Debezium.Databricks Delta Lake: Databricks Spark, Kafka Connect&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>文件格式支持&lt;/td>
&lt;td>Parquet&lt;br/>ORC&lt;br/>Avro&lt;/td>
&lt;td>Parquet&lt;br/>ORC&lt;/td>
&lt;td>Parquet&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="社区活跃度">社区活跃度&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community1.jpeg"
width="653"
height="386"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community1_hud8640d57255481ab82dc6a427dfb0842_60631_480x0_resize_q75_box.jpeg 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community1_hud8640d57255481ab82dc6a427dfb0842_60631_1024x0_resize_q75_box.jpeg 1024w"
loading="lazy"
alt="社区活跃度"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>此外值得注意的是，DeltaLake有81%的提交来自Databricks自己，而Iceberg的提交前5名提交是：Netfix 18.7%，Apple 17.1%，AWS 10.4%，Tabular 8.3%,Dremio 5.5%。&lt;/p>
&lt;p>另外，整个DeltaLake项目，无论是对Issue的反应处理/回答、提PR、&lt;a class="link" href="https://github.com/delta-io/delta/issues/920" target="_blank" rel="noopener"
>RoadMap&lt;/a> 的Issue，基本都是Databrick的员工，因此，DeltaLake相对而言没那么开放，不那么社区驱动：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community2.png"
width="2718"
height="952"
srcset="https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community2_hu0a210b65b45a734162fe39533454c163_100128_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%95%B0%E6%8D%AE%E6%B9%96%E8%B0%83%E7%A0%94Delta-Lake-vs-Iceberg/community2_hu0a210b65b45a734162fe39533454c163_100128_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="提交比例"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>另一个值得注意的是DeltaLake跟Spark的绑定，及其社区版与商业版的区别（Databricks拥有自己的Delta Lake 专有分支，该分支具有仅在Databricks平台上可用的功能，Spark也是）。&lt;/p></description></item><item><title>Quarkus服务接入Skywalking链路跟踪</title><link>https://leibnizhu.github.io/p/Quarkus%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5Skywalking%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</link><pubDate>Mon, 18 Jul 2022 12:58:35 +0800</pubDate><guid>https://leibnizhu.github.io/p/Quarkus%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5Skywalking%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Quarkus%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%85%A5Skywalking%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA/bus.jpg" alt="Featured image of post Quarkus服务接入Skywalking链路跟踪" />&lt;h2 id="quarkus对可观测性的支持情况">Quarkus对可观测性的支持情况&lt;/h2>
&lt;p>Quarkus在可观测性方面支持了 &lt;a class="link" href="https://opentracing.io/" target="_blank" rel="noopener"
>OpenTracing&lt;/a> 和 &lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
>OpenTelemetry&lt;/a> 。如果要对使用Quarkus开发的服务接入Skywalking做链路跟踪：&lt;/p>
&lt;ul>
&lt;li>Skywalking支持OpenTelemetry，但只是在 &lt;a class="link" href="https://skywalking.apache.org/docs/main/latest/en/setup/backend/opentelemetry-receiver/" target="_blank" rel="noopener"
>metric部分&lt;/a> 支持了。至于为什么，可以看看PR &lt;a class="link" href="https://github.com/apache/skywalking/issues/7374" target="_blank" rel="noopener"
>What does opentelemetry mean?&lt;/a> 里面的讨(nu)论(chi)。&lt;/li>
&lt;li>Skywalking兼容Opentracing协议。但Quarkus目前对OpenTracing的支持是针对Jaeger的，而Skywalking是用GRpc通信的，不能直接对接。&lt;/li>
&lt;/ul>
&lt;p>所以摆在面前的路有两条：&lt;/p>
&lt;ol>
&lt;li>模仿 &lt;a class="link" href="https://github.com/smallrye/smallrye-opentracing" target="_blank" rel="noopener"
>quarkus-smallrye-opentracing&lt;/a> （已deprecated），基于Provider，写一套用于拦截Quarkus请求打span等的插件。&lt;/li>
&lt;li>使用Skywalking Java Agent 传统姿势，但要注意各个组件的支持情况。&lt;/li>
&lt;/ol>
&lt;p>第一条路工作量是未知的，可行性也未知。还是选简单点的第二条路吧。&lt;/p>
&lt;h2 id="skywalking对quarkus常用组件的支持情况">Skywalking对Quarkus常用组件的支持情况&lt;/h2>
&lt;p>先简单盘点一下Skywalking Java Agent对Quarkus做web服务常用组件的支持情况：&lt;/p>
&lt;ul>
&lt;li>core: 使用了 &lt;code>Vert.X-core&lt;/code>， 支持3.x 和 4.x。&lt;/li>
&lt;li>Http server: 使用了 &lt;code>RestEasy&lt;/code>， 已支持 3.x。Quarkus用的是 4.x&lt;/li>
&lt;li>Http client : RestClient，最终使用的是 &lt;code>Apache httpcomponent HttpClient&lt;/code> ，已支持。&lt;/li>
&lt;li>ORM:
&lt;ul>
&lt;li>&lt;code>Hibernate&lt;/code>：不支持。&lt;/li>
&lt;li>&lt;code>MyBatis&lt;/code>: 支持 3.4.x -&amp;gt; 3.5.x&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redis: 使用了 &lt;code>vertx-redis&lt;/code>，Vertx是自己用NetSocket实现了redis的协议，目前还不支持。&lt;/li>
&lt;/ul>
&lt;p>可以看到，目前redis client、http Server、Hibernate还不支持。&lt;/p>
&lt;p>注：详细请参考官方的 &lt;a class="link" href="https://skywalking.apache.org/docs/skywalking-java/latest/en/setup/service-agent/java-agent/supported-list/" target="_blank" rel="noopener"
>支持列表&lt;/a> 。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="resteasy-4x">RestEasy 4.x&lt;/h3>
&lt;p>这个我提了 &lt;a class="link" href="https://github.com/apache/skywalking-java/pull/265" target="_blank" rel="noopener"
>PR&lt;/a>，已 &lt;a class="link" href="https://github.com/apache/skywalking-java/commit/a60a61b83de7d7daed1a4bb1d2953ce1bc3f4fa4" target="_blank" rel="noopener"
>合入main分支&lt;/a>，等8.12.0版本发布就行，或者先下载 &lt;a class="link" href="https://github.com/apache/skywalking-java/commits/main" target="_blank" rel="noopener"
>main分支源码&lt;/a>、自行打包用着。&lt;/p>
&lt;p>&lt;strong>2022-09-10更新&lt;/strong> 8.12.0 版本已经release：&lt;a class="link" href="https://github.com/apache/skywalking-java/releases/tag/v8.12.0" target="_blank" rel="noopener"
>Releases v8.12.0&lt;/a>，可直接使用&lt;/p>
&lt;p>在实操中，请移除掉 RestEasy 3.x 的插件，以免冲突。如在sidecar中执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm /skywalking/agent/plugins/resteasy-server-3.x*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="hibernate">Hibernate&lt;/h3>
&lt;p>ORM虽然不支持 &lt;code>Hibernate&lt;/code>，但支持具体的jdbc驱动（如Mysql、PostgreSql等），其实是可以追踪到数据库读写的，只是少了ORM这一层而已，关系不大。&lt;/p>
&lt;h3 id="vertx相关">Vert.X相关&lt;/h3>
&lt;p>什么？Vert.X-core不是支持了吗？&lt;/p>
&lt;p>正因为支持了才有问题！&lt;/p>
&lt;h4 id="skywalking如何支持vertx的">Skywalking如何支持Vert.X的&lt;/h4>
&lt;p>我们可以先看看Skywalking的 &lt;a class="link" href="https://github.com/apache/skywalking-java/tree/main/apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-4.x-plugin" target="_blank" rel="noopener"
>&lt;code>vertx-core-4.x-plugin&lt;/code>&lt;/a> 源码，跟踪原理很简单，它对 &lt;code>VertxBuilder&lt;/code> 进行了增强，在VertxImpl实例化时注入了 &lt;code>SWVertxTracer&lt;/code> 作为Vertx的tracer，也就是说利用了vertx的tracer机制。&lt;/p>
&lt;p>这样做的原因很简单，Vertx大量用到了EventLoop线程和Worker线程的切换，如果直接像其他的Skywalking插件一样，直接增强处理的方法，那么调用 &lt;code>ContextManager.getOrCreate()&lt;/code> 的时候，由于线程切换，是拿不到上一个span使用的 &lt;code>TracerContext&lt;/code> （保存在ThreadLocal里）的，也就是每个操作都成了独立的TracerContext，那么就无法将span串起来，也就无法实现追踪。所以直接利用Vert.X自己提供的tracer机制，Vert.X各个组件在触发一些事件（如Http服务接受到请求，Http客户端接受到响应）时，就会调用 &lt;code>VertxTracer&lt;/code> 的对应方法，记录事件，在这个过程中，Vertx是允许带一个Payload的，对于 &lt;code>vertx-core-4.x-plugin&lt;/code> 插件，这个Payload就是 Skywalking的 &lt;code>AbstractSpan&lt;/code> ，这样就可以在Vert.X内部实现绕开ThreadLocal的线程限制、进行追踪了。&lt;/p>
&lt;h4 id="skywalking对vertx的支持与quarkus的关系">Skywalking对Vert.X的支持、与Quarkus的关系&lt;/h4>
&lt;p>那么问题在哪呢？&lt;/p>
&lt;p>问题就在于，这样的机制决定了，只有在Vert.X体系里的才会被追踪到，看看前面列的那些组件，RestEasy、HttpClient、JDBC Driver这些都不在Vert.X控制下的，他们产生的Span和Vert.X是无法关联起来的。&lt;/p>
&lt;p>我们再看看目前 &lt;code>vertx-core-4.x-plugin&lt;/code> 实际支持的Vert.X组件，从 &lt;a class="link" href="https://github.com/apache/skywalking-java/blob/main/apm-sniffer/apm-sdk-plugin/vertx-plugins/vertx-core-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/vertx4/SWVertxTracer.java" target="_blank" rel="noopener"
>源码&lt;/a> 来看，实际支持了HTTP服务、HTTP客户端，以及EventBus（包括本地的和分布式的）。&lt;/p>
&lt;p>一个个看：&lt;/p>
&lt;ul>
&lt;li>HTTP服务，Quarkus在Vert.X-core之上用了 &lt;code>RestEasy&lt;/code> 做路由，其实是无需再在Vert.X里面追踪的。&lt;/li>
&lt;li>HTTP客户端，前面说了，目前用的是 &lt;code>Apache httpcomponent HttpClient&lt;/code> ，也是不用管的。&lt;/li>
&lt;li>Eventbus，Quarkus确实用了Vert.X-core的EventBus，这个好像没啥办法&lt;/li>
&lt;li>Redis Client，目前 &lt;code>vertx-core-4.x-plugin&lt;/code> 不支持，Quarkus用到，有兴趣的朋友可以考虑实现一个、提个PR&lt;/li>
&lt;/ul>
&lt;p>问题捋完了，方案就是个取舍的问题了。&lt;/p>
&lt;ul>
&lt;li>艰难的道路——全面支持Vert.X
&lt;ul>
&lt;li>应用里的RestClient改成Vert.X的Http client&lt;/li>
&lt;li>扩展 &lt;code>vertx-core-4.x-plugin&lt;/code> ，增加Redis请求响应的处理&lt;/li>
&lt;li>考虑如何支持 JDBC Driver 的追踪&lt;/li>
&lt;li>对于Quarkus其他组件，随缘了，或者想办法把VertxTracer和正常的基于TreadLocal的TracerContext关联起来？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>世上无难事、只要肯放弃之路
&lt;ul>
&lt;li>排除掉 &lt;code>vertx-core-4.x-plugin&lt;/code> ，放弃EventBus和Redis Client的追踪&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>我选择放弃，在sidecar里面执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm /skywalking/agent/plugins/apm-vertx-core-*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>RestEasy 4.x 将在Skywalking 8.12.0里面支持，如有需要可提前自行编译（&lt;strong>2022-09-10更新&lt;/strong> 2022-09-03已release）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>放弃EventBus和Redis Client的追踪，下次一定.jpg&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sidecar里面记得排除不必要的plugin：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm /skywalking/agent/plugins/apm-vertx-core-* /skywalking/agent/plugins/resteasy-server-3.x*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Skywalking Java Agent在M1芯片MacOS下的开发tips</title><link>https://leibnizhu.github.io/p/Skywalking-Java-Agent%E5%9C%A8M1%E8%8A%AF%E7%89%87MacOS%E4%B8%8B%E7%9A%84%E5%BC%80%E5%8F%91tips/</link><pubDate>Thu, 30 Jun 2022 21:10:28 +0800</pubDate><guid>https://leibnizhu.github.io/p/Skywalking-Java-Agent%E5%9C%A8M1%E8%8A%AF%E7%89%87MacOS%E4%B8%8B%E7%9A%84%E5%BC%80%E5%8F%91tips/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Skywalking-Java-Agent%E5%9C%A8M1%E8%8A%AF%E7%89%87MacOS%E4%B8%8B%E7%9A%84%E5%BC%80%E5%8F%91tips/platform.jpg" alt="Featured image of post Skywalking Java Agent在M1芯片MacOS下的开发tips" />&lt;p>Skywalking Java Agent的开发与测试在官网文档已经有详尽的介绍，包括（但不限于）：&lt;/p>
&lt;ul>
&lt;li>编译： &lt;a class="link" href="https://skywalking.apache.org/docs/skywalking-java/latest/en/contribution/compiling/" target="_blank" rel="noopener"
>Compiling Guidance&lt;/a> ，及 &lt;a class="link" href="https://github.com/apache/skywalking/blob/master/docs/en/guides/How-to-build.md" target="_blank" rel="noopener"
>How to build a project&lt;/a>&lt;/li>
&lt;li>编写testcase并运行： &lt;a class="link" href="https://skywalking.apache.org/docs/skywalking-java/latest/en/setup/service-agent/java-agent/plugin-test/" target="_blank" rel="noopener"
>Plugin automatic test framework&lt;/a>&lt;/li>
&lt;li>发布： &lt;a class="link" href="https://github.com/apache/skywalking/blob/master/docs/en/guides/How-to-release.md" target="_blank" rel="noopener"
>Apache SkyWalking release guide&lt;/a>，及 &lt;a class="link" href="https://skywalking.apache.org/docs/skywalking-java/latest/en/contribution/release-java-agent/" target="_blank" rel="noopener"
>Java Agent Release Guidance&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>但在M1芯片的MacOS中，还是有一些需要调整的地方，在此简单记录一下。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>编译过程需要clone其他仓库等一些网络操作，请先保障网络畅通；若直连网速不佳，请先备好梯子并配置到终端，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">ALL_PROXY&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>socks5://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global http.proxy socks5://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git config --global https.proxy socks5://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>clone完 &lt;a class="link" href="https://github.com/apache/skywalking-java" target="_blank" rel="noopener"
>skywalking-java&lt;/a> 后，先初始化git子模块，&lt;a class="link" href="https://github.com/apache/skywalking/blob/master/docs/en/guides/How-to-build.md" target="_blank" rel="noopener"
>官方文档&lt;/a> 也有说到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译过程会下载 &lt;code>protobuf&lt;/code>， 而目前没有M1对应的版本，请在 &lt;code>test/plugin/agent-test-tools/bin/fetch-code.sh&lt;/code> 增加 &lt;code>-Dos.detected.classifier=osx-x86_64&lt;/code> ，具体位置大约在32行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$ROOT_DIR&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>/../../../../mvnw -B package -DskipTests -Dos.detected.classifier&lt;span style="color:#5bc4bf">=&lt;/span>osx-x86_64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动Docker&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试用到 &lt;code>docker-maven-plugin&lt;/code> 起docker容器，这插件可能还没支持 macOS aarch64，无法使用 unix socket，导致在 M1 使用 &lt;code>docker-maven-plugin&lt;/code> 构建镜像报错，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>could &lt;span style="color:#815ba4">not&lt;/span> get native definition &lt;span style="color:#815ba4">for&lt;/span> type &lt;span style="color:#5bc4bf">`&lt;/span>POINTER&lt;span style="color:#5bc4bf">`&lt;/span>, original error message follows: java.lang.UnsatisfiedLinkError: Unable &lt;span style="color:#815ba4">to&lt;/span> execute &lt;span style="color:#815ba4">or&lt;/span> &lt;span style="color:#815ba4">load&lt;/span> jffi &lt;span style="color:#815ba4">binary&lt;/span> stub &lt;span style="color:#815ba4">from&lt;/span> &lt;span style="color:#5bc4bf">`/&lt;/span>var&lt;span style="color:#5bc4bf">/&lt;/span>folders&lt;span style="color:#5bc4bf">/&lt;/span>c0&lt;span style="color:#5bc4bf">/&lt;/span>xxxxxx&lt;span style="color:#5bc4bf">/&lt;/span>T&lt;span style="color:#5bc4bf">/`&lt;/span>. &lt;span style="color:#fec418">Set&lt;/span> &lt;span style="color:#5bc4bf">`&lt;/span>TMPDIR&lt;span style="color:#5bc4bf">`&lt;/span> &lt;span style="color:#815ba4">or&lt;/span> Java property &lt;span style="color:#5bc4bf">`&lt;/span>java.io.tmpdir&lt;span style="color:#5bc4bf">`&lt;/span> &lt;span style="color:#815ba4">to&lt;/span> a &lt;span style="color:#815ba4">read&lt;/span>&lt;span style="color:#5bc4bf">/&lt;/span>&lt;span style="color:#815ba4">write&lt;/span> path that &lt;span style="color:#815ba4">is&lt;/span> &lt;span style="color:#815ba4">not&lt;/span> mounted &lt;span style="color:#48b685">&amp;#34;noexec&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[ERROR] &lt;span style="color:#5bc4bf">/&lt;/span>xxxxx&lt;span style="color:#5bc4bf">/&lt;/span>skywalking&lt;span style="color:#5bc4bf">-&lt;/span>java&lt;span style="color:#5bc4bf">/&lt;/span>xxxx.dylib: &lt;span style="color:#06b6ef">dlopen&lt;/span>(&lt;span style="color:#5bc4bf">/&lt;/span>xxxxx&lt;span style="color:#5bc4bf">/&lt;/span>skywalking&lt;span style="color:#5bc4bf">-&lt;/span>java&lt;span style="color:#5bc4bf">/&lt;/span>xxxxx.dylib, &lt;span style="color:#f99b15">0&lt;/span>x0001): tried: &lt;span style="color:#48b685">&amp;#39;/xxxxx/skywalking-java/xxxxx.dylib&amp;#39;&lt;/span> (fat file, but missing compatible &lt;span style="color:#06b6ef">architecture&lt;/span> (have &lt;span style="color:#48b685">&amp;#39;i386,x86_64&amp;#39;&lt;/span>, need &lt;span style="color:#48b685">&amp;#39;arm64e&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要通过 &lt;code>socat&lt;/code> 来桥接，具体操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"># 安装socat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install socat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"># 将 unix socket 代理到 tcp 端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nohup socat TCP-LISTEN:2375,range&lt;span style="color:#5bc4bf">=&lt;/span>127.0.0.1/32,reuseaddr,fork UNIX-CLIENT:/var/run/docker.sock &amp;amp;&amp;gt; /dev/null &amp;amp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"># 设置环境变量为socat桥接的tcp端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">DOCKER_HOST&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>tcp://127.0.0.1:2375
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>执行测试拉取docker镜像时，tomcat没有m1的版本，参考 &lt;a class="link" href="https://dmp.fabric8.io/#build-configuration" target="_blank" rel="noopener"
>&lt;code>docker-maven-plugin&lt;/code> 的配置文档&lt;/a> 在 &lt;code>test/plugin/containers/jvm-container/pom.xml&lt;/code> 加入 &lt;code>createImageOptions&lt;/code> 参数（请注意，&lt;code>docker-maven-plugin&lt;/code> 的0.39.0版本才有这个参数）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>io.fabric8&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>docker-maven-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 关键点1: 插件版本 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>0.40.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;images&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;image&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>skywalking/agent-test-jvm:${container_image_version}&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 关键点2: 通过 createImageOptions 配置docker镜像选用的平台 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;createImageOptions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;platform&amp;gt;&lt;/span>linux/x86_64&lt;span style="color:#5bc4bf">&amp;lt;/platform&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/createImageOptions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;from&amp;gt;&lt;/span>${base_image_java}&lt;span style="color:#5bc4bf">&amp;lt;/from&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;workdir&amp;gt;&lt;/span>/usr/local/skywalking/scenario&lt;span style="color:#5bc4bf">&amp;lt;/workdir&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;assembly&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 以下省略 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>到此为止，就可以使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bash ./test/plugin/run.sh -f &lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">scenario_name&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来执行测试了。&lt;/p></description></item><item><title>换电脑了</title><link>https://leibnizhu.github.io/p/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86/</link><pubDate>Fri, 03 Jun 2022 22:19:59 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%8D%A2%E7%94%B5%E8%84%91%E4%BA%86/thumbnail.jpg" alt="Featured image of post 换电脑了" />&lt;p>记录一下。&lt;br>
2016款15寸MBP，购于2017年，定制加了内存、CPU、SSD。&lt;/p>
&lt;p align="center">
&lt;img src="mbp15.png" width="600" />
&lt;/p>
&lt;p>大概是去年年初的时候霍尔感应器坏了，感应不到开盖动作，开盖后按键盘可以恢复休眠，但屏幕亮不了————其实屏幕也是有显示的，但是没背光，打着手电勉强能看到是有显示的；要用磁铁在喇叭附近吸一下才能亮屏。&lt;br>
到了去年4月就彻底罢工，磁铁不再管用，铷磁铁也不行，要亮屏必须强制重启才能亮屏。&lt;br>
Apple Store对这种问题的解决方案是换主板，几千块，修是不会给你修的。最后找人直接换了霍尔感应器，复活了。&lt;/p>
&lt;p>上周，5月26号开始发现电脑有在开着盖的前提下自己灭屏的情况，折腾下就又好了。次日上午，复现，反复开合盖又可以了。到下午，彻底亮不了屏，重启也不行，也是没背光，看起来像是背光直接坏了。借了个显示器外接凑合用了一下午。&lt;/p>
&lt;p>回家翻出XPS13装了一下软件凑合用着先，不得不说真是不习惯Windows，不过也是勉强能用了。&lt;/p>
&lt;p>所以有仨方案：&lt;/p>
&lt;ol>
&lt;li>修MBP，代价未知，预后未知；加上之前风扇也一直有问题（响声特别大，不是积灰那种声音，是准备起飞那种；&lt;/li>
&lt;li>继续用XPS13，能给我用的时间大概还有两个月，过了一周适应期也能凑合用起来；&lt;/li>
&lt;li>换新MBP，看了下官网，发货要到7月份了。&lt;/li>
&lt;/ol>
&lt;p>到29号的时候，忽然想到看看官翻，可以马上发货，但只有14寸丐中丐版本。14寸是我想要的，但16G内存有点……再思考了一下，其实16G也够平常上班写写代码了，24期免息走起。&lt;/p>
&lt;p>官翻发货是真的快，第二天发货，顺丰，再隔了一天就到了。&lt;/p>
&lt;p align="center">
&lt;img src="order.png" width="400" />
&lt;/p>
&lt;p>开箱，开机，插上移动硬盘TimeMachine恢复，很快就恢复了生产力，嗷嗷的。&lt;br>
说下体验：&lt;/p>
&lt;ol>
&lt;li>屏幕没得说，mbp屏幕一直很OK的，这次miniLED 120Hz的体验是更好了；其他的触摸板之类的也是，一如既往。&lt;/li>
&lt;li>这代的mbp不用蝴蝶键盘了，不过我其实还挺喜欢蝴蝶二代的，放膝盖上敲特别有感觉；当然了，新的这个手感也还可以。嗯虽然手里有Filco Minila Air红轴和RealForce 87u十周年纪念静音版，但平时还是用笔记本自己键盘比较多。&lt;/li>
&lt;li>续航和散热，杠杠的，看了下监控，其实很多时候都没开风扇，比如只是看看网页、vscode写写文档、代码，不编译的时候。&lt;/li>
&lt;li>magesafe充电也回来了，好评；读卡器回归，不过我用不上。&lt;/li>
&lt;li>编译速度肉眼可见快了很多（当然，只是跟我的老mbp比）&lt;/li>
&lt;li>外放，用网抑云的时候偶尔会爆音，原因未明，网上也有类似的情况： &lt;a class="link" href="https://discussionschinese.apple.com/thread/253662950" target="_blank" rel="noopener"
>问：macbook pro 14寸 音响破音&lt;/a> ，网页看视频开外放则不会，奇怪。&lt;/li>
&lt;li>外观：比2016款是丑了很多，不过也标志着mac团队从设计主导往技术/实用主导的变化吧&lt;/li>
&lt;/ol>
&lt;p align="center">
&lt;img src="mbp14.png" width="600" />
&lt;/p>
&lt;p>关于刘海：&lt;br>
目前的系统导航栏图标太多被挤到刘海里面之后是显示不了的，只能通过command+拖拽图标进刘海里面，才能把刘海里面的图标挤回来。&lt;br>
还有一种方案是装某些折叠导航栏的app，比如 bartender（收费软件），也可以用 &lt;a class="link" href="https://github.com/dwarvesf/hidden" target="_blank" rel="noopener"
>Hidden Bar&lt;/a> ，免费，前面链接是github地址。安装后只保留用得多的一些图标，其他统统折叠起来————对，只是为了保证要用的时候能找到，展开后要找刘海里的图标还是靠挤。&lt;/p></description></item><item><title>关于Quarkus的碎碎念</title><link>https://leibnizhu.github.io/p/%E5%85%B3%E4%BA%8EQuarkus%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link><pubDate>Sun, 15 May 2022 16:03:10 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%85%B3%E4%BA%8EQuarkus%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%85%B3%E4%BA%8EQuarkus%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/thumbnail.jpg" alt="Featured image of post 关于Quarkus的碎碎念" />&lt;p>最近把一个老项目迁到了Quarkus，想谈谈一些感想和想-法。&lt;/p>
&lt;h2 id="why-quarkus">Why Quarkus???&lt;/h2>
&lt;p>答案很简单，for 云原生。在 &lt;a class="link" href="https://quarkus.io/" target="_blank" rel="noopener"
>官网&lt;/a> 也可以看到Quarkus的宣传点也是围绕云原生进行的。&lt;br>
云原生的实现大概有这些要点：&lt;/p>
&lt;ol>
&lt;li>应用/架构设计遵循 &lt;a class="link" href="https://12factor.net/" target="_blank" rel="noopener"
>12-Factor&lt;/a>&lt;/li>
&lt;li>服务容器化，最好框架层面就有支持&lt;/li>
&lt;li>启动速度快，资源占用少，便于伸缩。这里又包括镜像大小、layer设计、应用本身启动速度等因素。&lt;/li>
&lt;li>配合GitOps持续集成、持续交付&lt;/li>
&lt;/ol>
&lt;p>而Quarkus很好解决了这些问题。反观Spring，在启动速度、资源占用这块实在不尽人意，对k8s的支持也是很落后，对graalvm native- image也是起步落后。&lt;/p>
&lt;h2 id="用不用native">用不用Native??&lt;/h2>
&lt;p>谈Quarkus绕不开native（native可执行文件的构建）。没办法，官方先来的，首页就是大大的native/jvm性能对比。&lt;br>
native实测是真的快（不到0.1s），内存占用也确实小（启动几十MB，跑一段时间稳定大概300MB附近，不过不同压力的不同类型服务也不能说明什么）。但有什么缺点？&lt;/p>
&lt;ol>
&lt;li>&lt;strong>编译速度慢&lt;/strong> ：一个比较简单的web服务，在我们CICD的机器上编译大概需要4min，如果是容器内multistage编译则时间更长，但直接编译对环境又有要求，所以还是最好有更强大的编译机器。&lt;/li>
&lt;li>&lt;strong>编译产物体积大&lt;/strong> ：我们编译出来的二进制文件大约130-150MB，&lt;code>upx&lt;/code> 压缩后40MB以内；单看最后的docker镜像，如果用最小的基础镜像，大约整个镜像可以做到100MB以内，是挺小的；但是每次构建变更的layer，都是整个二进制文件的变更，也就是没次编译多了一个40MB的layer出来，体积相当可观。同样的服务，如果打jar，真正变更的只有不到1MB，pod拉镜像的速度会更快，对docker仓库的压力也更小。&lt;/li>
&lt;li>&lt;strong>开发多了不少限制&lt;/strong> ：你要注意新引入的依赖是不是支持native的；所以可能需要json序列化反序列化的类记得加上 &lt;code>@RegisterForReflection&lt;/code> 注解；如果是外部依赖的实体类，要编写一个什么json文件声明要处理…………本文不是Quarkus教程，就不详细展开了，总之，如果要native，最好整个服务都只用quarkus生态里面的依赖，否则你不知道什么时候就编译不了了。虽然quarkus的生态已经比较完善，但总有没cover到的地方，比如hadoop生态的sdk。&lt;/li>
&lt;/ol>
&lt;p>没错，我们quarkus native上了生产一两个月，运行良好，充分体现了native的优越性；但是，现在要加入hadoop这些，没办法，只能放弃，要么自己实现一整套hdfs client之类的，成本很高。&lt;/p>
&lt;h2 id="响应式要上吗">响应式要上吗?&lt;/h2>
&lt;p>官网说：&lt;/p>
&lt;blockquote>
&lt;p>Unifies imperative and reactive
Combine both the familiar imperative code and the reactive style when developing applications.&lt;/p>
&lt;/blockquote>
&lt;p>真的有那么Unify吗？未必哦。&lt;br>
这里说的 &lt;code>Unifies imperative and reactive&lt;/code> 是指：&lt;/p>
&lt;ul>
&lt;li>Quarkus core基于Vert.X实现，是响应式的，这也是它能unify命令式和响应式的关键原因，也是各个扩展能自行选择命令式实现和响应式实现的原因&lt;/li>
&lt;li>Quarkus在Vert.X基础上做了一个路由层来兼容两种实现，像HTTP请求这种直接通过路由层、如果是响应式代码，直接在I/O线程上执行；命令式代码则丢到Worker线程执行（就要做上下文切换了）；至于Quarkus怎么知道是什么实现，就看方法注解以及签名了，具体不展开&lt;/li>
&lt;li>也就是说，至少在http接口这一层面，开发者可以选择用命令式还是响应式编程实现，另外定时任务、Eventbus之类也是支持的&lt;/li>
&lt;li>但到了ORM层只能有一个选择，是的， &lt;code>Hibernate&lt;/code> 和 &lt;code>Hibernate-reactive&lt;/code> 显然不能共存。&lt;/li>
&lt;/ul>
&lt;p>如果选了 &lt;code>Hibernate-reactive&lt;/code> 那么意味你的dao都是返回Uni或Multi，这会一直传递出去（除非await结果）。&lt;br>
另外，像 &lt;code>resteasy&lt;/code> 用了reative的话，filter这些在I/O线程运行，不能阻塞，如果里面用到redis client之类也要改Reactive RedisClient。&lt;br>
总而言之，选了Reactive，多少是有 &lt;strong>传递性&lt;/strong> 的，很多地方要跟着改。&lt;br>
在我们的项目里，也开了个分支彻底改了Reactive，发现在一些地方支持还不是很好，比如 ：&lt;/p>
&lt;ul>
&lt;li>&lt;code>@Scheduled&lt;/code> 方法里面开Panache的多表事务会报错&lt;/li>
&lt;li>EventBus的 &lt;code>@ConsumeEvent&lt;/code> 注释的方法，同上&lt;/li>
&lt;li>&lt;code>Hibernate-reactive&lt;/code> 不支持 OneToMany ManyToOne 等的懒加载，必须在HQL用 &lt;code>join fetch&lt;/code> 声明拉外表（就不是lazy了）&lt;/li>
&lt;li>………………&lt;/li>
&lt;/ul>
&lt;p>最后，基于以下考虑，放弃了reactive：&lt;/p>
&lt;ol>
&lt;li>老代码迁移，不可能dao全部改reactive，况且dao层还会往外传递reactive&lt;/li>
&lt;li>quarkus reactive 本身限制，比如上面列的一些点&lt;/li>
&lt;li>团队接受、理解Reactive的成本&lt;/li>
&lt;li>&lt;a class="link" href="https://openjdk.java.net/jeps/425" target="_blank" rel="noopener"
>virtual thread&lt;/a> 已经进入 jdk19 preview了，到下个LTS，jdk21，quarkus应该已经跟进支持，到时切过去就是。&lt;/li>
&lt;/ol>
&lt;p>从长远来看，趋势应该是开发者只要写同步代码，不用管实际执行，通过虚拟线程压榨线程性能，大部分需求不需要在代码层面通过类似reactive这样的pattern提高性能。&lt;br>
当然不是说有了Loom、reactive就没用了，只是说在压榨线程性能这一点上，可以交给loom；而我们用reactive也不只是为了性能，具体就不展开了，可以看看 &lt;a class="link" href="https://www.reactivemanifesto.org/" target="_blank" rel="noopener"
>The Reactive Manifesto&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>有一说一，Quarkus 的 mutiny对比RxJava之类，好用不是一点两点，接口设计相当优秀，值得学习。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="openapi">OpenAPI&lt;/h3>
&lt;p>回顾下使用OpenAPI的目的：&lt;/p>
&lt;ol>
&lt;li>接口标准&lt;/li>
&lt;li>提供给其他业务方/前端访问文档&lt;/li>
&lt;li>提供给其他业务方自己按需生成SDK使用&lt;/li>
&lt;/ol>
&lt;p>第1点是OpenAPI本身的特性，第2点Quarkus可以集成。&lt;br>
Quarkus对OpenAPI的支持可以见 &lt;a class="link" href="https://quarkus.io/guides/openapi-swaggerui" target="_blank" rel="noopener"
>官网Guides&lt;/a> ，说几个点：&lt;/p>
&lt;ol>
&lt;li>支持按代码生成OpenAPI定义&lt;/li>
&lt;li>支持按代码生成Swagger-UI界面（后者默认是dev模式才有，可以通过 &lt;code>quarkus.swagger-ui.always-include=true&lt;/code> 开启非dev模式下可用）&lt;/li>
&lt;li>支持放一个自己写的OpenAPI定义文件，作为上面1、2点生成的一部分；但，Quarkus要求openapi定义文件必须放在固定路径下，如&lt;code>resources/META-INF/openapi.yml&lt;/code>
等几个指定路径，具体参见 &lt;a class="link" href="https://quarkus.io/guides/openapi-swaggerui#open-document-paths" target="_blank" rel="noopener"
>Using OpenAPI And Swagger UI&lt;/a> 。&lt;/li>
&lt;/ol>
&lt;p>第3点会带来一些不便，比如，OpenAPI spec文件在另一个项目，deploy到maven仓库，Quarkus的项目去依赖的时候，就要求它按这个目录来，如果OpenAPI spec是外部的项目，就不好控制了。&lt;/p>
&lt;h3 id="restclient">RestClient&lt;/h3>
&lt;p>Quarkus的 &lt;a class="link" href="https://quarkus.io/guides/rest-client-reactive" target="_blank" rel="noopener"
>RestClient&lt;/a> 基本功能是完备的，配合 &lt;code>quarkus-smallrye-fault-tolerance&lt;/code> 可以做一些重试啊、Fallback啊、熔断啊之类的操作。&lt;br>
但有两个点要吐槽下：&lt;/p>
&lt;ol>
&lt;li>RestClient是可以通过 &lt;code>@RegisterClientHeaders&lt;/code> 注册一个请求header的处理器的；但这个处理器的生命周期是restclient自己管的，给一个输入的header，你可以往里加header之类，实际上能操作的空间的很小，一般就是只能加一些固定的header。所以很多时候只能在接口方法加 &lt;code>@HeaderParam&lt;/code> 的参数，如果又有一些固定的header处理逻辑，要么就写一层Facade，要么就在接口里做个default方法处理下。&lt;/li>
&lt;li>接口的异常处理定义比较弱，基本只能通过Interceptor、或者异常捕获；比如想根据响应http status code有不同处理，获取响应header这种，就比较麻烦。&lt;/li>
&lt;/ol>
&lt;h3 id="multipart">Multipart&lt;/h3>
&lt;p>有一点比较坑的，&lt;code>@MultipartForm&lt;/code> 注解有俩：&lt;/p>
&lt;ul>
&lt;li>org.jboss.resteasy.annotations.providers.multipart.MultipartForm&lt;/li>
&lt;li>org.jboss.resteasy.reactive.MultipartForm&lt;/li>
&lt;/ul>
&lt;p>还都是resteasy下的，注意哈，用第一个才行的，resteasy-multipart-provider 里面的。&lt;/p>
&lt;h3 id="redisclient">RedisClient&lt;/h3>
&lt;p>好几个方法，如 &lt;code>io.quarkus.redis.client.RedisClient#del&lt;/code> ，没用变长参数，用的是List接收参数。 算是有点不方便吧。&lt;/p></description></item><item><title>跨Yarn集群提交spark任务——之Spark2.4坑</title><link>https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/</link><pubDate>Sat, 14 May 2022 20:33:58 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/blackcat.jpeg" alt="Featured image of post 跨Yarn集群提交spark任务——之Spark2.4坑" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>去年写过一篇 &lt;a class="link" href="https://leibnizhu.github.io/2021/12/04/%e8%b7%a8Yarn%e9%9b%86%e7%be%a4%e6%8f%90%e4%ba%a4spark%e4%bb%bb%e5%8a%a1/" >跨Yarn集群提交spark任务&lt;/a> ，是在Spark2.2基础上做的动态提交外部Yarn集群。这里“动态”指不事先将 &lt;code>*-site.xml&lt;/code> 打入jar包，而是执行任务时根据配置按需提交到对应集群；而“外部”集群是相对jar包中（如果已有）的 &lt;code>*-site.xml&lt;/code> 对应的集群以外的集群，也是在“动态”提交的context中定义的，可以理解为提交到任意网络互通的集群。&lt;/p>
&lt;p>简单回顾下，主要做了两件事情：&lt;/p>
&lt;ol>
&lt;li>创建SparkContext前，将外部集群的 &lt;code>*-site.xml&lt;/code> 放入classpath，如 &lt;code>$PWD&lt;/code> 。&lt;/li>
&lt;li>创建SparkContext前，&lt;code>HADOOP_CONF_DIR&lt;/code> 和 &lt;code>YARN_CONF_DIR&lt;/code> 环境变量改为外部集群 &lt;code>*-site.xml&lt;/code> 配置文件所在位置；由于启动java程序后不能直接修改环境变量，在实现上使用了黑魔法。&lt;/li>
&lt;/ol>
&lt;p>时隔半年终于重拾博客，显然又被坑了，没错，之前的方法在Spark2.4里行不通了。&lt;/p>
&lt;h2 id="问题原因分析及解决方案">问题、原因分析、及解决方案&lt;/h2>
&lt;h3 id="spark24中的报错">Spark2.4中的报错&lt;/h3>
&lt;p>在原来代码基础上，升级Spark为2.4.8，执行提交到外部集群的任务，提交到Yarn的AM报错如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>Container id: container_e36_1650338235135_41710_02_000001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Exit code: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Container exited with a non-zero exit code 1. Error file: prelaunch.err.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Last 4096 bytes of prelaunch.err :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Last 4096 bytes of stderr :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Exception in thread &amp;#34;main&amp;#34; java.lang.IllegalArgumentException: java.net.UnknownHostException: channel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.security.SecurityUtil.buildTokenService(SecurityUtil.java:374)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.hdfs.NameNodeProxies.createNonHAProxy(NameNodeProxies.java:312)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.hdfs.NameNodeProxies.createProxy(NameNodeProxies.java:178)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.hdfs.DFSClient.&amp;lt;init&amp;gt;(DFSClient.java:665)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.hdfs.DFSClient.&amp;lt;init&amp;gt;(DFSClient.java:601)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:148)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2619)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:91)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2653)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2635)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:370)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$$anonfun$8$$anonfun$apply$3.apply(ApplicationMaster.scala:219)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$$anonfun$8$$anonfun$apply$3.apply(ApplicationMaster.scala:217)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at scala.Option.foreach(Option.scala:257)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$$anonfun$8.apply(ApplicationMaster.scala:217)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$$anonfun$8.apply(ApplicationMaster.scala:182)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$$anon$3.run(ApplicationMaster.scala:780)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.security.AccessController.doPrivileged(Native Method)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at javax.security.auth.Subject.doAs(Subject.java:422)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1628)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster.doAsUser(ApplicationMaster.scala:779)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster.&amp;lt;init&amp;gt;(ApplicationMaster.scala:182)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ApplicationMaster$.main(ApplicationMaster.scala:803)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ExecutorLauncher$.main(ApplicationMaster.scala:834)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.apache.spark.deploy.yarn.ExecutorLauncher.main(ApplicationMaster.scala)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by: java.net.UnknownHostException: xxx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... 25 more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>xxx&lt;/code> 是外部集群的集群名（&lt;code>dfs.nameservices&lt;/code> 配置）。&lt;/p>
&lt;h3 id="直接原因分析">直接原因分析&lt;/h3>
&lt;p>仔细观察异常的调用栈，调用到了 &lt;code>NameNodeProxies.createNonHAProxy&lt;/code> ，而我们的集群是HA的，显然是读取到的配置不对了。&lt;/p>
&lt;p>看到这个类，阅读过hadoop源码的应该都知道，这是创建 &lt;code>DFSClient&lt;/code> 的时候，会先读取 &lt;code>dfs.client.failover.proxy.provider.{hdfs路径对应host}&lt;/code> 配置（取值是一个 &lt;code>FailoverProxyProvider&lt;/code> 具体实现的全限定类名），反射出Class对象并实例化，然后创建对应的HAProxy；而如果配置为空，则认为NameNode没有开启HA，直接将hdfs路径当作普通host来进行读取，如果实际上这个host是一个HA的nameservices名，不存在这个host，则会报上面的错误。&lt;/p>
&lt;p>所以可以确定，是AM读取不到正确的hdfs配置导致的。那么是为什么呢？&lt;/p>
&lt;p>仔细观察AM的日志，&lt;code>launch_container.sh&lt;/code> 里面：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">HADOOP_YARN_HOME&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">HADOOP_YARN_HOME&lt;/span>&lt;span style="color:#815ba4">:-&lt;/span>&lt;span style="color:#48b685">&amp;#34;/usr/hdp/2.6.5.0-292/hadoop-yarn&amp;#34;&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">CLASSPATH&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">/__spark_conf__:&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">/__spark_libs__/*:&lt;/span>&lt;span style="color:#ef6155">$HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#ef6155">$HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">/__spark_conf__/__hadoop_conf__&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">SPARK_CONF_DIR&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;/opt/package/spark-2.4.8-bin-hadoop2.6/conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#………………&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时注意到 directory.info 记录的目录结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ls -l:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#f99b15">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">71&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 container_tokens
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">712&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 default_container_executor_session.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">766&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 default_container_executor.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">5787&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 launch_container.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lrwxrwxrwx &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">80&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 __spark_conf__ -&amp;gt; /path/to/filecache/29549/__spark_conf__.zip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 __spark_libs__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwx--x--- &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find -L . -maxdepth &lt;span style="color:#f99b15">5&lt;/span> -ls:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734730&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx--x--- &lt;span style="color:#f99b15">4&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734738&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">766&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./default_container_executor.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734734&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> -rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">5787&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./launch_container.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734733&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">12&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./.container_tokens.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734741&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwxr-xr-x &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_libs__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105382561&lt;/span> &lt;span style="color:#f99b15">555832&lt;/span> -r-xr-xr-x &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">569170427&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_libs__/mySparkApp.jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734731&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx--x--- &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734735&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">56&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./.launch_container.sh.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734739&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">16&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./.default_container_executor.sh.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734732&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">71&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./container_tokens
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734736&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rwx------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">712&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./default_container_executor_session.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">204734737&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">16&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./.default_container_executor_session.sh.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120101&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx------ &lt;span style="color:#f99b15">3&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120108&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">3063&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__spark_conf__.properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120107&lt;/span> &lt;span style="color:#f99b15">120&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">120306&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__spark_hadoop_conf__.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120102&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx------ &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__hadoop_conf__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120103&lt;/span> &lt;span style="color:#f99b15">20&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">19814&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__hadoop_conf__/yarn-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120104&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4282&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__hadoop_conf__/core-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120106&lt;/span> &lt;span style="color:#f99b15">20&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">19567&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__hadoop_conf__/hive-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">105120105&lt;/span> &lt;span style="color:#f99b15">12&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">8312&lt;/span> May &lt;span style="color:#f99b15">12&lt;/span> 21:18 ./__spark_conf__/__hadoop_conf__/hdfs-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>broken symlinks&lt;span style="color:#5bc4bf">(&lt;/span>find -L . -maxdepth &lt;span style="color:#f99b15">5&lt;/span> -type l -ls&lt;span style="color:#5bc4bf">)&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>./__spark_conf__/__hadoop_conf__/&lt;/code> 里面是外部集群配置文件，而 &lt;code>./__spark_libs__/mySparkApp.jar&lt;/code> 是spark应用的jar，里面已经有原集群的配置文件。按 &lt;code>CLASSPATH&lt;/code> 定义的顺序，&lt;code>Configuration&lt;/code> 读取默认资源 &lt;code>core-site.xml&lt;/code> 、 &lt;code>hdfs-site.xml&lt;/code> （由&lt;code>HdfsConfiguration&lt;/code>静态代码块加入）的时候，优先从 &lt;code>./__spark_libs__/mySparkApp.jar&lt;/code> 读取了，而真正要用的外部集群配置，由于在 &lt;code>CLASSPATH&lt;/code> 中位置较后，不会被加载到。&lt;/p>
&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>知道问题的原因后，根据 &lt;code>CLASSPATH&lt;/code> 定义的顺序：&lt;/p>
&lt;ul>
&lt;li>&lt;code>$PWD&lt;/code> 里面的文件无法控制，跳过&lt;/li>
&lt;li>&lt;code>$PWD/__spark_conf__&lt;/code> 目录里面是Driver的SparkConf内容 &lt;code>__spark_conf__.properties&lt;/code> ，及所有hadoop相关配置整合到一起的的 &lt;code>__spark_hadoop_conf__.xml&lt;/code> ，也是无法控制的。注意这个 &lt;code>__spark_hadoop_conf__.xml&lt;/code> 里面虽然已经由Driver打入了外部集群的配置，但由于文件名不是 &lt;code>hdfs-site.xml&lt;/code> ，不会被 &lt;code>Configuration&lt;/code> 加载的。&lt;/li>
&lt;li>&lt;code>$PWD/__spark_libs__/*&lt;/code> 这里面就是我们的jar包，目前里面有原集群的配置文件，这其实也违反了 &lt;a class="link" href="https://12factor.net/config" target="_blank" rel="noopener"
>12-Factor 的 Config&lt;/a> 。&lt;/li>
&lt;li>中间两个忽略&lt;/li>
&lt;li>&lt;code>$PWD/__spark_conf__/__hadoop_conf__&lt;/code> 就是外部集群配置文件所在&lt;/li>
&lt;/ul>
&lt;p>那么解决方案也很简单了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>spark应用jar包里不要放任何 `*-site.xml` 配置文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>考虑到我们的Spark应用是用maven的shade插件打包的，可以配置为跳过这些xml即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-shade-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>package&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>shade&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;filter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifact&amp;gt;&lt;/span>*:*&lt;span style="color:#5bc4bf">&amp;lt;/artifact&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;excludes&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>yarn-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>hdfs-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>core-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>hbase-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>hive-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>kms-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclude&amp;gt;&lt;/span>mapred-site.xml&lt;span style="color:#5bc4bf">&amp;lt;/exclude&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/excludes&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/filter&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/filters&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新打包、运行任务，顺利执行。&lt;/p>
&lt;h2 id="spark22-与-spark24-yarn-client-模式提交任务差异">Spark2.2 与 Spark2.4 Yarn-Client 模式提交任务差异&lt;/h2>
&lt;h3 id="am的classpath目录结构差异">AM的classpath、目录结构差异&lt;/h3>
&lt;p>问题解决了，那么为什么Spark2.2升级Spark2.4之后就有这样的问题呢？从上面的分析，不难猜测到是AM的 &lt;code>CLASSPATH&lt;/code> 变了。随便找一个Spark2.2提交的任务也可以看到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#### launch_container.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">CLASSPATH&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">/__spark_conf__:&lt;/span>&lt;span style="color:#ef6155">$PWD&lt;/span>&lt;span style="color:#48b685">/__spark_libs__/*:&lt;/span>&lt;span style="color:#ef6155">$HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#ef6155">$HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">## 对比 Spark2.4的：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#export CLASSPATH=&amp;#34;$PWD:$PWD/__spark_conf__:$PWD/__spark_libs__/*:$HADOOP_CONF_DIR:$HADOOP_CONF_DIR:$PWD/__spark_conf__/__hadoop_conf__&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#### directory.info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>find -L . -maxdepth &lt;span style="color:#f99b15">5&lt;/span> -ls:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">6554176&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx--x--- &lt;span style="color:#f99b15">4&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">6554177&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">69&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./container_tokens
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">6554182&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">16&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./.default_container_executor_session.sh.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">6816116&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwxr-xr-x &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_libs__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">32768042&lt;/span> &lt;span style="color:#f99b15">559764&lt;/span> -r-xr-xr-x &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">573191196&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 10:44 ./__spark_libs__/titanServEtl.jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">6554180&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -rw-r--r-- &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">52&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./.launch_container.sh.crc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457924&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> drwx------ &lt;span style="color:#f99b15">2&lt;/span> yarn hadoop &lt;span style="color:#f99b15">4096&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457928&lt;/span> &lt;span style="color:#f99b15">20&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">19371&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__/hive-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457926&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">3064&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__/core-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457925&lt;/span> &lt;span style="color:#f99b15">20&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">17378&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__/yarn-site.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457929&lt;/span> &lt;span style="color:#f99b15">4&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">2473&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__/__spark_conf__.properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f99b15">31457927&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> -r-x------ &lt;span style="color:#f99b15">1&lt;/span> yarn hadoop &lt;span style="color:#f99b15">8009&lt;/span> May &lt;span style="color:#f99b15">13&lt;/span> 11:31 ./__spark_conf__/hdfs-site.xml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Spark2.4对比Spark2.2:&lt;/p>
&lt;ul>
&lt;li>AM 执行任务的目录：
&lt;ul>
&lt;li>将 &lt;code>*-site.xml&lt;/code> 配置文件独立放入了 &lt;code>./__spark_conf__/__hadoop_conf__&lt;/code> 目录，而非原来的 &lt;code>./__spark_conf__/&lt;/code> 目录&lt;/li>
&lt;li>多了一个 &lt;code>./__spark_conf__/__spark_hadoop_conf__.xml&lt;/code> 文件，存放了所有hadoop相关配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CLASSPATH 环境变量里将存放 &lt;code>*-site.xml&lt;/code> 配置文件的 &lt;code>$PWD/__spark_conf__/__hadoop_conf__&lt;/code> 目录放到了最后面。&lt;/li>
&lt;/ul>
&lt;p>以上两个原因共同导致了本文的错误发生。&lt;/p>
&lt;p>附目录对比截图：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/spark_dir.png"
width="1690"
height="712"
srcset="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/spark_dir_hu6d2902441b2adecf343dfaca58876801_229119_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/spark_dir_hu6d2902441b2adecf343dfaca58876801_229119_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="569px"
>&lt;/p>
&lt;h3 id="spark源码里的体现">Spark源码里的体现&lt;/h3>
&lt;p>上篇博客里提到Spark的yarn-client模式是通过 &lt;code>YarnClientSchedulerBackend&lt;/code> 处理的。&lt;br>
其 &lt;code>start()&lt;/code> 方法会调用 &lt;code>org.apache.spark.deploy.yarn.Client&lt;/code> 的 &lt;code>submitApplication()&lt;/code> 方法提交Yarn AM。&lt;br>
&lt;code>submitApplication()&lt;/code> 调用 &lt;code>createContainerLaunchContext&lt;/code> 构造ContainerLaunchContext对应的上下文，构建的启动Yarn AM的任务命令cmds，里面比较重要的有两步:&lt;/p>
&lt;ol>
&lt;li>调用 &lt;code>setupLaunchEnv()&lt;/code> 构造环境变量，其中我们关心的 &lt;code>CLASSPATH&lt;/code> 是在 &lt;code>populateClasspath()&lt;/code> 方法里处理的；&lt;/li>
&lt;li>调用 &lt;code>prepareLocalResources()&lt;/code> 准备Yarn AM需要的一些资源，包括调用 &lt;code>createConfArchive()&lt;/code> 创建 &lt;code>__spark_conf__.zip&lt;/code> ，里面解压出来就是上面所讨论的AM 目录结构里面的 &lt;code>./__spark_conf__/&lt;/code> 目录&lt;/li>
&lt;/ol>
&lt;h4 id="populateclasspath">populateClasspath()&lt;/h4>
&lt;p>对比两个版本的 &lt;code>populateClasspath()&lt;/code> 方法，注意差异在最后：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/populateClasspath.png"
width="3624"
height="2248"
srcset="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/populateClasspath_hu8dc1913df6b01084e2ef7ab5c80946cd_360458_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1%E4%B9%8BSpark2.4%E5%9D%91/populateClasspath_hu8dc1913df6b01084e2ef7ab5c80946cd_360458_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>参考注释：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// Add the localized Hadoop config at the end of the classpath, in case it contains other
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// files (such as configuration files for different services) that are not part of the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// YARN cluster&amp;#39;s config.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是为了防止将其他非Yarn集群配置的文件也引入了。&lt;/p>
&lt;h4 id="createconfarchive">createConfArchive()&lt;/h4>
&lt;p>这个代码略多，挑一些重点的讲讲，以Spark2.4为基准。&lt;/p>
&lt;p>&lt;a class="link" href="https://issues.apache.org/jira/browse/SPARK-23630" target="_blank" rel="noopener"
>SPARK-23630&lt;/a> 增加了一个用于测试的环境变量 &lt;code>SPARK_TEST_HADOOP_CONF_DIR&lt;/code> ，该环境变量指定的目录里面的配置文件也会被打进去 &lt;code>__spark_conf__.zip&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// SPARK-23630: during testing, Spark scripts filter out hadoop conf dirs so that user&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// environments do not interfere with tests. This allows a special env variable during
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// tests so that custom conf dirs can be used by unit tests.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> confDirs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;HADOOP_CONF_DIR&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;YARN_CONF_DIR&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Utils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>isTesting&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;SPARK_TEST_HADOOP_CONF_DIR&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#fec418">Nil&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hadoop配置文件独立出来，放在 &lt;code>__hadoop_conf__&lt;/code> 目录。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// Save the Hadoop config files under a separate directory in the archive. This directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// is appended to the classpath so that the cluster-provided configuration takes precedence.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>confStream&lt;span style="color:#5bc4bf">.&lt;/span>putNextEntry&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZipEntry&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;&lt;/span>&lt;span style="color:#f99b15">$LOCALIZED_HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>confStream&lt;span style="color:#5bc4bf">.&lt;/span>closeEntry&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hadoopConfFiles&lt;span style="color:#5bc4bf">.&lt;/span>foreach &lt;span style="color:#5bc4bf">{&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> file&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">.&lt;/span>canRead&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> confStream&lt;span style="color:#5bc4bf">.&lt;/span>putNextEntry&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZipEntry&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;&lt;/span>&lt;span style="color:#f99b15">$LOCALIZED_HADOOP_CONF_DIR&lt;/span>&lt;span style="color:#48b685">/&lt;/span>&lt;span style="color:#f99b15">$name&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Files&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>copy&lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">,&lt;/span> confStream&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> confStream&lt;span style="color:#5bc4bf">.&lt;/span>closeEntry&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>增加了一个 &lt;code>__spark_hadoop_conf__.xml&lt;/code> 存放所有hadoop配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//Client 里面的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> hadoopConf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">YarnConfiguration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">SparkHadoopUtil&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>newConfiguration&lt;span style="color:#5bc4bf">(&lt;/span>sparkConf&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//createConfArchive() 里面的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// Save the YARN configuration into a separate file that will be overlayed on top of the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// cluster&amp;#39;s Hadoop conf.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>confStream&lt;span style="color:#5bc4bf">.&lt;/span>putNextEntry&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZipEntry&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">SparkHadoopUtil&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">SPARK_HADOOP_CONF_FILE&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hadoopConf&lt;span style="color:#5bc4bf">.&lt;/span>writeXml&lt;span style="color:#5bc4bf">(&lt;/span>confStream&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>confStream&lt;span style="color:#5bc4bf">.&lt;/span>closeEntry&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>跨Yarn集群提交spark任务</title><link>https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1/</link><pubDate>Sat, 04 Dec 2021 18:17:55 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E8%B7%A8Yarn%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BA%A4spark%E4%BB%BB%E5%8A%A1/93990522.jpg" alt="Featured image of post 跨Yarn集群提交spark任务" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>之前写过一篇 &lt;a class="link" href="https://leibnizhu.github.io/2020/05/06/%e5%8a%a8%e6%80%81%e5%8a%a0%e8%bd%bdhive%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e7%9a%84%e6%96%b9%e6%a1%88/" >Spark动态加载hive配置的方案&lt;/a> ，当时是为了spark应用的fat-jar里面已经有Hadoop相关xml配置文件的情况下，将数据输出到不是该配置的Hadoop集群的方案。&lt;br>
现在这个需求有点类似，没有走spark-submit提交任务，而是在spark应用里面通过创建&lt;code>SparkContext&lt;/code>的形式提交任务，而spark应用的fat-jar里面已经有Hadoop相关xml配置文件，在此情况下，想将Spakr任务提交到外部的Yarn集群（不是fat-jar里面配置文件对应的yarn集群）。&lt;/p>
&lt;h2 id="思考一个问题">思考一个问题&lt;/h2>
&lt;p>先思考一个问题，如果Spark应用的fat-jar里面有外部Yarn集群对应的配置文件(&lt;code>core-site.xml&lt;/code>，&lt;code>hdfs-site.xml&lt;/code>，&lt;code>yarn-site.xml&lt;/code>等)，此时Spark应用代码里面创建&lt;code>SparkContext&lt;/code>，是不是就一定能提交到那个集群里？&lt;br>
可以做个实验，但实验不一定会cover到所有情况。&lt;br>
直接给结论吧，不一定能提交过去，但自己做实验的话很可能还是能直接提交过去的，还是直接看代码吧（以&lt;code>yarn-client&lt;/code>模式为例）。&lt;/p>
&lt;h3 id="spark-yarn-client-默认提交任务简析">Spark Yarn-client 默认提交任务简析&lt;/h3>
&lt;p>通过代码创建&lt;code>SparkContext&lt;/code>后，其动态代码块会根据启动模式创建&lt;code>SchedulerBackend&lt;/code>和&lt;code>TaskScheduler&lt;/code>并启动：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// org.apache.spark.SparkContext #501
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// Create and start the scheduler
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>sched&lt;span style="color:#5bc4bf">,&lt;/span> ts&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">SparkContext&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createTaskScheduler&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> master&lt;span style="color:#5bc4bf">,&lt;/span> deployMode&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">_schedulerBackend&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> sched
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">_taskScheduler&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> ts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">_dagScheduler&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">DAGScheduler&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// start TaskScheduler after taskScheduler sets DAGScheduler reference in DAGScheduler&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// constructor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">_taskScheduler&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>start&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 &lt;code>TaskScheduler&lt;/code> 是通过 &lt;code>org.apache.spark.scheduler.cluster.YarnClusterManager#createTaskScheduler&lt;/code> 创建的，对应 yarn-client 创建的是&lt;code>YarnScheduler&lt;/code>（继承了&lt;code>TaskSchedulerImpl&lt;/code>），start()方法调用到&lt;code>SchedulerBackend&lt;/code>的&lt;code>start&lt;/code>方法，后者就会创建yarn模式下的Client客户端（&lt;code>org.apache.spark.deploy.yarn.Client&lt;/code>，不是yarn自己那个client），并调用其&lt;code>submitApplication&lt;/code>方法提交任务到Yarn：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend#start
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> start&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> driverHost &lt;span style="color:#815ba4">=&lt;/span> conf&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;spark.driver.host&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> driverPort &lt;span style="color:#815ba4">=&lt;/span> conf&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;spark.driver.port&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> hostport &lt;span style="color:#815ba4">=&lt;/span> driverHost &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> driverPort
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sc&lt;span style="color:#5bc4bf">.&lt;/span>ui&lt;span style="color:#5bc4bf">.&lt;/span>foreach &lt;span style="color:#5bc4bf">{&lt;/span> ui &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> conf&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;spark.driver.appUIAddress&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> ui&lt;span style="color:#5bc4bf">.&lt;/span>webUrl&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> argsArrayBuf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ArrayBuffer&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> argsArrayBuf &lt;span style="color:#5bc4bf">+=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;--arg&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> hostport&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logDebug&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;ClientArguments called with: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> argsArrayBuf&lt;span style="color:#5bc4bf">.&lt;/span>mkString&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> args &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ClientArguments&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>argsArrayBuf&lt;span style="color:#5bc4bf">.&lt;/span>toArray&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> totalExpectedExecutors &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">YarnSparkHadoopUtil&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getInitialTargetExecutorNumber&lt;span style="color:#5bc4bf">(&lt;/span>conf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Client&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#5bc4bf">,&lt;/span> conf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bindToYarn&lt;span style="color:#5bc4bf">(&lt;/span>client&lt;span style="color:#5bc4bf">.&lt;/span>submitApplication&lt;span style="color:#5bc4bf">(),&lt;/span> &lt;span style="color:#fec418">None&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//………………
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化&lt;code>Client&lt;/code>的时候，会创建YarnConfiguration，此时就会读取到Configuration里面配置的默认资源，包括&lt;code>yarn-site.xml&lt;/code>等；如果fatjar里面放的是外部集群的配置文件，那么对应的&lt;code>YarnClient&lt;/code>就可以连接到外部Yarn集群。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//org.apache.spark.deploy.yarn.Client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">spark&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Client&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ClientArguments&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> hadoopConf&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Configuration&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> sparkConf&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">SparkConf&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Logging&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//………………
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> yarnClient &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">YarnClient&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createYarnClient
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> yarnConf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">YarnConfiguration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hadoopConf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着刚才说到&lt;code>SchedulerBackend&lt;/code>调用&lt;code>Client&lt;/code>的&lt;code>submitApplication&lt;/code>方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//org.apache.spark.deploy.yarn.Client#submitApplication
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> submitApplication&lt;span style="color:#5bc4bf">()&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ApplicationId&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> appId&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ApplicationId&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> launcherBackend&lt;span style="color:#5bc4bf">.&lt;/span>connect&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Setup the credentials before doing anything else,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// so we have don&amp;#39;t have issues at any point.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> setupCredentials&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yarnClient&lt;span style="color:#5bc4bf">.&lt;/span>init&lt;span style="color:#5bc4bf">(&lt;/span>yarnConf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> yarnClient&lt;span style="color:#5bc4bf">.&lt;/span>start&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logInfo&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Requesting a new application from cluster with %d NodeManagers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>format&lt;span style="color:#5bc4bf">(&lt;/span>yarnClient&lt;span style="color:#5bc4bf">.&lt;/span>getYarnClusterMetrics&lt;span style="color:#5bc4bf">.&lt;/span>getNumNodeManagers&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Get a new application from our RM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//新建一个Application
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> newApp &lt;span style="color:#815ba4">=&lt;/span> yarnClient&lt;span style="color:#5bc4bf">.&lt;/span>createApplication&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> newAppResponse &lt;span style="color:#815ba4">=&lt;/span> newApp&lt;span style="color:#5bc4bf">.&lt;/span>getNewApplicationResponse&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> appId &lt;span style="color:#815ba4">=&lt;/span> newAppResponse&lt;span style="color:#5bc4bf">.&lt;/span>getApplicationId&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">CallerContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;CLIENT&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sparkConf&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">APP_CALLER_CONTEXT&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>appId&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">)).&lt;/span>setCurrentContext&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Verify whether the cluster has enough resources for our AM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> verifyClusterResources&lt;span style="color:#5bc4bf">(&lt;/span>newAppResponse&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Set up the appropriate contexts to launch our AM
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//创建environment, java options以及启动AM的命令
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> containerContext &lt;span style="color:#815ba4">=&lt;/span> createContainerLaunchContext&lt;span style="color:#5bc4bf">(&lt;/span>newAppResponse&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//创建提交AM的Context，包括名字、队列、类型、内存、CPU及参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> appContext &lt;span style="color:#815ba4">=&lt;/span> createApplicationSubmissionContext&lt;span style="color:#5bc4bf">(&lt;/span>newApp&lt;span style="color:#5bc4bf">,&lt;/span> containerContext&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Finally, submit and monitor the application
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> logInfo&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Submitting application &lt;/span>&lt;span style="color:#f99b15">$appId&lt;/span>&lt;span style="color:#48b685"> to ResourceManager&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//向Yarn提交Application
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> yarnClient&lt;span style="color:#5bc4bf">.&lt;/span>submitApplication&lt;span style="color:#5bc4bf">(&lt;/span>appContext&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> launcherBackend&lt;span style="color:#5bc4bf">.&lt;/span>setAppId&lt;span style="color:#5bc4bf">(&lt;/span>appId&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reportLauncherState&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">SparkAppHandle&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">State&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">SUBMITTED&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> appId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> e&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Throwable&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>appId &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cleanupStagingDir&lt;span style="color:#5bc4bf">(&lt;/span>appId&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 createContainerLaunchContext 会创建environment, java options以及启动AM的命令等，也会收集本地资源（&lt;code>prepareLocalResources&lt;/code>方法），其中包括&lt;code>__spark_conf__.zip&lt;/code>，在&lt;code>createConfArchive&lt;/code>方法中处理，压缩了本地的一些配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> createConfArchive&lt;span style="color:#5bc4bf">()&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">File&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> hadoopConfFiles &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">HashMap&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">File&lt;/span>&lt;span style="color:#5bc4bf">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Uploading $SPARK_CONF_DIR/log4j.properties file to the distributed cache to make sure that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// the executors will use the latest configurations instead of the default values. This is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// required when user changes log4j.properties directly to set the log configurations. If
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// configuration file is provided through --files then executors will be taking configurations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// from --files instead of $SPARK_CONF_DIR/log4j.properties.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Also uploading metrics.properties to distributed cache if exists in classpath.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// If user specify this file using --files then executors will use the one
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// from --files instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span> prop &lt;span style="color:#815ba4">&amp;lt;-&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;log4j.properties&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;metrics.properties&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#815ba4">&amp;lt;-&lt;/span> &lt;span style="color:#fec418">Option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Utils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getContextOrSparkClassLoader&lt;span style="color:#5bc4bf">.&lt;/span>getResource&lt;span style="color:#5bc4bf">(&lt;/span>prop&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> url&lt;span style="color:#5bc4bf">.&lt;/span>getProtocol &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#34;file&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopConfFiles&lt;span style="color:#5bc4bf">(&lt;/span>prop&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">File&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>url&lt;span style="color:#5bc4bf">.&lt;/span>getPath&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;HADOOP_CONF_DIR&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;YARN_CONF_DIR&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>foreach &lt;span style="color:#5bc4bf">{&lt;/span> envKey &lt;span style="color:#815ba4">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#5bc4bf">.&lt;/span>env&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>envKey&lt;span style="color:#5bc4bf">).&lt;/span>foreach &lt;span style="color:#5bc4bf">{&lt;/span> path &lt;span style="color:#815ba4">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> dir &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">File&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>dir&lt;span style="color:#5bc4bf">.&lt;/span>isDirectory&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> files &lt;span style="color:#815ba4">=&lt;/span> dir&lt;span style="color:#5bc4bf">.&lt;/span>listFiles&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>files &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logWarning&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Failed to list files under directory &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> dir&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files&lt;span style="color:#5bc4bf">.&lt;/span>foreach &lt;span style="color:#5bc4bf">{&lt;/span> file &lt;span style="color:#815ba4">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">.&lt;/span>isFile &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>hadoopConfFiles&lt;span style="color:#5bc4bf">.&lt;/span>contains&lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">.&lt;/span>getName&lt;span style="color:#5bc4bf">()))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopConfFiles&lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">.&lt;/span>getName&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> confArchive &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">File&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createTempFile&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">LOCALIZED_CONF_DIR&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;.zip&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">File&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Utils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getLocalDir&lt;span style="color:#5bc4bf">(&lt;/span>sparkConf&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> confStream &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZipOutputStream&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">FileOutputStream&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>confArchive&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//后面就是把这些文件写入到zip包的代码，略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，除了本地的&lt;code>log4j.properties&lt;/code>和&lt;code>metrics.properties&lt;/code>配置文件以外，还会读取&lt;code>HADOOP_CONF_DIR&lt;/code>和&lt;code>YARN_CONF_DIR&lt;/code>环境变量，读取对应目录下的文件放入&lt;code>hadoopConfFiles&lt;/code>这个&lt;code>HashMap&lt;/code>中，而这里面的文件都会压缩到&lt;code>__spark_conf__.zip&lt;/code>中。&lt;br>
再后续的代码就不分析了，可以参考网上其他文章。&lt;/p>
&lt;h3 id="提交外部yarn集群的障碍">提交外部Yarn集群的障碍&lt;/h3>
&lt;p>所以，如果执行spark应用程序的机器中配置了 &lt;em>HADOOP_CONF_DIR&lt;/em> 或 &lt;em>YARN_CONF_DIR&lt;/em> 环境变量（如HDP的节点安装了对应客户端都会配置上），在Spark提交任务到外部yarn集群的时候，就会将里面的配置文件压缩传输到外部集群的Executor节点，这样Executor的各种操作都会使用原集群的配置，连接不到正确的Yarn服务，最后也就导致任务执行失败。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>所以解决整个提交外部集群的问题，有两个问题要处理：&lt;/p>
&lt;ol>
&lt;li>Spark应用代码使用外部集群的配置文件进行任务提交
&lt;ol>
&lt;li>一种方案是启动Spark应用后，创建&lt;code>SparkContext&lt;/code>之前，将外部集群的配置写入当前classpath的前面（如classpath是&lt;code>.:xxx.jar&lt;/code>，那么放在当前目录就可以）&lt;/li>
&lt;li>另一种方案是启动Spark应用前，将外部集群的配置写入当前目录，并通过&lt;code>jar uvf&lt;/code>打入jar包中；当然只是针对当前问题的话，无需打入jar包&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Spark准备executor的资源时，使用外部集群配置文件
&lt;ol>
&lt;li>一种方案是，创建&lt;code>SparkContext&lt;/code>之前，将&lt;code>HADOOP_CONF_DIR&lt;/code>和&lt;code>YARN_CONF_DIR&lt;/code>环境变量删除，提交任务后再恢复环境变量；这样不会把集群配置传给Executor，Executor使用的是fatjar包里面的配置文件，需要提前替换。&lt;/li>
&lt;li>另一种方案是，将外部集群的配置写入一个目录，并在创建&lt;code>SparkContext&lt;/code>之前，将&lt;code>HADOOP_CONF_DIR&lt;/code>和&lt;code>YARN_CONF_DIR&lt;/code>环境变量改为那个目录；这样正确的配置会传给Executor使用。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>结合起来最终的方案：&lt;/p>
&lt;ol>
&lt;li>外部集群的配置文件统一一个地方存储，可以直接存储在RDB。&lt;/li>
&lt;li>启动Spark应用的时候，检查需要提交到的Yarn集群，如果是外部集群，那么：
&lt;ol>
&lt;li>下载外部集群的配置文件到当前目录，同时复制到一个子目录里面&lt;/li>
&lt;li>将&lt;code>HADOOP_CONF_DIR&lt;/code>和&lt;code>YARN_CONF_DIR&lt;/code>环境变量改为那个子目录（不能用当前目录，因为当前目录包含fat-jar，根据代码jar包也会打包过去Executor）&lt;/li>
&lt;li>正常创建&lt;code>SparkContext&lt;/code>&lt;/li>
&lt;li>恢复环境变量&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>具体实现不外乎一些黑魔法（环境变量在JVM里面修改不了，但可以修改JVM用到的那个环境变量Map），再考虑下要不要放上来吧，反正这个最主要是思路和里面的坑。&lt;/p></description></item><item><title>修复Elasticsearch-hadoop查询条件带emoji时的JsonGenerationException</title><link>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/</link><pubDate>Sun, 20 Jun 2021 13:17:54 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/bg1.png" alt="Featured image of post 修复Elasticsearch-hadoop查询条件带emoji时的JsonGenerationException" />&lt;h2 id="故障背景">故障背景&lt;/h2>
&lt;p>通过 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html" target="_blank" rel="noopener"
>ES-Hadoop&lt;/a> （亦可参考 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop" target="_blank" rel="noopener"
>Github&lt;/a> ） 查询ES时，若查询条件包含emoji，会在json序列化的时候抛出异常（在最新的 &lt;code>7.13.2&lt;/code> 版本仍存在）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Caused by: org.codehaus.jackson.JsonGenerationException: Incomplete surrogate pair: first char 0xde97, second 0x22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.JsonGeneratorBase._reportError&lt;span style="color:#5bc4bf">(&lt;/span>JsonGeneratorBase.java:480&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._decodeSurrogate&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1708&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._outputSurrogates&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1663&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._outputRawMultiByteChar&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1649&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:757&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:697&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>JacksonJsonGenerator.java:252&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... &lt;span style="color:#f99b15">21&lt;/span> more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="故障根源分析">故障根源分析&lt;/h2>
&lt;p>根据报错的调用栈，直接原因出在 &lt;code>org.codehaus.jackson.impl.Utf8Generator#_decodeSurrogate&lt;/code> 方法中，其源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">_decodeSurrogate&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> surr1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> surr2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>surr2 &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> 56320 &lt;span style="color:#5bc4bf">||&lt;/span> surr2 &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 57343&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Incomplete surrogate pair: first char 0x&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toHexString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>surr1&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;, second 0x&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toHexString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>surr2&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">_reportError&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>msg&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> c &lt;span style="color:#5bc4bf">=&lt;/span> 65536 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>surr1 &lt;span style="color:#5bc4bf">-&lt;/span> &lt;span style="color:#48b685">&amp;#39;\ud800&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>surr2 &lt;span style="color:#5bc4bf">-&lt;/span> &lt;span style="color:#48b685">&amp;#39;\udc00&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> c&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是判断第二个字符在指定范围（&lt;code>[56320, 57343]&lt;/code> 区间）外就报这个错误。&lt;/p>
&lt;p>同时注意，这里用的是 &lt;code>org.codehaus&lt;/code> 的 &lt;code>jackson-core-asl&lt;/code> 依赖包，&lt;a class="link" href="https://github.com/FasterXML/jackson-docs/wiki/Presentation-Jackson-2.0" target="_blank" rel="noopener"
>众所周知&lt;/a> ，&lt;code>Jackson&lt;/code> 自2.x版本开始就迁移到 &lt;code>com.fasterxml&lt;/code> 下了，这个 &lt;code>org.codehaus&lt;/code> 的 &lt;code>jackson-core-asl&lt;/code> 是1.x版本的（Es-Spark通过打包时改第三方包名的方法将Jackson 打进其jar包中，具体参见 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop/blob/master/thirdparty/build.gradle" target="_blank" rel="noopener"
>build.gradle文件的relocate操作&lt;/a> ，实际版本为 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop/blob/master/gradle.properties" target="_blank" rel="noopener"
>1.8.8&lt;/a> ）。&lt;/p>
&lt;p>针对这个报错，可以查到是一个已经 &lt;a class="link" href="https://github.com/FasterXML/jackson-core/issues/115" target="_blank" rel="noopener"
>在2.3.0修复的bug&lt;/a> ，是旧版本不完全支持UTF-8的 &lt;code>surrogate pair&lt;/code> （这里又是一个兼容性的大坑，可以参见 &lt;a class="link" href="https://en.wikipedia.org/wiki/UTF-16#Code_points_from_U&amp;#43;010000_to_U&amp;#43;10FFFF" target="_blank" rel="noopener"
>维基百科&lt;/a> 的介绍）导致的。&lt;/p>
&lt;p>综上所述，Es-Spark 在执行查询的时候，&lt;code>org.elasticsearch.hadoop.rest.RestClient#searchRequest&lt;/code> 方法构建了 &lt;code>org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator&lt;/code> 实例，并将 &lt;code>QueryBuilder&lt;/code> 写入到 &lt;code>JacksonJsonGenerator&lt;/code> 中序列化成查询json，在这一步中由于使用了 Jackson 1.x 版本对UTF8的emoji支持不好，导致抛出 &lt;code>JsonGenerationException&lt;/code> 异常、中断查询。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//RestClient 某查询方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>xxx &lt;span style="color:#06b6ef">queryXxx&lt;/span>&lt;span style="color:#5bc4bf">(......)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Response response &lt;span style="color:#5bc4bf">=&lt;/span> execute&lt;span style="color:#5bc4bf">(&lt;/span>POST&lt;span style="color:#5bc4bf">,&lt;/span> uri&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> searchRequest&lt;span style="color:#5bc4bf">(&lt;/span>query&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">static&lt;/span> BytesArray &lt;span style="color:#06b6ef">searchRequest&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>QueryBuilder query&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FastByteArrayOutputStream out &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> FastByteArrayOutputStream&lt;span style="color:#5bc4bf">(&lt;/span>256&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JacksonJsonGenerator generator &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JacksonJsonGenerator&lt;span style="color:#5bc4bf">(&lt;/span>out&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//注意此处
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeBeginObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeFieldName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;query&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeBeginObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toJson&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>generator&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">finally&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> out&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">bytes&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>故障分析到这里，似乎只要升级 &lt;code>jackson-core&lt;/code> 版本就可以了……&lt;br>
然而上面提到，在 &lt;code>jackson-core 2.3.0&lt;/code> 才修复了这个问题，而 Es-Spark 使用的是内置的1.x 版本，前面也有提到 &lt;code>jackson-core&lt;/code> 自2.x开始迁移到 &lt;code>com.fasterxml&lt;/code> 。具体到代码，Es-spark 的 &lt;code>JacksonJsonGenerator&lt;/code> 是这样使用 &lt;code>jackson&lt;/code> 的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.json&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonEncoding&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonFactory&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.Generator&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGenerator&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Generator &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">configure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//RestClient 就是调用这个构造方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>OutputStream out&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">createJsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>out&lt;span style="color:#5bc4bf">,&lt;/span> JsonEncoding&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF8&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException ex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException&lt;span style="color:#5bc4bf">(&lt;/span>ex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，直接升级依赖版本是不行的，maven的GAV都变了，类名也变了，必须改代码。&lt;/p>
&lt;h3 id="同名类的patch">同名类的Patch&lt;/h3>
&lt;p>可以看到，虽说 &lt;code>Jackson&lt;/code> 迁移了包名，但如果是通过创建同名类的方式Patch，其实也很简单，只要把 &lt;code>JSON_FACTORY&lt;/code> 和 &lt;code>generator&lt;/code> 这个两个属性替换为 &lt;code>Jackson 2.3+&lt;/code> 版本的类、并微调静态代码块和构造方法里面的代码即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.json&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonEncoding&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonFactory&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.Generator&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGenerator&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Generator &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">configure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>OutputStream out&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">createJsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>out&lt;span style="color:#5bc4bf">,&lt;/span> JsonEncoding&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF8&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException ex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException&lt;span style="color:#5bc4bf">(&lt;/span>ex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="javassist-patch">Javassist Patch&lt;/h3>
&lt;p>与上一篇博客一样，为了可维护性，最后还是选择使用 &lt;code>Javassist&lt;/code> 进行Patch。但受限于 &lt;code>Javassist&lt;/code> 的机制，这个Patch起来有点麻烦。&lt;br>
首先，阅读 &lt;code>JacksonJsonGenerator&lt;/code> 源码，它其实相当于是在 Es-spark 的 &lt;code>Generator&lt;/code> 接口与 &lt;code>jackson 1.8.8&lt;/code> 的 &lt;code>JsonGenerator&lt;/code> 之间做了Adaptor；因此可以考虑写一个 &lt;code>Generator&lt;/code> 接口与 &lt;code>jackson 2.3+&lt;/code> 之间的Adaptor给原调用者使用。&lt;br>
但阅读 Es-spark 的其他代码可以发现，虽然它定义了 &lt;code>Generator&lt;/code> 接口，但调用时都是直接面向 &lt;code>JacksonJsonGenerator&lt;/code> 实现类，如上面给出过的 &lt;code>RestClient#searchRequest&lt;/code> 的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//RestClient 某查询方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">static&lt;/span> BytesArray &lt;span style="color:#06b6ef">searchRequest&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>QueryBuilder query&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> JacksonJsonGenerator generator &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JacksonJsonGenerator&lt;span style="color:#5bc4bf">(&lt;/span>out&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//注意此处
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//......
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此首先排除了通过修改 &lt;code>JacksonJsonGenerator&lt;/code> 调用者来Patch的方向，还是需要从 &lt;code>JacksonJsonGenerator&lt;/code> 内部入手。&lt;/p>
&lt;p>如果用&lt;code>javassist&lt;/code>修改&lt;code>JacksonJsonGenerator&lt;/code>，参考上一小节的内容，其实只要改俩成员变量的类型，再改改静态代码块即可。但真的如此吗？并不。写同名类能这样做到是因为会整个类重新编译，&lt;code>JacksonJsonGenerator&lt;/code>中大量delegate的方法在编译时是用 &lt;code>Jackson 2.3+&lt;/code> 的类进行连接的；然而&lt;code>javassist&lt;/code>修改成员变量的时候真的只是修改了成员变量本身，如果只改了这里，对应的delegate方法在运行时会找不到成员变量。&lt;/p>
&lt;p>如果是在静态代码块和构造方法新增 &lt;code>Jackson 2.3+&lt;/code> 对应的类，并给 &lt;code>writeRaw&lt;/code> 方法增加try-catch，在catch中使用 &lt;code>Jackson 2.3+&lt;/code> 对应的类进行json序列化呢？也不行。因为序列化是输出到&lt;code>OutputStream&lt;/code>（构造方法传入的那个），是有状态的，同时给&lt;code>jackson 1.8.8&lt;/code>和&lt;code>jackson 2.3+&lt;/code>持有并写入，恐怕会大乱（实测的确如此，不确定是不是没处理好&lt;code>flush&lt;/code>，但至少这个方案太危险）。&lt;/p>
&lt;p>还有一个方案是替换 &lt;code>JacksonJsonGenerator&lt;/code> 的 &lt;code>generator&lt;/code> 成员变量，可以做一个 &lt;code>org.codehaus.jackson.JsonGenerator&lt;/code> 与 &lt;code>Jackson 2.3+&lt;/code> 的 &lt;code>com.fasterxml.jackson.core.JsonGenerator&lt;/code> 之间的Adaptor来替换之。&lt;/p>
&lt;p>首先是Adaptor：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">xxx.yyy.zzz&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonEncoding&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonFactory&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonGenerator&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.apache.commons.logging.LogFactory&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.*&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.EsHadoopSerializationException&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.util.StringUtils&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.IOException&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.OutputStream&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.math.BigDecimal&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.math.BigInteger&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.Deque&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.LinkedList&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGeneratorAdaptor&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codehaus&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jackson&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> HAS_UTF_8&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Deque&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> currentPath &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String currentPathCached&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String currentName&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> ObjectCodec _objectCodec&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> hasMethod &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMethod&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;writeUTF8String&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[].&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasMethod &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>NoSuchMethodException ignored&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HAS_UTF_8 &lt;span style="color:#5bc4bf">=&lt;/span> hasMethod&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>HAS_UTF_8&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LogFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLog&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JacksonJsonGeneratorAdaptor&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">warn&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Old Jackson version (pre-1.7) detected; consider upgrading to improve performance&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">configure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGeneratorAdaptor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>OutputStream out&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">createGenerator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>out&lt;span style="color:#5bc4bf">,&lt;/span> JsonEncoding&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF8&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException ex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException&lt;span style="color:#5bc4bf">(&lt;/span>ex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略大量delegate方法，只列出不是简单delegate的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeStartObject&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeStartObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>currentName &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>currentName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPathCached &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> currentPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pollLast&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPathCached &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeFieldName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeFieldName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> name&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeUTF8String&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> text&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> len&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HAS_UTF_8&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeUTF8String&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>text&lt;span style="color:#5bc4bf">,&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> len&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> String&lt;span style="color:#5bc4bf">(&lt;/span>text&lt;span style="color:#5bc4bf">,&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> len&lt;span style="color:#5bc4bf">,&lt;/span> StringUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF_8&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeBinary&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Base64Variant var1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> data&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> len&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeBinary&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">,&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> len&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeBinary&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> data&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> writeBinary&lt;span style="color:#5bc4bf">(&lt;/span>Base64Variants&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDefaultVariant&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> data&lt;span style="color:#5bc4bf">,&lt;/span> 0&lt;span style="color:#5bc4bf">,&lt;/span> data&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">copyCurrentEvent&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonParser jp&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonToken t &lt;span style="color:#5bc4bf">=&lt;/span> jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getCurrentToken&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>t &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonGenerationException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;No current event to copy&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>t&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_OBJECT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeStartObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> END_OBJECT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_ARRAY&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeStartArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> END_ARRAY&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FIELD_NAME&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeFieldName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getCurrentName&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_STRING&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasTextCharacters&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getTextCharacters&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getTextOffset&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getTextLength&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getText&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NUMBER_INT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getNumberType&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> INT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getIntValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> BIG_INTEGER&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBigIntegerValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLongValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NUMBER_FLOAT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getNumberType&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> BIG_DECIMAL&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDecimalValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLOAT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getFloatValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNumber&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDoubleValue&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_TRUE&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeBoolean&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_FALSE&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeBoolean&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NULL&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeNull&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_EMBEDDED_OBJECT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeObject&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getEmbeddedObject&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RuntimeException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Internal error: should never end up through this code path&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonParser jp&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonToken t &lt;span style="color:#5bc4bf">=&lt;/span> jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getCurrentToken&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>t &lt;span style="color:#5bc4bf">==&lt;/span> JsonToken&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FIELD_NAME&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeFieldName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getCurrentName&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#5bc4bf">=&lt;/span> jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextToken&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>t&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_OBJECT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeStartObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextToken&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> JsonToken&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">END_OBJECT&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndObject&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_ARRAY&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeStartArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextToken&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> JsonToken&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">END_ARRAY&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeEndArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copyCurrentEvent&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jp&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException ex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException&lt;span style="color:#5bc4bf">(&lt;/span>ex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getOutputTarget&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//return generator.getOutputTarget();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> out&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codehaus&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jackson&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Feature feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codehaus&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jackson&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Feature feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Feature feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>feature&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII&lt;span style="color:#5bc4bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isEnabled&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>JsonGenerator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Feature&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codehaus&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jackson&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">setCodec&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ObjectCodec objectCodec&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">_objectCodec&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> objectCodec&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ObjectCodec &lt;span style="color:#06b6ef">getCodec&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">_objectCodec&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过&lt;code>javassist&lt;/code> 修改&lt;code>JacksonJsonGenerator&lt;/code> 的 &lt;code>generator&lt;/code> 成员变量实际取值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ClassPool pool &lt;span style="color:#5bc4bf">=&lt;/span> ClassPool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDefault&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtClass cc &lt;span style="color:#5bc4bf">=&lt;/span> pool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//这里必须用类全限定名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//这里自己造了一个无参构造器给原构造器调用，否则 JacksonJsonGenerator 的 currentPath 一直是null（字段有初始化值但还是null），原因未知，可能是setBody影响了原构造器的行为
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addConstructor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CtNewConstructor&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">make&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;JacksonJsonGenerator(){this.currentPath = new java.util.LinkedList();}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> cc&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//构造函数将 generator 替换成我们的 Adaptor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> CtConstructor jacksonJsonGeneratorConstructor &lt;span style="color:#5bc4bf">=&lt;/span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDeclaredConstructor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> CtClass&lt;span style="color:#5bc4bf">[]{&lt;/span>pool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>OutputStream&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">())});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jacksonJsonGeneratorConstructor&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setBody&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;{\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; this();\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#776e71">//调用无参构造器，这里用 $0() 是不行的，必须this();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#48b685">&amp;#34; try {\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; $0.out = $1;\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; $0.generator = new xxx.yyy.zzz.JacksonJsonGeneratorAdaptor($1);\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; } catch (java.io.IOException ex) {\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; throw new org.elasticsearch.hadoop.serialization.EsHadoopSerializationException(ex);\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; }\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; }&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toClass&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getConstructor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>OutputStream&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">newInstance&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;完成对 JacksonJsonGenerator 进行静态代码块和构造方法的pack&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;给 JacksonJsonGenerator 进行静态代码块和构造方法的pack失败:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完事儿。&lt;/p></description></item><item><title>修复Elasticsearch-hadoop读取特殊数字取值时的NumberFormatException</title><link>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/</link><pubDate>Sat, 19 Jun 2021 23:40:50 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/bg2.jpg" alt="Featured image of post 修复Elasticsearch-hadoop读取特殊数字取值时的NumberFormatException" />&lt;h2 id="故障背景">故障背景&lt;/h2>
&lt;p>众所周知，&lt;code>Elasticsearch&lt;/code>（下文简称&lt;code>&amp;quot;ES&amp;quot;&lt;/code>）的数值类型字段是支持一些特殊格式的。比如，&lt;code>integer&lt;/code> 类型的字段取值可以是浮点数的字符串，如 &lt;code>&amp;quot;2.0&amp;quot;&lt;/code>；&lt;code>long&lt;/code> 类型的字段取值可以是科学计数法的字符串，如 &lt;code>&amp;quot;2E3&amp;quot;&lt;/code>，诸如此类的一些。不同于时间类型的字段可以 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html" target="_blank" rel="noopener"
>通过 &lt;code>mapping&lt;/code> 的 &lt;code>format&lt;/code> 属性配置取值格式&lt;/a> ，数值字段的取值没有格式的配置、上面举例的取值都是可以直接索引文档的。&lt;/p>
&lt;p>然而，通过 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html" target="_blank" rel="noopener"
>ES-Hadoop&lt;/a> （亦可参考 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop" target="_blank" rel="noopener"
>Github&lt;/a> ） 查询ES时，这些特殊格式的取值往往会导致报错，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>java.lang.NumberFormatException: For input string: &lt;span style="color:#48b685">&amp;#39;2E3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.NumberFormatException.forInputString&lt;span style="color:#5bc4bf">(&lt;/span>NumberFormatException.java:65&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.Long.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>Long.java:441&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.Long.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>Long.java:483&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.builder.JdkValueReader.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>JdkValueReader.java:296&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.builder.JdkValueReader.longValue&lt;span style="color:#5bc4bf">(&lt;/span>JdkValueReader.java:288&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…………
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="故障根源分析">故障根源分析&lt;/h2>
&lt;p>阅读 &lt;code>JdkValueReader&lt;/code> 源码，以读取integer类型字段为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> Object &lt;span style="color:#06b6ef">intValue&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String value&lt;span style="color:#5bc4bf">,&lt;/span> Parser parser&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Integer val &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> isEmpty&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> nullValue&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Token tk &lt;span style="color:#5bc4bf">=&lt;/span> parser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentToken&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>tk &lt;span style="color:#5bc4bf">==&lt;/span> Token&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">VALUE_NUMBER&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#5bc4bf">=&lt;/span> parser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">intValue&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#5bc4bf">=&lt;/span> parseInteger&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> processInteger&lt;span style="color:#5bc4bf">(&lt;/span>val&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> Integer &lt;span style="color:#06b6ef">parseInteger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">parseInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到字段取值直接调用 &lt;code>Integer.parseInt&lt;/code> 方法解析，且没捕获异常。&lt;br>
不知道这样设计是处于什么考虑，但这个 &lt;code>NumberFormatException&lt;/code> 异常会打断读取的流程：出现一条有问题的数据时，会影响整个查询任务的执行，在 Es-spark 使用于离线批处理的场景，是不恰当的，所以有必要进行调整。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="自定义-valuereader">自定义 ValueReader&lt;/h3>
&lt;p>进一步阅读 ES-spark 源码可以发现，用户可以自己实现 &lt;code>org.elasticsearch.hadoop.serialization.builder.ValueReader&lt;/code> 接口，并通过 &lt;code>es.ser.reader.value.class&lt;/code> 配置项（常量&lt;code>org.elasticsearch.hadoop.cfg.ConfigurationOptions.ES_SERIALIZATION_READER_VALUE_CLASS&lt;/code>）配置自定义的 &lt;code>ValueReader&lt;/code> 实现，从而可以实现对这些特殊取值的读取解析。 当然，后来在 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/configuration.html" target="_blank" rel="noopener"
>官方文档&lt;/a> 中也印证了这一点。&lt;/p>
&lt;p>这样实际处理下来，基本是要拷贝 &lt;code>JdkValueReader&lt;/code> 源码进行修改作为自定义的 &lt;code>ValueReader&lt;/code> 实现；显然，这样就不能随 ES-spark 升级而自动升级对应实现，同时，在代码中，自定义的修改也和原 &lt;code>JdkValueReader&lt;/code> 的实现混杂在一起，给升级带来困难；因此考虑使用 &lt;code>Javassist&lt;/code> 进行patch。&lt;/p>
&lt;h3 id="javassist-patch">Javassist Patch&lt;/h3>
&lt;p>&lt;code>Javassist&lt;/code> 入门和介绍的文章在网上已经很多了，在此不再赘述。&lt;br>
列举一下patch过程中遇到的一些坑，或者说，&lt;code>Javassist&lt;/code> 的一些使用注意事项：&lt;/p>
&lt;ol>
&lt;li>不支持泛型，请自行强转；&lt;/li>
&lt;li>类要用全限定类名，没有import；&lt;/li>
&lt;li>$0=this, $1/$2/$3=方法的第1/2/3个参数；&lt;/li>
&lt;li>代码块前后要用{}包裹；&lt;/li>
&lt;li>不支持增强for、lambda等高级语法，需要手动转成基本语法。&lt;/li>
&lt;/ol>
&lt;p>最后给出针对Elasticsearch-hadoop读取特殊数字取值的 &lt;code>Javassist&lt;/code> patch代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ClassPool pool &lt;span style="color:#5bc4bf">=&lt;/span> ClassPool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDefault&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//这里必须用类全限定名，而不是JdkValueReader.class.getName(),否则会先加载类，后面的修改就没用了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> CtClass cc &lt;span style="color:#5bc4bf">=&lt;/span> pool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;org.elasticsearch.hadoop.serialization.builder.JdkValueReader&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//修复 parseInteger 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> CtMethod parseInteger &lt;span style="color:#5bc4bf">=&lt;/span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDeclaredMethod&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;parseInteger&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtClass exceptionClass &lt;span style="color:#5bc4bf">=&lt;/span> pool&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Exception&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String catchParseIntegerException &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;try{return new java.lang.Integer(java.lang.Double.valueOf($1).intValue());}catch(java.lang.Exception e){e.printStackTrace();return null;}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseInteger&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addCatch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> catchParseIntegerException &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> exceptionClass&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//修复 parseLong 方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> CtMethod parseLong &lt;span style="color:#5bc4bf">=&lt;/span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDeclaredMethod&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;parseLong&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String catchParseLongExpSrc &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;try{return new java.lang.Long(java.lang.Double.valueOf($1).longValue());}catch(java.lang.Exception e){e.printStackTrace();return null;}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseLong&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addCatch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> catchParseLongExpSrc &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> exceptionClass&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toClass&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">newInstance&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;完成对 JdkValueReader 进行 parseInteger() 和 parseLong() 的pack&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;给 JdkValueReader 进行 parseInteger() 和 parseLong() 的pack失败:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此基础上还可以做成按配置动态patch等骚操作。最后编译运行，Pass。&lt;/p></description></item><item><title>Spark动态加载hive配置的方案</title><link>https://leibnizhu.github.io/p/Spark%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDhive%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%A1%88/</link><pubDate>Wed, 06 May 2020 13:10:28 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spark%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDhive%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%A1%88/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Spark%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDhive%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E6%A1%88/bg3.jpg" alt="Featured image of post Spark动态加载hive配置的方案" />&lt;p>一般来说，Spark写Hive，把&lt;code>xxx-site.xml&lt;/code>系列配置文件打进jar包里，或&lt;code>spark-submit&lt;/code>指定下file之类，new个&lt;code>HiveContext&lt;/code>就完事了。&lt;br>
要写外部集群，也不外乎是换对应的&lt;code>xxx-site.xml&lt;/code>，改改&lt;code>thrift&lt;/code>服务地址啥的，不费劲。&lt;br>
好了，本文结束。&lt;br>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
&lt;br/>
不对，擅长断更的我不会为此特意写篇博客。&lt;br>
现在的场景是，每次Spark任务启动的时候才能拿到外部Hive集群的配置信息（别问我为什么，问就是中台的需求，很多集群，java应用启动后才能去读到任务配置，反射组装RDD并执行，Hive配置？lazy的，到写入的时候才会去拿）。&lt;br>
这个过程踩了不少坑，试了几种方案，直接说结论吧。&lt;/p>
&lt;ol>
&lt;li>&lt;code>SparkContext&lt;/code>创建的时候会创建一个&lt;code>Configuration&lt;/code>对象（注意 &lt;code>loadDefaults=true&lt;/code>)，写入Hive会用到它；而这个&lt;code>Configuration&lt;/code>对象里面已经放了常规的那些&lt;code>***-site.xml&lt;/code>系列配置文件作为 &lt;code>defaultResources&lt;/code>，这时写入Hive相当于按fat-jar里面的配置来了；&lt;/li>
&lt;li>围观&lt;code>Configuration&lt;/code>代码，reload配置之后会将&lt;code>defaultResources&lt;/code>逐个读出，而&lt;code>defaultResources&lt;/code>是个有序的List，那么显然可以用&lt;code>Configuration#addDefaultResource()&lt;/code>把外部集群的相关配置xml设置为默认资源，这样拿配置的时候就会拿到外部集群的配置啦！！！&lt;/li>
&lt;li>为了方便配置的读取，直接放在hdfs吧，这样直接&lt;code>Configuration.addDefaultResource(&amp;quot;hdfs:///path/to/hive-site.xml&amp;quot;)&lt;/code>不就可以了吗？诶怎么不行，再围观&lt;code>Configuration&lt;/code>代码，可以看到加载默认资源最终用的是&lt;code>Configuration#getResource()&lt;/code>方法，这个方法体就一句话：&lt;code>return classLoader.getResource(name);&lt;/code>，也就是说，它不会去解析hdfs协议，而是直接从classpath里面去读取。所以不能直接从hdfs读取；&lt;/li>
&lt;li>最后的方案是把配置文件放在hdfs，写入Hive前，把它下载到当前classpath的其中某个目录下（比如classpath包含&lt;code>.&lt;/code> 则下载到&lt;code>System.getProperty(&amp;quot;user.dir&amp;quot;)&lt;/code>下），然后&lt;code>Configuration.addDefaultResource(&amp;quot;hive-site.xml&amp;quot;)&lt;/code>，因为&lt;code>Configuration&lt;/code>是用&lt;code>ClassLoader&lt;/code>进行加载的，所以注意路径没有&lt;code>/&lt;/code>。&lt;/li>
&lt;li>这就完事了？并不，跑起来会发现还是查询jar包里的hive metastore地址，所以还要解析&lt;code>hive-site.xml&lt;/code>，读取出&lt;code>hive.metastore.uris&lt;/code>值并放入环境变量中。&lt;/li>
&lt;li>这就完事了？并不，考虑到后续还会有其他写入操作，以及&lt;code>SparkContext.stop()&lt;/code>操作，这些操作都会用到&lt;code>Configuration&lt;/code>读取配置，然而现在以及有了外部集群的默认资源了，需要删掉，然而&lt;code>Configuration&lt;/code>并没有提供删除默认资源的方法，所以这里要手动反射删除之。&lt;/li>
&lt;/ol>
&lt;p>最终代码（简化版）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Slf4j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WriteExtraHive&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String HIVE_METASTORE_URIS_KEY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;hive.metastore.uris&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String BASE_HDFS_PATH &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> useSparkSql&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//实际的实现是支持走jdbc和走SparkSql，根据是否有hive的配置文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> extraDefaultResource &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashSet&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String hosts&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//集群节点，这里只用于区分hdfs的配置路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">write&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//加载配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> write&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//真正写hive
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> end&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//移除额外添加的默认资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">init&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setURLStreamHandlerFactory&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> FsUrlStreamHandlerFactory&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String hiveSiteXmlPath &lt;span style="color:#5bc4bf">=&lt;/span> calHadoopXmlPath&lt;span style="color:#5bc4bf">(&lt;/span>hosts&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;hive-site&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> useSparkSql &lt;span style="color:#5bc4bf">=&lt;/span> hiveSiteXmlPath &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hive-site.xml文件({})存在:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> hiveSiteXmlPath&lt;span style="color:#5bc4bf">,&lt;/span> useSparkSql&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>useSparkSql&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String hiveMetaStoreUris &lt;span style="color:#5bc4bf">=&lt;/span> parseMetaStoreUri&lt;span style="color:#5bc4bf">(&lt;/span>hiveSiteXmlPath&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>StringUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isNotEmpty&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hiveMetaStoreUris&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;从hive-site.xml文件读取到{}={},并设置到环境变量&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> HIVE_METASTORE_URIS_KEY&lt;span style="color:#5bc4bf">,&lt;/span> hiveMetaStoreUris&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setProperty&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HIVE_METASTORE_URIS_KEY&lt;span style="color:#5bc4bf">,&lt;/span> hiveMetaStoreUris&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calHadoopXmlPath&lt;span style="color:#5bc4bf">(&lt;/span>hosts&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;hive-site&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calHadoopXmlPath&lt;span style="color:#5bc4bf">(&lt;/span>hosts&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;hdfs-site&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> useSparkSql &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">write&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HiveContext hiveContext &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HiveContext&lt;span style="color:#5bc4bf">(&lt;/span>sc&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//别问我从哪来的SparkContext,示例代码，随意看看
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> DataFrame docDataFrame &lt;span style="color:#5bc4bf">=&lt;/span> hiveContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">createDataFrame&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>rowRdd&lt;span style="color:#5bc4bf">,&lt;/span> sparkSchema&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//rdd和Schema也是，别问
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> docDataFrame&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">write&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">mode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SaveMode&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Overwrite&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">saveAsTable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;xxx.yyy&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">end&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Configuration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration tempalte &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Configuration&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CopyOnWriteArrayList&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> defaultResources &lt;span style="color:#5bc4bf">=&lt;/span> TestUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPrivateField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>conf&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;defaultResources&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//getPrivateField方法如其名，递归父类拿到字段并设可见再读
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>defaultResources &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String resource &lt;span style="color:#5bc4bf">:&lt;/span> extraDefaultResource&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultResources&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>resource&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WeakHashMap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Configuration&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> REGISTRY &lt;span style="color:#5bc4bf">=&lt;/span> TestUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPrivateField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>conf&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;REGISTRY&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>REGISTRY &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Configuration curConf &lt;span style="color:#5bc4bf">:&lt;/span> REGISTRY&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">keySet&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Boolean loadDefaults &lt;span style="color:#5bc4bf">=&lt;/span> TestUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPrivateField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>curConf&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;loadDefaults&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>loadDefaults &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> loadDefaults&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curConf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">reloadConfiguration&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">calHadoopXmlPath&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String hosts&lt;span style="color:#5bc4bf">,&lt;/span> String fileName&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> addToDefaultRs&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String hdfsPath &lt;span style="color:#5bc4bf">=&lt;/span> String&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">format&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hdfs://%shive/%s-%s.xml&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> BASE_HDFS_PATH&lt;span style="color:#5bc4bf">,&lt;/span> hosts&lt;span style="color:#5bc4bf">,&lt;/span> fileName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileSystem fs &lt;span style="color:#5bc4bf">=&lt;/span> FileSystem&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> Configuration&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HdfsUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isFileExist&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hdfsPath&lt;span style="color:#5bc4bf">,&lt;/span> fs&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>addToDefaultRs&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ClassLoader classLoader &lt;span style="color:#5bc4bf">=&lt;/span> Thread&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentThread&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getContextClassLoader&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL cpResource &lt;span style="color:#5bc4bf">=&lt;/span> classLoader&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String cpDir &lt;span style="color:#5bc4bf">=&lt;/span> cpResource &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">?&lt;/span> cpResource&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPath&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getProperty&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;user.dir&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> File&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">separator&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String downloadFileName &lt;span style="color:#5bc4bf">=&lt;/span> String&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">format&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;%s-%s_%s.xml&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> hosts&lt;span style="color:#5bc4bf">,&lt;/span> fileName&lt;span style="color:#5bc4bf">,&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span> &lt;span style="color:#776e71">//实际下载本地的名字
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String fullDownloadFilePath &lt;span style="color:#5bc4bf">=&lt;/span> cpDir &lt;span style="color:#5bc4bf">+&lt;/span> downloadFileName&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;增加Hadoop配置文件:{}到Configuration默认资源,下载到本地:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> hdfsPath&lt;span style="color:#5bc4bf">,&lt;/span> fullDownloadFilePath&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>OutputStream os &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> BufferedOutputStream&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> FileOutputStream&lt;span style="color:#5bc4bf">(&lt;/span>fullDownloadFilePath&lt;span style="color:#5bc4bf">)))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HdfsUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copyFileAsStream&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hdfsPath&lt;span style="color:#5bc4bf">,&lt;/span> os&lt;span style="color:#5bc4bf">,&lt;/span> fs&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addDefaultResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>downloadFileName&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//加入默认资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> extraDefaultResource&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>downloadFileName&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//记录加过哪些默认资源，后面要移除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;增加Hadoop配置文件:{}后读取classLoader.getResource({})={}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> fileName&lt;span style="color:#5bc4bf">,&lt;/span> downloadFileName&lt;span style="color:#5bc4bf">,&lt;/span> classLoader&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>downloadFileName&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> hdfsPath&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;不存在文件:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> fileName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;get FileSystem fail!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">parseMetaStoreUri&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String hiveSiteXmlPath&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Configuration conf &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Configuration&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>hiveSiteXmlPath&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> conf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HIVE_METASTORE_URIS_KEY&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>DBeaver接入Kylin数据源</title><link>https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/</link><pubDate>Mon, 27 Apr 2020 14:05:57 +0800</pubDate><guid>https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/</guid><description>&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/bg4.jpg" alt="Featured image of post DBeaver接入Kylin数据源" />&lt;p>DBeaver接入Kylin数据源现在网上好象没有靠谱的博客，写一篇吧。&lt;br>
打开DBeaver：
&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin1.png"
width="580"
height="248"
srcset="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin1_hu7fd02b2cea30738dd3dc7ec1842dea5f_151626_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin1_hu7fd02b2cea30738dd3dc7ec1842dea5f_151626_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="233"
data-flex-basis="561px"
>
新建：
&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin2.png"
width="1000"
height="1410"
srcset="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin2_hu5acabfd772d413b8f5f9989243c73062_180191_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin2_hu5acabfd772d413b8f5f9989243c73062_180191_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="170px"
>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">属性&lt;/th>
&lt;th style="text-align:left">填的值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">驱动名称&lt;/td>
&lt;td style="text-align:left">Apache Kylin 或随意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">驱动类型&lt;/td>
&lt;td style="text-align:left">默认&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">类名&lt;/td>
&lt;td style="text-align:left">org.apache.kylin.jdbc.Driver&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">URL模板&lt;/td>
&lt;td style="text-align:left">jdbc:kylin://{host}:{port}/{database}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">默认端口&lt;/td>
&lt;td style="text-align:left">7070&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">目录&lt;/td>
&lt;td style="text-align:left">Hadoop 或随意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">添加文件&lt;/td>
&lt;td style="text-align:left">可以在maven仓库找 ~/.m2/repository/org/apache/kylin/kylin-jdbc/&amp;lt;版本号&amp;gt;/kylin-jdbc-&amp;lt;版本号&amp;gt;.jar&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">驱动类&lt;/td>
&lt;td style="text-align:left">点击找到类，一般需要选择的就是列表中第一个，与类名一致&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>点高级参数（否则会使用catalog，然后导致查询失败）：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin3.png"
width="954"
height="776"
srcset="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin3_hu3a436a1a0b851b80840220a69b88635b_130035_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin3_hu3a436a1a0b851b80840220a69b88635b_130035_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="295px"
>
然后新建连接，搜索kylin，填入连接信息即可：&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin4.png"
width="572"
height="272"
srcset="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin4_hu7ba29632acf7486ee178aa5361bbdf7e_39120_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin4_hu7ba29632acf7486ee178aa5361bbdf7e_39120_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="504px"
>&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin5.png"
width="1374"
height="1314"
srcset="https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin5_hu422924992466c4eca264344a8be9ce59_162354_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/DBeaver%E6%8E%A5%E5%85%A5Kylin%E6%95%B0%E6%8D%AE%E6%BA%90/kylin5_hu422924992466c4eca264344a8be9ce59_162354_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>目前只能看到table，看不到model和cube。&lt;/p></description></item><item><title>Spark写Mongodb的小坑</title><link>https://leibnizhu.github.io/p/Spark%E5%86%99Mongodb%E7%9A%84%E5%B0%8F%E5%9D%91/</link><pubDate>Wed, 15 Jan 2020 15:47:27 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spark%E5%86%99Mongodb%E7%9A%84%E5%B0%8F%E5%9D%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Spark%E5%86%99Mongodb%E7%9A%84%E5%B0%8F%E5%9D%91/zelda.jpg" alt="Featured image of post Spark写Mongodb的小坑" />&lt;h1 id="spark写mongodb的小坑">Spark写Mongodb的小坑&lt;/h1>
&lt;p>首先证明我还活着。&lt;br>
因为Spark老集群版本限制(参见:&lt;a class="link" href="https://docs.mongodb.com/spark-connector/master/" target="_blank" rel="noopener"
>https://docs.mongodb.com/spark-connector/master/&lt;/a>)，&lt;code>mongodb-connector&lt;/code>用的版本是&lt;code>1.1.0&lt;/code>，以下坑基于该版本出现，新版本未验证。&lt;/p>
&lt;h2 id="用mongosparksave写入rdd报错e11000-duplicate-key-error">用MongoSpark.save写入RDD报错E11000 duplicate key error&lt;/h2>
&lt;p>观察源码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> save&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">D:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">RDD&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">D&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span> writeConfig&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">WriteConfig&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> mongoConnector &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">MongoConnector&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>writeConfig&lt;span style="color:#5bc4bf">.&lt;/span>asOptions&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rdd&lt;span style="color:#5bc4bf">.&lt;/span>foreachPartition&lt;span style="color:#5bc4bf">(&lt;/span>iter &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>iter&lt;span style="color:#5bc4bf">.&lt;/span>nonEmpty&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mongoConnector&lt;span style="color:#5bc4bf">.&lt;/span>withCollectionDo&lt;span style="color:#5bc4bf">(&lt;/span>writeConfig&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span> collection&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">MongoCollection&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">D&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iter&lt;span style="color:#5bc4bf">.&lt;/span>grouped&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">DefaultMaxBatchSize&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>batch &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> collection&lt;span style="color:#5bc4bf">.&lt;/span>insertMany&lt;span style="color:#5bc4bf">(&lt;/span>batch&lt;span style="color:#5bc4bf">.&lt;/span>toList&lt;span style="color:#5bc4bf">.&lt;/span>asJava&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mongo的逻辑是，纯RDD，没有schema，那么无法得知_id类型信息，于是直接insertMany。当Document数据里有_id字段时，insertMany可能就会发生_id冲突，报E11000 duplicate key error异常错误。&lt;br>
解决方案：&lt;/p>
&lt;ol>
&lt;li>改用 &lt;code>MongoSpark.save(dataFrame: DataFrame)&lt;/code>;&lt;/li>
&lt;li>爆改&lt;code>MongoSpark&lt;/code>, 将&lt;code>MongoSpark.save(rdd: RDD[D])&lt;/code>改成根据Docuemnt是否有_id而分别生成&lt;code>ReplaceOneModel&lt;/code>和&lt;code>InsertOneModel&lt;/code>，再批量插入。&lt;/li>
&lt;/ol>
&lt;p>我一开始用了方案1，后来还是觉得限制太多，但也没有直接爆改&lt;code>MongoSpark&lt;/code>，而是直接在代码里实现，不用&lt;code>MongoSpark&lt;/code>了。&lt;/p>
&lt;h2 id="list含null时写入失败">List含null时写入失败&lt;/h2>
&lt;p>原因是&lt;code>com.mongodb.spark.sql.MapFunctions&lt;/code>的&lt;code>arrayTypeToBsonValue&lt;/code>方法没有处理List里面的空元素，而是直接每个元素调&lt;code>convertToBsonValue&lt;/code>方法，后者再调用&lt;code>elementTypeToBsonValue&lt;/code>的时候，在模式匹配里面就匹配不上，进入最后的默认分支，抛&lt;code>MongoTypeConversionException&lt;/code>异常。&lt;br>
解决方案很简单：&lt;/p>
&lt;ol>
&lt;li>对数组/List做预处理，过滤null元素，但可能这些null元素是有用的，此时此法无用；&lt;/li>
&lt;li>爆改&lt;code>MapFunctions&lt;/code>：&lt;/li>
&lt;/ol>
&lt;p>其实也不算爆改，小改几个地方即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> arrayTypeToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>elementType&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">DataType&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> containsNull&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Boolean&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> data&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Any&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">BsonValue&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> internalData &lt;span style="color:#815ba4">=&lt;/span> elementType &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*....省略无关代码....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> data&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>x &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>x &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> containsNull&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">BsonNull&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> convertToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>x&lt;span style="color:#5bc4bf">,&lt;/span> elementType&lt;span style="color:#5bc4bf">)).&lt;/span>asJava
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">BsonArray&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>internalData&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> elementTypeToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>element&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Any&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> elementType&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">DataType&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">BsonValue&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementType &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*....省略无关代码....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> arrayType&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ArrayType&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span> arrayTypeToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>arrayType&lt;span style="color:#5bc4bf">.&lt;/span>elementType&lt;span style="color:#5bc4bf">,&lt;/span> arrayType&lt;span style="color:#5bc4bf">.&lt;/span>containsNull&lt;span style="color:#5bc4bf">,&lt;/span> element&lt;span style="color:#5bc4bf">.&lt;/span>asInstanceOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*....省略无关代码....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> mapTypeToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>valueType&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">DataType&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> data&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Any&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">BsonValue&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> internalData &lt;span style="color:#815ba4">=&lt;/span> valueType &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*....省略无关代码....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> subArray&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ArrayType&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span> data&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>kv &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">BsonElement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>kv&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> arrayTypeToBsonValue&lt;span style="color:#5bc4bf">(&lt;/span>subArray&lt;span style="color:#5bc4bf">.&lt;/span>elementType&lt;span style="color:#5bc4bf">,&lt;/span> subArray&lt;span style="color:#5bc4bf">.&lt;/span>containsNull&lt;span style="color:#5bc4bf">,&lt;/span> kv&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>asInstanceOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Any&lt;/span>&lt;span style="color:#5bc4bf">]])))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*....省略无关代码....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">BsonDocument&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>internalData&lt;span style="color:#5bc4bf">.&lt;/span>toList&lt;span style="color:#5bc4bf">.&lt;/span>asJava&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="objectid对象写入">ObjectId对象写入&lt;/h2>
&lt;p>Mongodb的_id默认是用ObjectId类型，如果在修改数据后重新写入Mongodb，也需要使用同样的ObjectId对象。&lt;br>
在直接使用Mongodb的SDK的情况，这个很简单，直接new一个&lt;code>org.bson.types.ObjectId&lt;/code>对象即可。&lt;br>
如果是使用DataFrame，则structType和具体的Row数据构造都有一小点麻烦，直接上代码吧。&lt;br>
构建Schema：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">var&lt;/span> structFieldList &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*....其他字段schema信息....*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> idDataType &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">StructType&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">StructField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;oid&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">StringType&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Metadata&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>empty&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>structFieldList &lt;span style="color:#5bc4bf">+=&lt;/span> &lt;span style="color:#fec418">StructField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;_id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> idDataType&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Metadata&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>empty&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">StructType&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>structFieldList&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写入数据的处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">GenericRow&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;5e1db87e5d080f6e7eb7b067&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#776e71">//这是一个Row里面的一个字段值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Archives</title><link>https://leibnizhu.github.io/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://leibnizhu.github.io/archives/</guid><description/></item><item><title>Scala项目发布的小坑</title><link>https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/</link><pubDate>Wed, 01 Aug 2018 15:05:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/raindrop.jpg" alt="Featured image of post Scala项目发布的小坑" />&lt;p>之前写了一篇文章 &lt;a class="link" href="https://leibnizhu.github.io/p/%e5%8f%91%e5%b8%83%e9%a1%b9%e7%9b%ae%e5%88%b0maven%e4%b8%ad%e5%a4%ae%e4%bb%93%e5%ba%93/" >发布项目到Maven中央仓库&lt;/a>, 最近发布一个scala项目的时候, 用原来的配置, deploy到仓库后,提示找不到javadoc.&lt;br>
折腾了一番, 结论:&lt;/p>
&lt;ol>
&lt;li>***-javadoc.jar肯定是要有的, 否则Nexus校验不通过&lt;/li>
&lt;li>用maven的javadoc插件默认查找&lt;code>src/main/java&lt;/code>下面的源码进行文档构建, scala项目里这个目录当然是不存在的&lt;/li>
&lt;li>可以通过&lt;code>&amp;lt;sourceDictionary&amp;gt;&lt;/code>配置让javadoc插件去&lt;code>src/main/scala&lt;/code>目录去找源码, 但是显然没有java文件给他找,也是构建不出文档的&lt;/li>
&lt;li>所以要用maven的scala插件进行scaladoc构建文档并打包(默认jar包文件名跟javadoc兼容), 命令是&lt;code>mvn scala:doc-jar&lt;/code>&lt;/li>
&lt;li>为了和gpg签名,以及最后的deploy到远程maven仓库配合, 只要修改scala插件的配置即可&lt;/li>
&lt;/ol>
&lt;p>最后配置如下:
&lt;strong>注&lt;/strong>: 主要增加了&lt;code>doc-jar&lt;/code>的&lt;code>goal&lt;/code>, 其实在profile或直接在build中配置均可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!--scala编译,scala-doc等--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>net.alchim31.maven&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>scala-maven-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.2.2&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;recompileMode&amp;gt;&lt;/span>incremental&lt;span style="color:#5bc4bf">&amp;lt;/recompileMode&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;args&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;arg&amp;gt;&lt;/span>-target:jvm-1.8&lt;span style="color:#5bc4bf">&amp;lt;/arg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/args&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>-source&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>-target&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/javacArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArg&amp;gt;&lt;/span>-Xms1024m&lt;span style="color:#5bc4bf">&amp;lt;/jvmArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArg&amp;gt;&lt;/span>-Xmx1024m&lt;span style="color:#5bc4bf">&amp;lt;/jvmArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/jvmArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>scala-compile-first&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>process-resources&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>add-source&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>compile&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>doc-jar&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span> &lt;span style="color:#776e71">&amp;lt;!--scaladoc打jar包--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>scala-test-compile&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>process-test-resources&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>add-source&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>testCompile&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 以前的配置 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>《Scala实用指南》读书笔记(二)</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Wed, 18 Jul 2018 16:54:47 +0800</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/nightstreet.jpg" alt="Featured image of post 《Scala实用指南》读书笔记(二)" />&lt;h2 id="第8章-集合">第8章 集合&lt;/h2>
&lt;ul>
&lt;li>Scala对元素较少的Set进行了优化,4个元素以内的Set有专门的实现类(&lt;code>Set0&lt;/code>,&lt;code>Set1&lt;/code>,&lt;code>Set2&lt;/code>,&lt;code>Set3&lt;/code>,&lt;code>Set4&lt;/code>),大于4个元素的使用HashSet实现&lt;/li>
&lt;li>Set的方法(&lt;code>filter&lt;/code>,&lt;code>map&lt;/code>,&lt;code>foreach&lt;/code>这些就不说了):
&lt;ul>
&lt;li>&lt;code>mkString&lt;/code>: 允许传入一个分隔符,相当于把集合所有元素用分隔符join起来返回字符串&lt;/li>
&lt;li>&lt;code>++&lt;/code>: 合并两个Set,或者说,并集&lt;/li>
&lt;li>&lt;code>&amp;amp;&lt;/code>: 两个Set的交集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Map的方法:
&lt;ul>
&lt;li>&lt;code>filterKeys&lt;/code>: 根据key去过滤,而&lt;code>filter&lt;/code>方法是根据(key,value)键值对去过滤&lt;/li>
&lt;li>&lt;code>get&lt;/code>: 根据key拿value,注意是返回&lt;code>Option[T]&lt;/code>&lt;/li>
&lt;li>&lt;code>updated(K,V)&lt;/code>: 增加或更新键值对,返回新的Map,也可以用&lt;code>X() = b&lt;/code>,等效于&lt;code>X.updated(b)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>List的&lt;code>a :: list&lt;/code>读作&lt;code>将a前插到list&lt;/code>,后面的list才是::方法的调用者; 而&lt;code>list1 ::: list2&lt;/code>将list1前插到list2&lt;/li>
&lt;li>List的&lt;code>forall()&lt;/code>方法判断是否所有元素都满足条件, &lt;code>exists()&lt;/code>方法判断是否有任意元素满足条件. 其实分别相当于:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>list&lt;span style="color:#5bc4bf">.&lt;/span>forall&lt;span style="color:#5bc4bf">(&lt;/span>f&lt;span style="color:#5bc4bf">)&lt;/span> 等效于 &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span> &lt;span style="color:#5bc4bf">/:&lt;/span> list&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list&lt;span style="color:#5bc4bf">.&lt;/span>exists&lt;span style="color:#5bc4bf">(&lt;/span>f&lt;span style="color:#5bc4bf">)&lt;/span> 等效于 &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span> &lt;span style="color:#5bc4bf">/:&lt;/span> list&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果方法名以 &lt;code>:&lt;/code> 结尾, 那么调用时的主语是操作符后面的实例, 即&lt;code>a (操作符): b&lt;/code>等效于&lt;code>b.操作符:(a)&lt;/code>;同时scala不允许字母作为操作符的名称,除非用下划线对操作符增加前缀,如&lt;code>jump_:()&lt;/code>&lt;/li>
&lt;li>&lt;code> + - ! ~&lt;/code>作一元操作符时,也是调用的主语在操作符后面,分别映射到&lt;code>unary_+(),unary_-(),unary_!(),unary_~()&lt;/code>等方法的调用,即&lt;code>-a&lt;/code>调用&lt;code>a.unary_-()&lt;/code>等&lt;/li>
&lt;li>for表达式:&lt;code>for([parrten &amp;lt;- generator; definition*&amp;gt;]+;filter;) [yield] expression&lt;/code>,可以加过滤条件,而yield也是可选的,有yield的时候返回一个值列表,没有yield的时候返回Unit&lt;/li>
&lt;/ul>
&lt;h2 id="第9章-模式匹配和正则表达式">第9章 模式匹配和正则表达式&lt;/h2>
&lt;ul>
&lt;li>匹配List的时候,可以只获取感兴趣的元素,剩下的用&lt;code>_*&lt;/code>省略, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>list &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>head&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">*)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>head&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//后面的直接忽略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> others &lt;span style="color:#815ba4">@&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">*)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>others&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//后面的tail要引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#48b685">&amp;#34;haha&amp;#34;&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">:&lt;/span>&lt;span style="color:#ef6155">&amp;#34;&lt;/span>&lt;span style="color:#fec418">two&lt;/span>&lt;span style="color:#ef6155">&amp;#34;&lt;/span>&lt;span style="color:#fec418">::tail&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>tail&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//这样其实也行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala的模式匹配case子句无需break&lt;/li>
&lt;li>scala约定模式变量名以小写字母开头(scala假设他是模式变量),常量为大写字母(会在作用域范围查找变量)&lt;/li>
&lt;li>不遵守以上规则的时候, 比如需要用模式匹配以外的变量, 可以显式指定作用域(如&lt;code>this.max&lt;/code>),或用反引号 &lt;code>`&lt;/code> 包住变量名(如&lt;code>`max`&lt;/code>)&lt;/li>
&lt;li>case类用于创建轻量级值对象,经常用于模式匹配；如果主构造器无参数，调用时又没加括号，那么传递的是case类的伴生对象（混合了Function0特质，可以视为函数）&lt;/li>
&lt;li>可使用自定义的提取器进行模式匹配，提取器在伴生对象中有&lt;code>unapply()&lt;/code>方法,接受我们想要匹配的值,返回Boolean(传入的值是否可以匹配),例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> unapply&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> s &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#34;TEST&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 TEST
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>提取器还可以返回Boolean型以外的结果,即解析的结果,通过修改&lt;code>unapply()&lt;/code>的返回类型实现(返回&lt;code>Option[T]&lt;/code>,&lt;code>T&lt;/code>即解析成功的结果类型), 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> unapply&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Option&lt;/span>&lt;span style="color:#5bc4bf">[(&lt;/span>&lt;span style="color:#fec418">String&lt;/span>,&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(!&lt;/span>s&lt;span style="color:#5bc4bf">.&lt;/span>contains&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;:&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#fec418">None&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> splited &lt;span style="color:#815ba4">=&lt;/span> s&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;:&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Some&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>splited&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> splited&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>a&lt;span style="color:#5bc4bf">,&lt;/span>b&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>a&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685"> and &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>b&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 ***:***
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用提取器的时候还可以应用其他提取器进行模式匹配,如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>a &lt;span style="color:#815ba4">@&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span>b&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>a&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685"> and &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>b&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 TEST:***
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>正则表达式: &lt;code>&amp;quot;regex&amp;quot;.r&lt;/code>(可以用原始字符串&lt;code>&amp;quot;&amp;quot;&amp;quot;regex&amp;quot;&amp;quot;&amp;quot;.r&lt;/code>), 实际上是&lt;code>String&lt;/code>隐式转换成&lt;code>StringOps&lt;/code>再调用其&lt;code>r&lt;/code>方法获取&lt;code>Regex&lt;/code>类实例&lt;/li>
&lt;li>正则表达式的方法:
&lt;ul>
&lt;li>&lt;code>findFirstIn(source)&lt;/code>: 获取正则表达式第一个匹配项&lt;/li>
&lt;li>&lt;code>findAllIn(source)&lt;/code>: 获取正则表达式的所有匹配项&lt;/li>
&lt;li>&lt;code>replaceFirstIn(source, replacement)&lt;/code>: 替换第一个匹配项&lt;/li>
&lt;li>&lt;code>replaceAllIn(source, replacement)&lt;/code>: 替换所有匹配项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scala的正则表达式是提取器,返回值是匹配项(括号的分组)拼接成的元组&lt;/li>
&lt;li>下划线的作用:
&lt;ul>
&lt;li>包引入的通配符&lt;/li>
&lt;li>元组索引的前缀&lt;/li>
&lt;li>函数值的隐式参数&lt;/li>
&lt;li>用默认值初始化变量&lt;/li>
&lt;li>在函数名中混合操作符和:&lt;/li>
&lt;li>在模式匹配中作为通配符&lt;/li>
&lt;li>处理异常时在catch代码块和case一起用(类似模式匹配了)&lt;/li>
&lt;li>作为分解操作的一部分,如&lt;code>max(arg: _*)&lt;/code>可以接受列表或数组参数,自动拆解成离散的值传递给可变长度参数&lt;/li>
&lt;li>部分应用一个函数,如&lt;code>val square = Math.pow(_:Int, 2)&lt;/code>部分应用了pow函数,返回一个新的单参数函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="第10章-处理异常">第10章 处理异常&lt;/h2>
&lt;ul>
&lt;li>Java处理多个异常时,会检查多个异常的处理顺序,子类必须在前面,否则编译会出错(&lt;code>exception ***.*** has already been caught&lt;/code>),但scala对此不会警告,要自己注意(在catch块中使用case匹配的顺序)&lt;/li>
&lt;li>这本书竟然没有讲到&lt;code>Try&lt;/code>类,吐槽一下&lt;/li>
&lt;/ul>
&lt;h2 id="第11章-递归">第11章 递归&lt;/h2>
&lt;ul>
&lt;li>尾递归优化(Tail Recursive Optimization): 不是尾递归的时候,递归调用在字节码对应&lt;code>invokespecial&lt;/code>指令,表明是递归调用,会产生新一层栈;如果写成尾递归, 递归调用时在字节码对应&lt;code>goto&lt;/code>指令,表明使用了迭代而非方法调用,放弃了当前的上下文&lt;/li>
&lt;li>&lt;code>@scala.annotation.tailrec&lt;/code>注解加载函数上,可以让scala检查是否使用了尾递归,如果非尾递归,会报错;该注解可选,主要是增加可读性,并在重构时保持尾递归性质&lt;/li>
&lt;li>蹦床调用(trampoline call): 两个函数互相调用(f调用g,g调用f)构成递归, 对于蹦床调用即使是尾递归&lt;code>@tailrec&lt;/code>注解也会报错(scala不能识别跨方法的递归);此时可以用&lt;code>TailRec&lt;/code>类解决:
&lt;ul>
&lt;li>蹦床调用的函数返回&lt;code>TailRec[T]&lt;/code>,其中&lt;code>T&lt;/code>是真正的返回值类型&lt;/li>
&lt;li>蹦床调用的函数内部,需要结束递归时返回&lt;code>done(结果: T)&lt;/code>,需要递归调用其他函数时返回&lt;code>tailcall(其他函数())&lt;/code>;这两者都只是简单包装参数,以供后续调用或延迟执行&lt;/li>
&lt;li>外部调用这些函数时, 对返回值&lt;code>TailRec[T]&lt;/code>调用&lt;code>result&lt;/code>方法可以获取最终递归结果;真正发生计算是调用&lt;code>result&lt;/code>方法的时候&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="第12章-惰性求值和并行集合">第12章 惰性求值和并行集合&lt;/h2>
&lt;ul>
&lt;li>使用关键字&lt;code>lazy&lt;/code>修饰变量,scala会推迟绑定变量和他的值,直到该值第一次被使用(才会去绑定)&lt;/li>
&lt;li>如果变量绑定的计算有副作用,那么多个变量的绑定顺序机会对绑定的值有影响,此时就不能随便用惰性求值(&lt;code>lazy&lt;/code>)了,否则不可交换计算的结果将会得不可知&lt;/li>
&lt;li>前面介绍的集合都是&lt;code>严格集合&lt;/code>,所有计算都是严格(立刻)执行的; 通过集合的&lt;code>view()&lt;/code>方法可以获得一个严格集合的&lt;code>惰性视图&lt;/code>, 惰性集合会推迟计算,当且晋档请求了非惰性/非视图的结果时(比如&lt;code>head&lt;/code>,&lt;code>last&lt;/code>等等)前面的操作才会进行&lt;/li>
&lt;li>但集合的惰性视图不一定比严格集合性能好,要看具体情况,比如一个集合进行一些操作之后,获取head,那么惰性视图要进行操作的次数就少一些;如果在多次filter后要拿last,那么惰性视图就要把每个元素执行filter计算一遍, 而严格集合每次filter后要计算的结果都小一些,这样计算量反而会少一点.&lt;/li>
&lt;li>&lt;code>Stream&lt;/code>仅按需生成值,有天然的惰性.拥有&lt;code>#::&lt;/code>方法连接(惰性,需要的时候才会连接)现有的Stream和新的值,通过递归定义可以得到一个&lt;code>Stream&lt;/code>, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//第一个元素是start,下一个是前一个加1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">def&lt;/span> gen&lt;span style="color:#5bc4bf">(&lt;/span>start&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Stream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> start &lt;span style="color:#5bc4bf">#&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">:&lt;/span> &lt;span style="color:#fec418">gen&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">start&lt;/span> &lt;span style="color:#fec418">+&lt;/span> &lt;span style="color:#ef6155">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">gen&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">10&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#776e71">//Stream(10, ?)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>调用&lt;code>Stream.force()&lt;/code>方法可以强制求值, &lt;code>toList()&lt;/code>方法也类似;如果在无限流上调用的话会抛OutOfMemoryError&lt;/li>
&lt;li>对于无限流,可以使用&lt;code>take(Int)&lt;/code>方法获取前N个值组成的Stream,也可以使用&lt;code>takeWhile()&lt;/code>方法按条件生成值(参数的函数值返回false时终止生成新值)&lt;/li>
&lt;li>Stream会记住(memoize)已经生成的值,即按需生成新的值后,会先缓存再返回. 比如执行&lt;code>stream.take(3).force&lt;/code>计算了3个值,再执行&lt;code>stream.take(4).force&lt;/code>只计算第4个值,前3个值从缓存读取&lt;/li>
&lt;li>对很多顺序集合,scala都有对应的并行版本, 如&lt;code>ParArray&lt;/code>,&lt;code>ParHashMap&lt;/code>,&lt;code>ParHashSet&lt;/code>等等; 可以用&lt;code>par()&lt;/code>和&lt;code>seq()&lt;/code>方法在顺序集合及其并行版本之间转换&lt;/li>
&lt;li>不适合使用并行集合的情况:
&lt;ul>
&lt;li>创建和调度线程的开销不应该大于执行这些任务所需要的时间, 对于慢型任务而言并行集合可能有所裨益,但对于小心集合的快速任务并不适合;&lt;/li>
&lt;li>此外,在集合上的操作如果修改全局状态(线程不安全的修改),那么整体计算结果不可知;&lt;/li>
&lt;li>如果操作不满足结合律也不要使用并行集合,因为并行集合的执行顺序是不确定的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="第13章-使用actor编程">第13章 使用Actor编程&lt;/h2>
&lt;ul>
&lt;li>Actor帮助我们将共享的可变性转换成隔离的可变性(isolated mutability),如果一个任务可以有意义地分成几个子任务,分而治之,那么可以使用Actor模型来解决这个任务&lt;/li>
&lt;li>&lt;code>AtomicLog&lt;/code>之类的类,虽然原子性保证了单个值的线程安全性,但并不能保证跨多个值的原子性,这些值可能同时发生变化&lt;/li>
&lt;li>一个Actor是一个对象,由一个消息队列支撑,任意给定的时间,一个Actor只会处理一条消息; &lt;code>Akka&lt;/code>提供&lt;code>Actor&lt;/code>模型, 创建一个Actor只要继承&lt;code>Actor&lt;/code>特质并实现&lt;code>receive()&lt;/code>方法, &lt;code>receive()&lt;/code>方法主题是模式匹配, 匹配发生在一个隐式消息对象上&lt;/li>
&lt;li>Actor托管在ActorSystem中,管理了线程池(只要系统保持活跃,这个线程池就会一直保持活跃),消息队列,和Actor生命周期,使用&lt;code>actorOf()&lt;/code>工厂方法创建Actor, 用&lt;code>!()&lt;/code>方法(&lt;code>tell()&lt;/code>)发送消息:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> depp &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">XxxActor&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#776e71">//通过actorOd工厂方法创建Actor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>depp &lt;span style="color:#5bc4bf">!&lt;/span> &lt;span style="color:#48b685">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span style="color:#776e71">//往Actor发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> terminateFuture &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>terminate&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#776e71">//退出ActorSystem线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>ready&lt;span style="color:#5bc4bf">(&lt;/span>terminateFuture&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Duration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Inf&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Actor一些细节:
&lt;ul>
&lt;li>Actor在不同线程中进行,而不是调用主线程&lt;/li>
&lt;li>每个Actor一次只处理一条消息,多个Actor并发运行处理多条消息&lt;/li>
&lt;li>Actor是异步的,不会阻塞调用者(调用者不等待Actor回复)&lt;/li>
&lt;li>线程和Actor不绑定(没什么线程亲和力),每次处理消息&lt;strong>可能&lt;/strong>使用线程池中不同的线程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Actor中保存的任何字段都是自动线程安全的,可变但没有共享可变性;可以在Actor类中选择性地存储状态,比如用于存储状态的字段,等等&lt;/li>
&lt;li>若希望从Actor得到响应,Akka提供了询问模式,但消息可能永远不会到达,因此强制使用超时时间;询问模式下, 使用&lt;code>?()&lt;/code>方法(&lt;code>ask()&lt;/code>)发送消息, 返回一个&lt;code>Future&lt;/code>,需要用这个Future实例等待响应(可以用&lt;code>Await.result()&lt;/code>方法), 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//Actor类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MyActor&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Actor&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> recieve&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Receive&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> msg &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> sender &lt;span style="color:#5bc4bf">!&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Got message &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>msg&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> depp &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">MyActor&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#776e71">//通过actorOd工厂方法创建Actor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> timeout &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Timeout&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">2.&lt;/span>seconds&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//通过隐式参数定义超时, ?方法要用到
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> askFuture &lt;span style="color:#815ba4">=&lt;/span> depp &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#48b685">&amp;#34;heihei&amp;#34;&lt;/span> &lt;span style="color:#776e71">//询问模式,发出消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> result &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>result&lt;span style="color:#5bc4bf">(&lt;/span>askFuture&lt;span style="color:#5bc4bf">,&lt;/span> timeout&lt;span style="color:#5bc4bf">.&lt;/span>duration&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//等待响应结果,这里也需要一个超时的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Response result : &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>result&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> terminateFuture &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>terminate&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#776e71">//退出ActorSystem线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>ready&lt;span style="color:#5bc4bf">(&lt;/span>terminateFuture&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Duration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Inf&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Akka提供&lt;code>RoundRobinPool&lt;/code>路由器,会将发送到这个路由器的所有消息均匀地路由到支撑他的多个Actor,使用方法:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> router&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">ActorRef&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">RoundRobinPool&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">100&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>props&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">MyActor&lt;/span>&lt;span style="color:#5bc4bf">]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Actor中想访问ActorSystem可以使用&lt;code>context()&lt;/code>方法&lt;/li>
&lt;li>使用建议:
&lt;ul>
&lt;li>更多地依赖无状态的而非有状态的Actor&lt;/li>
&lt;li>要保证recieve()方法中的处理速度非常狂,尤其是接收Actor具有状态时,改变状态的长时间运行任务将会降低并发性,要避免&lt;/li>
&lt;li>确保在Actor之间传递的消息是不可变对象&lt;/li>
&lt;li>避免使用ask()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="第14章-和java进行互操作">第14章 和Java进行互操作&lt;/h2>
&lt;ul>
&lt;li>scala使用Java类,当Java变量/方法名等于scala关键字冲突的时候,可以将受影响的变量/方法用反引号&lt;code>`&lt;/code>括起来&lt;/li>
&lt;li>没有方法实现的trait在字节码层面是简单的接口;如果想在scala中创建接口,只能创建没有方法实现的trait&lt;/li>
&lt;li>有方法实现的trait, 2.11及更早版本的scala会编译成一个接口(名为:&lt;code>trait名&lt;/code>)和一个实现该接口的抽象类(名为:&lt;code>trait名$class&lt;/code>), 2.12开始,只包含方法实现而不包含字段的trait会编译成带有默认方法的接口&lt;/li>
&lt;li>scala将单例对象和伴生对象编译成一个单例类,在字节码层面只有static方法&lt;/li>
&lt;li>单例对象(假设名为Single)编译后产生两个类, 一个&lt;code>Single$&lt;/code>类存放具体的静态方法,一个&lt;code>Single&lt;/code>类负责转发方法的调用,在Java中可以直接通过&lt;code>Single&lt;/code>调用其方法&lt;/li>
&lt;li>伴生对象(假设类名为Buddy)编译后产生两个类,一个&lt;code>Buddy$&lt;/code>类存放伴生对象的静态方法,一个&lt;code>Buddy&lt;/code>类存放对应类的方法等;&lt;/li>
&lt;li>在Java中使用类本身的方法可以直接调用;而伴生对象,包含一个&lt;code>MODULE$&lt;/code>的属性保存着该类的静态单例对象,可以通过它去访问其方法,如&lt;code>Buddy$.MODULE$.method()&lt;/code>&lt;/li>
&lt;li>scala没有throws子句,抛出异常时无需在方法签名中显示声明,如果在Java中扩展类覆写方法时抛出异常就会报错; 可以在scala方法签名中增加&lt;code>@throw&lt;/code>注解解决该问题,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">abstract&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Bird&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@throws&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">NoFlyException&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> fly&lt;span style="color:#5bc4bf">()&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(结束)&lt;/p></description></item><item><title>《Scala实用指南》读书笔记(一)</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Tue, 17 Jul 2018 15:14:37 +0800</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/summer2.jpg" alt="Featured image of post 《Scala实用指南》读书笔记(一)" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>好久没写博客了,在&lt;code>Kafka&lt;/code>源码的海洋里挣扎ing,休息的时候还刷&lt;code>Leetcode&lt;/code>玩儿,很多东西匆匆丢到&lt;code>OneNote&lt;/code>里了.&lt;br>
最近花了一周时间看了品神翻译的《Scala实用指南》, 这本书应该主要是面向刚入Scala大门的Javaer的,前面讲Scala基础,后期还讲了下Akka和Scala具体的应用.&lt;br>
我虽然写scala也有一段时间了,再看这本书还是觉得受益匪浅,有很多地方以前没有注意到的.&lt;br>
那么本文就把一些细节写写,仅仅是枚举一下记录一下,并不全面.&lt;br>
P.S. 看书勘误找品神, 找到错误了发红包诶,我就领了一个冰可乐(等值)红包.&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin.png"
width="500"
height="583"
srcset="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin_hue0f2ccbae1cd7a20b17d8fd526725f61_54962_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin_hue0f2ccbae1cd7a20b17d8fd526725f61_54962_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;h2 id="第2章-体验scala">第2章 体验Scala&lt;/h2>
&lt;ul>
&lt;li>scala的REPL中, &lt;code>Ctrl+A&lt;/code>调到行首,&lt;code>Ctrl+E&lt;/code>调到行尾&lt;/li>
&lt;li>&lt;code>scala &amp;lt;scala源文件&amp;gt;&lt;/code>命令可以在单独的JVM中运行scala代码,而实际上是自动合成Main类调用main()方法&lt;/li>
&lt;/ul>
&lt;h2 id="第3章-从java到scala">第3章 从Java到Scala&lt;/h2>
&lt;ul>
&lt;li>用&lt;code>val&lt;/code>定义所有字段,并只提供读不提供更新状态的方法,可以使一个类的实例不可变&lt;/li>
&lt;li>&lt;code>1 to 3&lt;/code>,&lt;code>1 until 3&lt;/code>这类表达式其实是隐式转换,&lt;code>1&lt;/code>通过&lt;code>intWrapper()&lt;/code>方法转换为成富封装器(rich wrapper,这里具体是&lt;code>RichInt&lt;/code>类)再调用其&lt;code>to()&lt;/code>,&lt;code>until()&lt;/code>方法&lt;/li>
&lt;li>Scala将&lt;code>Scala.Int&lt;/code>视作Java基本类型int是纯粹的编译期转换&lt;/li>
&lt;li>&lt;code>val (a,b)=(1,2)&lt;/code>这种赋值方法叫&lt;code>多重赋值(multiple assignment)&lt;/code>&lt;/li>
&lt;li>元组的索引越界是在编译期报错的&lt;/li>
&lt;li>一个函数如&lt;code>max(values:Int*)&lt;/code>接受可变长度参数值,但不是字面上的数组类型,如果调用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>max&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在编译期会报错,可以使用数组展开标记(Array explode notation)告诉编译期将数组展开成所需的形式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>max&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重载基类方法时,要小心参数默认值,如果派生类重载方法使用的参数默认值和基类对应的不一样,会让人困惑&lt;/li>
&lt;li>重载基类方法时,应该保持参数名字一致性,否则使用参数命名调用(如&lt;code>f(a=3,b=4)&lt;/code>)时会优先使用基类的&lt;/li>
&lt;li>隐式参数需要将参数标记为&lt;code>implicit&lt;/code>且放在单独的参数列表中,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#5bc4bf">(&lt;/span>a&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>b&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)(&lt;/span>&lt;span style="color:#815ba4">implicit&lt;/span> c&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">User&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>隐式参数的值传递是可选的,没有传值时,scala会在调用的作用域中寻找一个隐式变量,因此每个作用域中每一种类型最多只能有一个隐式变量,如上面的例子中,定义一个隐式变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> user&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">User&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">User&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Leibniz&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala能自动将String转换成&lt;code>scala.runtime.RichString&lt;/code>,因此可以使用&lt;code>capitalize()&lt;/code>,&lt;code>lines()&lt;/code>,&lt;code>reverse()&lt;/code>等方法&lt;/li>
&lt;li>跨行字符串:将多行的字符串放在&lt;code>&amp;quot;&amp;quot;&amp;quot;...&amp;quot;&amp;quot;&amp;quot;&lt;/code>中,里面的引号和斜杠等等字符甚至不需要转译,又称为&lt;code>原始字符串&lt;/code>,创建正则的时候就很方便了.&lt;/li>
&lt;li>&lt;code>原始字符串&lt;/code>中的缩进也会被带入结果字符串中,可以使用&lt;code>stripMargin()&lt;/code>方法将管道符号&lt;code>|&lt;/code>前面的空白或控制字符去掉, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> str &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&amp;#34;Leibniz said
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> |&amp;#34;Scala is exciting&amp;#34;.&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>stripMargin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>字符串拼接用字符串插值,如&lt;code>s&amp;quot;...${expresion}&amp;quot;&lt;/code>,s代表s插值器,如果是简单的一个变量直接&lt;code>$val&lt;/code>,复杂表达式才需要大括号括起来,而美元符号&lt;code>$&lt;/code>此时需要转译:&lt;code>$$&lt;/code>.表达式的值在插值时被捕获,变量后续的变更不会影响字符串.&lt;/li>
&lt;li>字符串格式化可以用f插值器,如&lt;code>f&amp;quot;${a}%2.2f&amp;quot;&lt;/code>将a变量显示小数点后2位,此外还有&lt;code>%s&lt;/code>字符串和&lt;code>%d&lt;/code>整数等格式&lt;/li>
&lt;li>scala的类和方法默认公开&lt;/li>
&lt;li>scala不强制要求捕获异常&lt;/li>
&lt;li>scala默认导入的&lt;code>scala&lt;/code>和&lt;code>scala.Predef&lt;/code>包,包含了一些默认类型,隐式转换等等&lt;/li>
&lt;li>scala没有操作符重载, 但是方法名可以是+_*/等操作符,同时方法调用的句号和括号可以省略,因此有操作符重载的假象;对这些方法,同级操作的左边优先级更高, scala使用方法的第一个字符决定其优先级,从低到高分别为:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">-&lt;/span> &lt;span style="color:#fec418">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">/&lt;/span> &lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#5bc4bf">%&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala中赋值操作的返回值是Unit&lt;/li>
&lt;li>scala中==是基于值的对比(等效于&lt;code>equals()&lt;/code>方法),需要比较引用的可以用&lt;code>eq()&lt;/code>方法&lt;/li>
&lt;li>scala的protected方法只有派生类可以访问,同包的非派生类不可访问,在派生类中也不可以通过基类实例来访问,只能是通过派生类的实例方法访问&lt;/li>
&lt;li>scala中可以通过&lt;code>private[类名/包名/this]&lt;/code>和&lt;code>protected[类名/包名/this]&lt;/code>实现细粒度的权限控制,具体不表了&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="第4章-处理对象">第4章 处理对象&lt;/h2>
&lt;ul>
&lt;li>定义类的时候,&lt;code>class A(var a:Int, val b:Int)&lt;/code>被称作主构造器(primary constructor),其中可变的参数a自动生成getter和setter,不可变的参数b自动生成getter方法,但这些getter setter方法不符合JavaBean标准,没有get/set前缀,可以通过在期望产生符合JavaBean规范的字段加上&lt;code>@scala.reflect.BeanProperty&lt;/code>注解来解决这个问题&lt;/li>
&lt;li>scala中val修饰的属性编译后为&lt;code>private final&lt;/code>&lt;/li>
&lt;li>类中单独的代码会作为主构造器的一部分&lt;/li>
&lt;li>还可以定义辅助构造器:&lt;code>def this(...)&lt;/code>,辅助构造器的第一行必须调用主构造器或者其他辅助构造器&lt;/li>
&lt;li>重载方法时强制使用关键字&lt;code>override&lt;/code>(不是注解),如&lt;code>override def f(...) = ...&lt;/code>&lt;/li>
&lt;li>派生类在主构造器(与基类同名的)参数前面加上要关键字&lt;code>override&lt;/code>, 编译器将这些属性的getter方法路由到基类对应方法&lt;/li>
&lt;li>只有object没有对应class叫单例对象(不能传递参数给其构造器),class对应object叫伴生对象&lt;/li>
&lt;li>伴生对象可以访问private修饰的方法&lt;/li>
&lt;li>字节码层面上,单例中的方法会被编译为static方法&lt;/li>
&lt;li>scala创建枚举需要扩展&lt;code>Enumeration&lt;/code>类,并用特殊的Value(表示枚举的类型)来赋值,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Currency&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Enumeration&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">type&lt;/span> &lt;span style="color:#fec418">Currency&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">Value&lt;/span> &lt;span style="color:#776e71">//高速编译器,将Currency视作一个类型而非实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#fec418">CNY&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#fec418">USD&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#fec418">JPY&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala支持包对象,为单例对象,与包同名,用&lt;code>package object&lt;/code>关键字标记,当包中其他类&lt;code>import 包名._&lt;/code>时,可以直接引用包对象里面的方法;包对象可以存储该包公用的一些方法如工具方法,举例, scala包也有包对象,包含了很多类型别名和隐式类型转换.&lt;/li>
&lt;/ul>
&lt;h2 id="第5章-善用类型">第5章 善用类型&lt;/h2>
&lt;ul>
&lt;li>scala偏向于使用类型推断,但以下情况必须显式指定类型:1.定义没有初始值的类字段;2.定义函数或方法的参数;3.使用return或递归时,定义函数或方法返回类型;4.将变量定义为与推断出来类型不一样&lt;/li>
&lt;li>&lt;code>Nothing&lt;/code>是所有类型的子类型, &lt;code>Any&lt;/code>是所有类型的基础类型,包含&lt;code>AnyRef&lt;/code>子类型(所有引用类型的基础类型,包含Java的&lt;code>Object&lt;/code>类的方法)和&lt;code>AnyVal&lt;/code>子类型(所有值类型Int,Double等的基础类型,映射到Java原始类型)&lt;/li>
&lt;li>使用有类型参数的类但不指定泛型类型的时候,就会使用Nothing作为类型参数,如果没有定义协变,那么任何有意义的类型都不能使用&lt;/li>
&lt;li>抛出异常的表达式的返回类型也是&lt;code>Nothing&lt;/code>,可以替代任意类型,语义上是合法的,可以是类型推断进行下去&lt;/li>
&lt;li>&lt;code>Option[T]&lt;/code>有两个子类,&lt;code>Some[T]&lt;/code>(有值)和&lt;code>None&lt;/code>(没有值),用于值可能存在或不存在的情况&lt;/li>
&lt;li>&lt;code>Either&lt;/code>有两个子类,&lt;code>Right[R]&lt;/code>(正确结果的值)和&lt;code>Left[L]&lt;/code>(错误的时候的值),用于结果可能存在两种不同类型的值的情况&lt;/li>
&lt;li>定义函数的时候,用等号将方法声明和方法主题分开(如&lt;code>def f(a:Int) = {...}&lt;/code>)才能完成返回值类型推断,反之(如&lt;code>def f(a:Int) {...}&lt;/code>)不行&lt;/li>
&lt;li>一个方法只是字段或属性的访问器,不要将&lt;code>()&lt;/code>放在定义中,调用的时候也不用&lt;code>()&lt;/code>;但如果一个函数具有副作用,那么在声明和调用这个函数的时候都要使用&lt;code>()&lt;/code>&lt;/li>
&lt;li>任何返回&lt;code>Unit&lt;/code>的函数必须产生副作用(否则,又不返回东西,又不产生副作用,那这个函数没什么用了)&lt;/li>
&lt;li>&lt;code>T &amp;lt;: P&lt;/code>表示类型T派生自类型P, &lt;code>T &amp;gt;: S&lt;/code>表示类型T是类型S的超类&lt;/li>
&lt;li>&lt;code>[+T]&lt;/code>表示支持&lt;code>协变&lt;/code>(若接受基类实例集合,则也支持子类实例集合);&lt;code>[-T]&lt;/code>表示支持&lt;code>逆变&lt;/code>(若接受基类实例集合,则也支持超类实例集合)&lt;/li>
&lt;li>使用隐式转换函数时,需要导入&lt;code>scala.language.implicitConversions&lt;/code>(主要是提醒阅读代码的人,黑魔法出没)&lt;/li>
&lt;li>与隐式参数类似,如果一个函数标记为&lt;code>implicit&lt;/code>,且存在于当前作用域(import或在当前文件作用域),scala都会自动使用这个函数进行类型转换(如果可以)&lt;/li>
&lt;li>scala还支持隐式类(用&lt;code>implicit&lt;/code>标记类),但不能是独立的类,必须在单例对象/类/特质中;而使用隐式类的时候不需要导入&lt;code>implicitConversions&lt;/code>;例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtil&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Wrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>i&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> conv&lt;span style="color:#5bc4bf">(&lt;/span>unit&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> i&lt;span style="color:#5bc4bf">.&lt;/span>toString &lt;span style="color:#5bc4bf">+&lt;/span> unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtilTest&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">MyUtil._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> s &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">11&lt;/span> conv &lt;span style="color:#48b685">&amp;#34;cm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//调用这个对象的时候打印:11cm,仅作示例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>隐式转换的时候会创建短生命周期的垃圾隐式对象,增加GC压力,而值对象可以解决这个问题(将隐式类示例上的调用自动改写成扩展方法),将隐式类继承&lt;code>AnyVal&lt;/code>,如上面的例子改成:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtil&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Wrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>i&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">AnyVal&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> conv&lt;span style="color:#5bc4bf">(&lt;/span>unit&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> i&lt;span style="color:#5bc4bf">.&lt;/span>toString &lt;span style="color:#5bc4bf">+&lt;/span> unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>值类型还可以用在其他简单值/原始值已经够用,但是希望使用类型进行更好抽象的地方:最终源码中显示是类/示例,字节码级别上是基础类型&lt;/li>
&lt;li>自定义字符串插值器: 定义一个隐式类,主构造器接受一个&lt;code>StringContext&lt;/code>类型的参数,定义方法&lt;code>name(args: Any*):StringBuilder&lt;/code>,那么当程序作用域包含该隐式类的时候,对&lt;code>name&amp;quot;&amp;quot;&amp;quot;...&amp;quot;&amp;quot;&amp;quot;&lt;/code>的字符串,会自动创建&lt;code>StringContext&lt;/code>对象(其&lt;code>parts&lt;/code>方法可以获取字符串中被表达式分割的各个子字符串),传入隐式转换的的&lt;code>name(Any*)&lt;/code>方法,参数传入字符串中的各个&lt;code>${expression}&lt;/code>,处理完的&lt;code>StringBuilder&lt;/code>对象返回,然后转换成字符串. 例如一个简单的例子,所有表达式前后加上井号:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyInterpolator&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Interpolator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> context&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">StringContext&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">AnyVal&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> my&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Any*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">StringBuilder&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">StringBuilder&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>context&lt;span style="color:#5bc4bf">.&lt;/span>parts&lt;span style="color:#5bc4bf">.&lt;/span>zip&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>item &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>text&lt;span style="color:#5bc4bf">,&lt;/span> expression&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">s&amp;#34;&lt;/span>&lt;span style="color:#f99b15">$text&lt;/span>&lt;span style="color:#48b685">#&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>expression&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">#&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}).&lt;/span>mkString&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">MyInterpolator._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> name &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Leibniz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>my&lt;span style="color:#48b685">&amp;#34;&amp;#34;&amp;#34;My name is ${name}&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//调用我们自定义的插值器,返回 My name is #Leibniz#
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="第6章-函数值与闭包">第6章 函数值与闭包&lt;/h2>
&lt;ul>
&lt;li>柯里化: 一个有分组参数的函数,如&lt;code>f(a:A)(b:B):C&lt;/code>,使用&lt;code>f _&lt;/code>创建一个部分应用函数(此处类型为&lt;code>A =&amp;gt; (B =&amp;gt; C)&lt;/code>),可以用于创建可复用的临时便利函数;&lt;/li>
&lt;li>多组参数的函数,如果有单独成组的函数参数,可以不使用小括号,直接用大括号,更直观,如&lt;code>f(a:Int)(g:A=&amp;gt;B)&lt;/code>可以这样调用:&lt;code>f(1) {a =&amp;gt; xxx(a)}&lt;/code>&lt;/li>
&lt;li>用下划线代表函数值的参数时,如果无法判断类型,scala会报错,此时可以显式指定类型&lt;/li>
&lt;li>scala自动将函数名视作函数值的引用&lt;/li>
&lt;li>函数或代码块可能含有未绑定的变量,在调用前根据上下文绑定,形成闭包(closure);绑定的时候不会复制相应变量的值,实际上会绑定到变量本身,因此线程不安全&lt;/li>
&lt;/ul>
&lt;h2 id="第7章-特质">第7章 特质&lt;/h2>
&lt;ul>
&lt;li>在trait中定义并初始化的val/var变量，将会在混入了该trait的累的内部实现；定义并&lt;strong>未&lt;/strong>初始化的val/var变量被认为是抽象的,混入该trait的类需要实现他们&lt;/li>
&lt;li>类混入trait的时候,如果类没用用&lt;code>extends&lt;/code>,则第一个&lt;code>trait&lt;/code>用&lt;code>extends&lt;/code>,后面的&lt;code>trait&lt;/code>用&lt;code>with&lt;/code>;如果类已经用&lt;code>extends&lt;/code>了,那么所有&lt;code>trait&lt;/code>都用&lt;code>with&lt;/code>来混入&lt;/li>
&lt;li>混入了trait的类可以调用trait的方法, 其实例引用也可以多态为trait实例&lt;/li>
&lt;li>trait的构造器不接收任何参数&lt;/li>
&lt;li>选择性混入: 可以对没有混入trait的类的实例混入trait,即只有该实例混入了trait,该类其他实例没有,也是用&lt;code>with&lt;/code>进行混入,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> angle &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Cat&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Angle&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">Friend&lt;/span>&lt;span style="color:#ef6155">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在trait中,使用super调用的方法会触发延迟绑定(late binding),此时并非对基类方法的调用,而是转发到混入该trait的类中,如果混入了多个这样的trait(有同样父类方法,即extends自同一个trait或抽象类),那么从右向左,混入下一个trait直到混入到类, 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">abstract&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Abstract check...&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Credit...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#776e71">//并非调用父类方法,而是转发到下一个trait或类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">MoneyCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Money...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">HouseCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;House...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> app1 &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">MoneyCheck&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>app1&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//根据混入的顺序,打印 Credit...Money...Abstract check...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> app2 &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">HouseCheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>app2&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//根据混入的顺序,打印 House...Credit...Abstract check...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果基类的方法是抽象的,那么方法绑定必须推迟到某个具体的方法已知为止;同样是从右到左的顺序连接混入trait,这样可以避免方法冲突的问题&lt;/li>
&lt;/ul></description></item><item><title>Kettle Java API处理Hadoop数据</title><link>https://leibnizhu.github.io/p/Kettle-Java-API%E5%A4%84%E7%90%86Hadoop%E6%95%B0%E6%8D%AE/</link><pubDate>Tue, 15 May 2018 17:29:56 +0800</pubDate><guid>https://leibnizhu.github.io/p/Kettle-Java-API%E5%A4%84%E7%90%86Hadoop%E6%95%B0%E6%8D%AE/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Kettle-Java-API%E5%A4%84%E7%90%86Hadoop%E6%95%B0%E6%8D%AE/yyz.jpg" alt="Featured image of post Kettle Java API处理Hadoop数据" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近因为数据处理的需求, 用到Kettle进行MySQL到HDFS的数据导入,而Kettle的GUI界面导入比较繁琐,不易于复用,所以考虑其Java API.&lt;br>
但是,网上的资料实在少得可怜, 而官网的文档也仅仅给出了一个例子,而且是版本很旧的. 于是只能根据这个很旧的版本, 加上Maven仓库摸索, 再加上官方最新版API文档,慢慢摸出来.&lt;/p>
&lt;h2 id="代码清单">代码清单&lt;/h2>
&lt;p>最后的结果就是这篇文章, 废话也不想多说了,也懒得打字,就是普通的Maven项目,主要三个文件:&lt;/p>
&lt;ol>
&lt;li>&lt;code>pom.xml&lt;/code>: Kettle依赖的版本比较麻烦,这个是个坑;&lt;/li>
&lt;li>一个Java示例文件, 放了一个&lt;code>MySQL =&amp;gt; MySQL&lt;/code> 和一个 &lt;code>MySQL =&amp;gt; HDFS&lt;/code> 的例子,详见注释;&lt;/li>
&lt;li>Java里面写了一个自动读取数据源的方法, 把所有用到的数据源按下文给定的xml格式配置好,放到&lt;code>resources/db&lt;/code>下面即可被程序读取.&lt;/li>
&lt;/ol>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>├── pom.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    ├── main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   ├── java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │   └── com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │      └── turingdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │      └── kettle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │      └── demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │      └── App.java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   └── resources
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   ├── db
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   │   └── 235test.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    │   └── log4j.properties
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── turingdi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── kettle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── demo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>    └── AppTest.java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="代码">代码&lt;/h2>
&lt;h3 id="pomxml">pom.xml&lt;/h3>
&lt;p>给出核心的变量和依赖部分:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.source&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.target&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;pentaho.kettle.version&amp;gt;&lt;/span>4.1.0-stable&lt;span style="color:#5bc4bf">&amp;lt;/pentaho.kettle.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;pentaho.kettle.plugin.version&amp;gt;&lt;/span>8.0.0.4-247&lt;span style="color:#5bc4bf">&amp;lt;/pentaho.kettle.plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;snapshots&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;enabled&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/enabled&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;updatePolicy&amp;gt;&lt;/span>daily&lt;span style="color:#5bc4bf">&amp;lt;/updatePolicy&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/snapshots&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>pentaho&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>http://nexus.pentaho.org/content/groups/omni/&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho-kettle&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kettle-core&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho-kettle&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kettle-db&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>4.4.0-stable&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho-kettle&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kettle-engine&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho-kettle&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kettle-ui-swt&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>pentaho-big-data-kettle-plugins-hdfs&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>pentaho-big-data-api-hdfs&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>pentaho-big-data-impl-cluster&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!--插件所需依赖开始--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>pentaho&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>metastore&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${pentaho.kettle.plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.pentaho&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>pentaho-hadoop-shims-api&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>8.0-SNAPSHOT&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>commons-configuration&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>commons-configuration&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.9&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!--插件所需依赖结束--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.hadoop&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>hadoop-common&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>2.6.0-cdh5.9.3&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.hadoop&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>hadoop-hdfs&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>2.6.0-cdh5.9.3&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.hadoop&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>hadoop-client&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>2.6.0-cdh5.8.4&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>commons-logging&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>commons-logging&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.2&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>commons-vfs&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>commons-vfs&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>log4j&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>log4j&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.2.17&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.scannotation&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>scannotation&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.0.3&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>javassist&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javassist&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.javassist&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javassist&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.22.0-GA&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>com.turingdi&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>commonutils&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>mysql&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>mysql-connector-java&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>5.1.41&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>junit&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>junit&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>4.11&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="java的示例">Java的示例&lt;/h3>
&lt;p>包含&lt;code>MySQL =&amp;gt; MySQL&lt;/code>和&lt;code>MySQL =&amp;gt; HDFS&lt;/code> 的方法:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">com.turingdi.kettle.demo&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.turingdi.commonutils.basic.FileUtils&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.big.data.api.cluster.NamedCluster&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.big.data.impl.cluster.NamedClusterImpl&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.big.data.impl.cluster.NamedClusterManager&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.big.data.impl.cluster.NamedClusterServiceOsgiImpl&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.big.data.kettle.plugins.hdfs.trans.HadoopFileOutputMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.cluster.ClusterSchema&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.Const&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.KettleEnvironment&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.NotePadMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.database.Database&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.database.DatabaseMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.exception.KettleException&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.plugins.PluginFolder&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.plugins.StepPluginType&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.core.util.EnvUtil&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.Trans&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.TransHopMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.TransMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.step.StepMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.steps.selectvalues.SelectValuesMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.steps.tableinput.TableInputMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.steps.tableoutput.TableOutputMeta&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.di.trans.steps.textfileoutput.TextFileField&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.runtime.test.action.impl.RuntimeTestActionServiceImpl&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.pentaho.runtime.test.impl.RuntimeTesterImpl&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.DataOutputStream&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.File&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.FileOutputStream&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.IOException&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.ArrayList&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.List&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.Objects&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">App&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//存放读取到的xml字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> String&lt;span style="color:#5bc4bf">[]&lt;/span> databasesXML&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//kettle插件的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String KETTLE_PLUGIN_BASE_FOLDER &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/Users/leibnizhu/Downloads/kettle/plugins&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">main&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">[]&lt;/span> args&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> KettleException&lt;span style="color:#5bc4bf">,&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 这几句必须有, 官网例子是错的, 用来加载插件的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setProperty&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hadoop.home.dir&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepPluginType&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getPluginFolders&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> PluginFolder&lt;span style="color:#5bc4bf">(&lt;/span>KETTLE_PLUGIN_BASE_FOLDER&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EnvUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">environmentInit&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KettleEnvironment&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">init&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 加载db目录下的所有存放数据库配置的xml文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// 这个在官方例子也是没有的, 自己写的, 而且没给出xml的例子, google到的一篇博客里面的, 坑死了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String rootPath &lt;span style="color:#5bc4bf">=&lt;/span> App&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">getPath&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File dbDir &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File&lt;span style="color:#5bc4bf">(&lt;/span>rootPath&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;db&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> xmlStrings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ArrayList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>File xml &lt;span style="color:#5bc4bf">:&lt;/span> Objects&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requireNonNull&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>dbDir&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">listFiles&lt;/span>&lt;span style="color:#5bc4bf">()))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>xml&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isFile&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> xml&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;.xml&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> xmlStrings&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>FileUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ReadFile&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>xml&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAbsolutePath&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> databasesXML &lt;span style="color:#5bc4bf">=&lt;/span> xmlStrings&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> String&lt;span style="color:#5bc4bf">[&lt;/span>0&lt;span style="color:#5bc4bf">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 调用下面的方法, 创建一个复制数据库表的Transform任务
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// TransMeta transMeta = buildCopyTable(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// &amp;#34;trans&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// &amp;#34;235test&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// &amp;#34;user&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// new String[]{&amp;#34;id&amp;#34;, &amp;#34;name&amp;#34;},
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// &amp;#34;235test&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// &amp;#34;user2&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// new String[]{&amp;#34;id2&amp;#34;, &amp;#34;name2&amp;#34;}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// );
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TransMeta transMeta &lt;span style="color:#5bc4bf">=&lt;/span> buildCopyTableToHDFS&lt;span style="color:#5bc4bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;trans&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;235test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;user&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> String&lt;span style="color:#5bc4bf">[]{&lt;/span>&lt;span style="color:#48b685">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 把以上transform保存到文件, 这样可以用Spoon打开,检查下有没有问题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String fileName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/Users/leibnizhu/Desktop/test.ktr&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String xml &lt;span style="color:#5bc4bf">=&lt;/span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getXML&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DataOutputStream dos &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DataOutputStream&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> FileOutputStream&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> File&lt;span style="color:#5bc4bf">(&lt;/span>fileName&lt;span style="color:#5bc4bf">)));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dos&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">write&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>xml&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBytes&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dos&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Saved transformation to file: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> fileName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 生成SQL,用于创建表(如果不存在的话)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String sql &lt;span style="color:#5bc4bf">=&lt;/span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSQLStatementsString&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 执行以上SQL语句创建表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Database targetDatabase &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Database&lt;span style="color:#5bc4bf">(&lt;/span>transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">findDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;235test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetDatabase&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">connect&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetDatabase&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">execStatements&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sql&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 执行transformation...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Trans trans &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Trans&lt;span style="color:#5bc4bf">(&lt;/span>transMeta&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> trans&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">execute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> trans&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">waitUntilFinished&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 断开数据库连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> targetDatabase&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">disconnect&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Creates a new Transformation using input parameters such as the tablename to read from.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param transformationName The name of the transformation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param sourceDatabaseName 数据源, 对应xml里面的name字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param sourceTableName The name of the table to read from
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param sourceFields The field names we want to read from the source table
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param targetDatabaseName 复制的去向, 对应xml里面的name字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param targetTableName The name of the target table we want to write to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param targetFields The names of the fields in the target table (same number of fields as sourceFields)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return A new transformation metadata object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws KettleException In the rare case something goes wrong
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> TransMeta &lt;span style="color:#06b6ef">buildCopyTable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String transformationName&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sourceDatabaseName&lt;span style="color:#5bc4bf">,&lt;/span> String sourceTableName&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">[]&lt;/span> sourceFields&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String targetDatabaseName&lt;span style="color:#5bc4bf">,&lt;/span> String targetTableName&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">[]&lt;/span> targetFields&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throws&lt;/span> KettleException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建transformation...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> TransMeta transMeta &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TransMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>transformationName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 增加数据库连接的元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String aDatabasesXML &lt;span style="color:#5bc4bf">:&lt;/span> databasesXML&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatabaseMeta databaseMeta &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DatabaseMeta&lt;span style="color:#5bc4bf">(&lt;/span>aDatabasesXML&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>databaseMeta&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatabaseMeta sourceDBInfo &lt;span style="color:#5bc4bf">=&lt;/span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">findDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sourceDatabaseName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatabaseMeta targetDBInfo &lt;span style="color:#5bc4bf">=&lt;/span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">findDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>targetDatabaseName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 增加备注
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String note &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Reads information from table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Const&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CR&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;After that, it writes the information to table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> targetTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> targetDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotePadMeta ni &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NotePadMeta&lt;span style="color:#5bc4bf">(&lt;/span>note&lt;span style="color:#5bc4bf">,&lt;/span> 150&lt;span style="color:#5bc4bf">,&lt;/span> 10&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addNote&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ni&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建读数据库的step
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String fromStepName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;read from [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TableInputMeta tii &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TableInputMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tii&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDatabaseMeta&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sourceDBInfo&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tii&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setSQL&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;SELECT &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Const&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CR&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> String&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">join&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sourceFields&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;FROM &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepMeta fromStep &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StepMeta&lt;span style="color:#5bc4bf">(&lt;/span>fromStepName&lt;span style="color:#5bc4bf">,&lt;/span> tii&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//以下几句是给Spoon看的, 用处不大
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>150&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDraw&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDescription&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Reads information from table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addStep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>fromStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建一个修改字段名的step
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> SelectValuesMeta svi &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> SelectValuesMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//配置字段名修改的规则, 这里跟官方例子差别很大, 坑不少
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> svi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">allocate&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sourceFields&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> 0&lt;span style="color:#5bc4bf">,&lt;/span> 0&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> i &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span> i &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> sourceFields&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> i&lt;span style="color:#5bc4bf">++)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> svi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSelectName&lt;/span>&lt;span style="color:#5bc4bf">()[&lt;/span>i&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> sourceFields&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> svi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSelectRename&lt;/span>&lt;span style="color:#5bc4bf">()[&lt;/span>i&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> targetFields&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String selStepName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Rename field names&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepMeta selStep &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StepMeta&lt;span style="color:#5bc4bf">(&lt;/span>selStepName&lt;span style="color:#5bc4bf">,&lt;/span> svi&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//以下几句是给Spoon看的, 用处不大
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> selStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>350&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDraw&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDescription&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Rename field names&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addStep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>selStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立读数据库step与修改字段名step的连接,增加到transformation中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> TransHopMeta shi &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TransHopMeta&lt;span style="color:#5bc4bf">(&lt;/span>fromStep&lt;span style="color:#5bc4bf">,&lt;/span> selStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addTransHop&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>shi&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建一个输出到表的step
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String toStepName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;write to [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> targetTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TableOutputMeta toi &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TableOutputMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDatabaseMeta&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>targetDBInfo&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setTablename&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>targetTableName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setCommitSize&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>200&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setTruncateTable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setSchemaName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toi&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setTruncateTable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepMeta toStep &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StepMeta&lt;span style="color:#5bc4bf">(&lt;/span>toStepName&lt;span style="color:#5bc4bf">,&lt;/span> toi&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//以下几句是给Spoon看的, 用处不大
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> toStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>550&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDraw&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> toStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDescription&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Write information to table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> targetTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> targetDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addStep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>toStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 建立修改字段名step到输出到数据库step的连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> TransHopMeta hi &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TransHopMeta&lt;span style="color:#5bc4bf">(&lt;/span>selStep&lt;span style="color:#5bc4bf">,&lt;/span> toStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addTransHop&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hi&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> transMeta&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> KettleException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;An unexpected error occurred creating the new transformation&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> TransMeta &lt;span style="color:#06b6ef">buildCopyTableToHDFS&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String transformationName&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sourceDatabaseName&lt;span style="color:#5bc4bf">,&lt;/span> String sourceTableName&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">[]&lt;/span> sourceFields&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throws&lt;/span> KettleException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建transformation...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> TransMeta transMeta &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TransMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>transformationName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 增加数据库连接的元数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String aDatabasesXML &lt;span style="color:#5bc4bf">:&lt;/span> databasesXML&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatabaseMeta databaseMeta &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DatabaseMeta&lt;span style="color:#5bc4bf">(&lt;/span>aDatabasesXML&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>databaseMeta&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatabaseMeta sourceDBInfo &lt;span style="color:#5bc4bf">=&lt;/span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">findDatabase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sourceDatabaseName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 增加备注
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String note &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Reads information from table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Const&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CR&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;After that, it writes the information to HDFS ]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NotePadMeta ni &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NotePadMeta&lt;span style="color:#5bc4bf">(&lt;/span>note&lt;span style="color:#5bc4bf">,&lt;/span> 150&lt;span style="color:#5bc4bf">,&lt;/span> 10&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addNote&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ni&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 创建读数据库的step
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String fromStepName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;read from [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TableInputMeta tii &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TableInputMeta&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tii&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDatabaseMeta&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sourceDBInfo&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tii&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setSQL&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;SELECT &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Const&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CR&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> String&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">join&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sourceFields&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;FROM &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepMeta fromStep &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StepMeta&lt;span style="color:#5bc4bf">(&lt;/span>fromStepName&lt;span style="color:#5bc4bf">,&lt;/span> tii&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//以下几句是给Spoon看的, 用处不大
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>150&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDraw&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fromStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDescription&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Reads information from table [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceTableName &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;] on database [&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sourceDBInfo &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;]&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addStep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>fromStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NamedClusterManager clusterManager &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NamedClusterManager&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NamedCluster cluster &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NamedClusterImpl&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setStorageScheme&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hdfs&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setHdfsHost&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;bitest01&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setHdfsPort&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;8020&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;cloudera&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setHdfsUsername&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setHdfsPassword&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusterManager&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setClusterTemplate&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cluster&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// transMeta.setNamedClusterServiceOsgi();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// clusterManager.getClusterTemplate().setHdfsHost(&amp;#34;bitest01&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> HadoopFileOutputMeta hadoopOut &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HadoopFileOutputMeta&lt;span style="color:#5bc4bf">(&lt;/span>clusterManager&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// new RuntimeTestActionServiceImpl(null, null),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// new RuntimeTesterImpl(null, null, &amp;#34;test&amp;#34;));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setOutputFields&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> TextFileField&lt;span style="color:#5bc4bf">[]{});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setFilename&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hdfs://bitest01:8020/tmp/aa&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setExtension&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;txt&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setFileCompression&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;None&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setSourceConfigurationName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cloudera&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setSeparator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setFileFormat&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;UNIX&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopOut&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setEncoding&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StepMeta hadoopStep &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StepMeta&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;HDFSOutput&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> hadoopOut&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>550&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hadoopStep&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDraw&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addStep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hadoopStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TransHopMeta hhm &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TransHopMeta&lt;span style="color:#5bc4bf">(&lt;/span>fromStep&lt;span style="color:#5bc4bf">,&lt;/span> hadoopStep&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transMeta&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addTransHop&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hhm&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> transMeta&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> KettleException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;An unexpected error occurred creating the new transformation&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="存储数据库源配置的xml文件">存储数据库源配置的xml文件&lt;/h3>
&lt;p>放在&lt;code>resources/db&lt;/code>下面:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;connection&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;server&amp;gt;&lt;/span>192.168.1.*&lt;span style="color:#5bc4bf">&amp;lt;/server&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;type&amp;gt;&lt;/span>MySQL&lt;span style="color:#5bc4bf">&amp;lt;/type&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;access&amp;gt;&lt;/span>Native&lt;span style="color:#5bc4bf">&amp;lt;/access&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;database&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/database&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;port&amp;gt;&lt;/span>3306&lt;span style="color:#5bc4bf">&amp;lt;/port&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;username&amp;gt;&lt;/span>root&lt;span style="color:#5bc4bf">&amp;lt;/username&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;password&amp;gt;&lt;/span>root&lt;span style="color:#5bc4bf">&amp;lt;/password&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;servername/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;data_tablespace/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;index_tablespace/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attributes&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;code&amp;gt;&lt;/span>EXTRA_OPTION_MYSQL.defaultFetchSize&lt;span style="color:#5bc4bf">&amp;lt;/code&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>500&lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;code&amp;gt;&lt;/span>EXTRA_OPTION_MYSQL.useCursorFetch&lt;span style="color:#5bc4bf">&amp;lt;/code&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;code&amp;gt;&lt;/span>EXTRA_OPTION_MYSQL.useSSL&lt;span style="color:#5bc4bf">&amp;lt;/code&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>false&lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;code&amp;gt;&lt;/span>EXTRA_OPTION_MYSQL.useUnicode&lt;span style="color:#5bc4bf">&amp;lt;/code&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;code&amp;gt;&lt;/span>EXTRA_OPTION_MYSQL.characterEncoding&lt;span style="color:#5bc4bf">&amp;lt;/code&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attribute&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attribute&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/attributes&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/connection&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Lucene7获取所有有效文档</title><link>https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/</link><pubDate>Tue, 15 May 2018 16:38:41 +0800</pubDate><guid>https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/mikuwing.jpg" alt="Featured image of post Lucene7获取所有有效文档" />&lt;p>最近在写一个&lt;code>Vert.X+Lucene&lt;/code>的搜索引擎,为Vert.X中国论坛提供的(详见&lt;a class="link" href="https://github.com/Leibnizhu/vertXearch" target="_blank" rel="noopener"
>Github&lt;/a>),在尝试更新文档索引的时候,遇到如何获取所有有效文档的问题(未被删除索引的). 官方没有直接查询的API,在Google和Stack Overflow搜了之后没有满意的效果,网上的资源很多都是Lucene 6甚至更老的3,4版本的,有些API已经过时.&lt;br>
经过深入查阅官方API文档之后,终于找到了解决方案.&lt;br>
Lucene删除索引之后,通过&lt;code>IndexReader.document()&lt;/code>还是可以查到的,因此当有文档被删除后,不能直接用这个来查; 而&lt;code>MultiFields.getLiveDocs()&lt;/code>在没有删除文档时返回&lt;code>null&lt;/code>,有删除过文档时返回一个&lt;code>Bits&lt;/code>对象,这里面可以通过&lt;code>get()&lt;/code>方法,获取每个documentID是否有效(未被删除).&lt;br>
因此可以这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> indexDirectory &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">FSDirectory&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>open&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Paths&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>indexDirectoryPath&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">var&lt;/span> reader&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">DirectoryReader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">DirectoryReader&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>open&lt;span style="color:#5bc4bf">(&lt;/span>indexDirectory&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> indexSearcher &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">IndexSearcher&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 获取所有有效文档
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> getAllDocuments&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Document&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//获取有哪些存活的文档
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> liveDocs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">MultiFields&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getLiveDocs&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>liveDocs &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//liveDocs非null时有删除过文件,遍历所有文档ID,liveDocs.get为true的话就是存活的,要过滤存活的文档对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">0&lt;/span> until reader&lt;span style="color:#5bc4bf">.&lt;/span>maxDoc&lt;span style="color:#5bc4bf">()).&lt;/span>filter&lt;span style="color:#5bc4bf">(&lt;/span>liveDocs&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">.&lt;/span>document&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)).&lt;/span>toList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//没有删除过文件的时候liveDocs为null,此时只能直接通过IndexSearcher去查询
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> topDocsToDocumentList&lt;span style="color:#5bc4bf">(&lt;/span>indexSearcher&lt;span style="color:#5bc4bf">.&lt;/span>search&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">MatchAllDocsQuery&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">MAX_VALUE&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> topDocsToDocumentList&lt;span style="color:#5bc4bf">(&lt;/span>topDocs&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">TopDocs&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Document&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> topDocs&lt;span style="color:#5bc4bf">.&lt;/span>scoreDocs&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getDocument&lt;span style="color:#5bc4bf">).&lt;/span>toList
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kerberos集群的Sqoop,Hive,HBase,Kafka,Maxwell使用</title><link>https://leibnizhu.github.io/p/Kerberos%E9%9B%86%E7%BE%A4%E7%9A%84SqoopHiveHBaseKafkaMaxwell%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 07 Mar 2018 16:23:56 +0800</pubDate><guid>https://leibnizhu.github.io/p/Kerberos%E9%9B%86%E7%BE%A4%E7%9A%84SqoopHiveHBaseKafkaMaxwell%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Kerberos%E9%9B%86%E7%BE%A4%E7%9A%84SqoopHiveHBaseKafkaMaxwell%E4%BD%BF%E7%94%A8/flower.jpg" alt="Featured image of post Kerberos集群的Sqoop,Hive,HBase,Kafka,Maxwell使用" />&lt;p>介绍在部署了Kerberos的安全Hadoop集群中, Sqoop,Hive,HBase,Kafka,Maxwell使用方法.&lt;/p>
&lt;h2 id="sqoop使用">Sqoop使用&lt;/h2>
&lt;p>配置好Kerberos之后, sqoop不能直接使用, 需要进行一些配置:&lt;/p>
&lt;ol>
&lt;li>分配sqoop的组, 执行&lt;code>usermod -a -G hdfs sqoop&lt;/code>加入到hdfs组, 使用&lt;code>groups sqoop&lt;/code>确认执行成功;&lt;/li>
&lt;li>进入Hue的用户管理界面, 新增sqoop用户, 在hdfs用户组中;&lt;/li>
&lt;li>在Hue的HDFS文件管理页面中, 创建/user/sqoop目录, 从属于sqoop:hdfs用户/用户组;&lt;/li>
&lt;li>进入cdh1, 创建Kerberos用户, 名为sqoop, 可以导出keytab;&lt;/li>
&lt;li>使用kinit命令切换到sqoop用户(在脚本中可以使用keytab切换)&lt;/li>
&lt;li>执行sqoop命令&lt;/li>
&lt;/ol>
&lt;h2 id="spark访问hbase">Spark访问HBase&lt;/h2>
&lt;ol>
&lt;li>进入cdh1, 创建Kerberos用户, 名为hbase; 导出keytab, 名为hbase.keytab, 保存到本地;&lt;/li>
&lt;li>下载krb5.conf到本地.&lt;/li>
&lt;li>创建测试类, 并执行, 代码如下:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*HBase测试*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">KerberosHBaseTest&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> main&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkHosts &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;cdh2:2181,cdh3:2181,cdh4:2181&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">System&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setProperty&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;java.security.krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//krb5.conf本地路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> sparkConf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SparkConf&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>setAppName&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;KerberosHBaseTest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>setMaster&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> sc &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SparkContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sparkConf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//配置HBase连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> hbaseConfig &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">HBaseConfiguration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>create&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase.zookeeper.quorum&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> zkHosts&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;zookeeper.znode.parent&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/hbase&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//设置集群和hbase的安全模式为kerberos
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hadoop.security.authentication&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;kerberos&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase.security.authentication&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;kerberos&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase.master.kerberos.principal&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;hbase/_HOST@TURINGDI.COM&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//没有似乎也行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hbaseConfig&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase.regionserver.kerberos.principal&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;hbase/_HOST@TURINGDI.COM&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//必须有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">UserGroupInformation&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setConfiguration&lt;span style="color:#5bc4bf">(&lt;/span>hbaseConfig&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">UserGroupInformation&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>loginUserFromKeytab&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/hbase.keytab&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//Kerberos用户名, keytab本地路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//设置广播变量，解决序列化问题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//HBase配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> broadcastHBaseConf &lt;span style="color:#815ba4">=&lt;/span> sc&lt;span style="color:#5bc4bf">.&lt;/span>broadcast&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SerializableWritable&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hbaseConfig&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//HBase连接工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> hbaseConnection &lt;span style="color:#815ba4">=&lt;/span> sc&lt;span style="color:#5bc4bf">.&lt;/span>broadcast&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">HBaseConnection&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>broadcastHBaseConf&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> result &lt;span style="color:#815ba4">=&lt;/span> scanByStartTimestamp&lt;span style="color:#5bc4bf">(&lt;/span>hbaseConnection&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;t1&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#f99b15">0L&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>r &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">ConvertService&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>convertResultToHBaseRow&lt;span style="color:#5bc4bf">(&lt;/span>r&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sc&lt;span style="color:#5bc4bf">.&lt;/span>stop&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 从HBase中scan指定表的所有列，从指定的时间戳开始
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param hBaseConnection HBase连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param tableName 表名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param starTimestamp 开始scan的时间戳，从该时间戳scan到当前时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return scan的结果，Result的List
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> scanByStartTimestamp&lt;span style="color:#5bc4bf">(&lt;/span>hBaseConnection&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Broadcast&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">HBaseConnection&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span> tableName&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> starTimestamp&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Long&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">ArrayBuffer&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Result&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> resultList &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ArrayBuffer&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Result&lt;/span>&lt;span style="color:#5bc4bf">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Try&lt;/span>&lt;span style="color:#5bc4bf">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> scan &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Scan&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scan&lt;span style="color:#5bc4bf">.&lt;/span>setTimeRange&lt;span style="color:#5bc4bf">(&lt;/span>starTimestamp&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">System&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>currentTimeMillis&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 获取表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> table &lt;span style="color:#815ba4">=&lt;/span> hBaseConnection&lt;span style="color:#5bc4bf">.&lt;/span>value&lt;span style="color:#5bc4bf">.&lt;/span>connection&lt;span style="color:#5bc4bf">.&lt;/span>getTable&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">TableName&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>valueOf&lt;span style="color:#5bc4bf">(&lt;/span>tableName&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table&lt;span style="color:#5bc4bf">.&lt;/span>getScanner&lt;span style="color:#5bc4bf">(&lt;/span>scan&lt;span style="color:#5bc4bf">).&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>resultList&lt;span style="color:#5bc4bf">.+=)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}).&lt;/span>recover&lt;span style="color:#5bc4bf">({&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> e&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Throwable&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span> log&lt;span style="color:#5bc4bf">.&lt;/span>error&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;从HBase表{}中按时间戳({}-&amp;gt;NOW)scan时抛出异常:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>tableName&lt;span style="color:#5bc4bf">,&lt;/span> starTimestamp&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>getMessage&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resultList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="spark访问hive">Spark访问Hive&lt;/h2>
&lt;ol>
&lt;li>Hive可以沿用hbase的Kerberos用户, 也可以新建一个Hive用户及其对应keytab文件.&lt;/li>
&lt;li>本地测试请将集群的&lt;code>hive-site.xml&lt;/code>导出并保存在项目的&lt;code>src/main/resources/&lt;/code>目录下;&lt;/li>
&lt;li>编写Spark测试程序:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*Hive测试*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">KerberosHiveTest&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> main&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">System&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setProperty&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;java.security.krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//krb5.conf本地路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> sparkConf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SparkConf&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>setAppName&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;KerberosHiveTest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>setMaster&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> sc &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SparkContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sparkConf&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> config &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">HBaseConfiguration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>create&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config&lt;span style="color:#5bc4bf">.&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hadoop.security.authentication&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;kerberos&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//必须有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">UserGroupInformation&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setConfiguration&lt;span style="color:#5bc4bf">(&lt;/span>config&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">UserGroupInformation&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>loginUserFromKeytab&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hbase&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/hbase.keytab&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//Kerberos用户名, keytab本地路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> sparkSession &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">SparkSession&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>builder&lt;span style="color:#5bc4bf">.&lt;/span>master&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>appName&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;KerberosHiveTest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>enableHiveSupport&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>config&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;yarn.resourcemanager.principal&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;rm/_HOST@TURINGDI.COM&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//必须有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// .config(&amp;#34;spark.yarn.keytab&amp;#34;, &amp;#34;/path/to/hbase.keytab&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// .config(&amp;#34;spark.yarn.principal&amp;#34;, &amp;#34;hbase@TURINGDI.COM&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">.&lt;/span>getOrCreate&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> dataFrame &lt;span style="color:#815ba4">=&lt;/span> sparkSession&lt;span style="color:#5bc4bf">.&lt;/span>sql&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;select * from hivetest2&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataFrame&lt;span style="color:#5bc4bf">.&lt;/span>rdd&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>row &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>row&lt;span style="color:#5bc4bf">.&lt;/span>getInt&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; -&amp;gt; &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> row&lt;span style="color:#5bc4bf">.&lt;/span>getString&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sc&lt;span style="color:#5bc4bf">.&lt;/span>stop&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="spark访问kafka">Spark访问Kafka&lt;/h2>
&lt;ol>
&lt;li>进入Cloudera Manager的Kafka配置页面, 搜索&amp;rsquo;Inter Broker Protocol&amp;rsquo;, 更改为&amp;rsquo;SASL_PLAINTEXT';&lt;/li>
&lt;li>重启Kafka配置;&lt;/li>
&lt;li>进入cdh1, 创建Kerberos用户, 名为kafka; 导出keytab, 名为kafka.keytab, 并保存到本地(测试用);&lt;/li>
&lt;li>cdh1中新建一个jaas.conf配置文件, 并复制到本地(注意修改keyTab), 内容如下:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>KafkaClient &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> com.sun.security.auth.module.Krb5LoginModule required
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">doNotPrompt&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">useTicketCache&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">useKeyTab&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">principal&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;kafka@TURINGDI.COM&amp;#34;&lt;/span> &lt;span style="color:#776e71">#根据实际修改&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">serviceName&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;kafka&amp;#34;&lt;/span> &lt;span style="color:#776e71">## 固定&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">client&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">keyTab&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;/path/to/kafka.keytab&amp;#34;&lt;/span>; &lt;span style="color:#776e71">## keytab路径,节点和本地按实际路径填写&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>cdh1中新建一个kafka.properties文件, 内容如下:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>security.protocol=SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sasl.kerberos.service.name=kafka
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sasl.mechanism=GSSAPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>security.inter.broker.protocol=SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>编写Spark程序进行测试:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">KerberosKafkaTest&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> main&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkHosts &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;cdh2:2181,cdh3:2181,cdh4:2181&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> kafkaBrokers &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;cdh2:9092,cdh3:9092,cdh4:9092&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> topics &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;maxwell&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">System&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setProperty&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;java.security.krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/krb5.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//本地krb5.conf路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">System&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>setProperty&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;java.security.auth.login.config&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;/path/to/jaas.conf&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#776e71">//本地jaas.conf路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// 创建流处理上下文，并以启动参数指定的秒数为时间间隔做一次批处理。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> sparkConf &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">SparkConf&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>setAppName&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;KerberosKafkaTest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>set&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;spark.streaming.kafka.consumer.poll.ms&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">KAFKA_CONSUMER_POLL_MS&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>setMaster&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> ssc &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">StreamingContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sparkConf&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seconds&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">10&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 配置并创建Kafka输入流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// 如果zookeeper没有offset值或offset值超出范围，就给个初始的offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// 有earliest、largest可选，分别表示给当前最小的offset、当前最大的offset。默认largest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> kafkaParams &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;auto.offset.reset&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;earliest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;bootstrap.servers&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> kafkaBrokers&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;testGroup&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;enable.auto.commit&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">java.lang.Boolean&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> &lt;span style="color:#776e71">//禁用自动提交Offset，否则可能没正常消费完就提交了，造成数据错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#48b685">&amp;#34;key.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;value.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;sasl.kerberos.service.name&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;kafka&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#776e71">//必须有
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#48b685">&amp;#34;security.protocol&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;SASL_PLAINTEXT&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//与Kafka配置一致
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> kafkaStream &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">KafkaUtils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createDirectStream&lt;span style="color:#5bc4bf">(&lt;/span>ssc&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">PreferConsistent&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ConsumerStrategies&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Subscribe&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kafkaStream&lt;span style="color:#5bc4bf">.&lt;/span>foreachRDD&lt;span style="color:#5bc4bf">(&lt;/span>rdd &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>info&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;接收到{}条Kafka消息&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> rdd&lt;span style="color:#5bc4bf">.&lt;/span>count&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rdd&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>message &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;partition=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> message&lt;span style="color:#5bc4bf">.&lt;/span>partition &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;, value=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> message&lt;span style="color:#5bc4bf">.&lt;/span>value &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;, offset=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> message&lt;span style="color:#5bc4bf">.&lt;/span>offset&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssc&lt;span style="color:#5bc4bf">.&lt;/span>start&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssc&lt;span style="color:#5bc4bf">.&lt;/span>awaitTermination&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>kafka自带的命令, 如kafka-console-consumer, kafka-topics还不能使用, 若要使用, 需要先执行:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">KAFKA_OPTS&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;-Djava.security.krb5.conf=/etc/krb5.conf -Djava.security.auth.login.config=/path/to/jaas.conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意修改其中的jass.conf路径, 并确保其中配置的keytab存在; 再执行相应的kafka命令.&lt;br>
如果觉得麻烦, 也可以编辑&lt;code>/opt/cloudera/parcels/KAFKA-3.0.0-1.3.0.0.p0.40/lib/kafka/bin/kafka-run-class.sh&lt;/code>, 在&lt;code>exec $JAVA&lt;/code>后面增加:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-Djava.security.krb5.conf&lt;span style="color:#5bc4bf">=&lt;/span>/etc/krb5.conf -Djava.security.auth.login.config&lt;span style="color:#5bc4bf">=&lt;/span>/root/jaas.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="maxwell配置">Maxwell配置&lt;/h2>
&lt;ol>
&lt;li>编辑${MAXWELL_HOME}/bin/maxwell, 在文件尾部附件的&lt;code>exec $JAVA $JAVA_OPTS&lt;/code>后面增加:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-Djava.security.krb5.conf&lt;span style="color:#5bc4bf">=&lt;/span>/etc/krb5.conf -Djava.security.auth.login.config&lt;span style="color:#5bc4bf">=&lt;/span>/root/jaas.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>编辑一个config.properties文件, 内容如下:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>kafka.security.protocol=SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kafka.sasl.kerberos.service.name=kafka
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kafka.sasl.mechanism=GSSAPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>security.inter.broker.protocol=SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sasl.mechanism.inter.broker.protocol=PLAIN
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>在maxwell启动命令中增加参数:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>--config /path/to/config.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kerberos部署,配置与基础使用</title><link>https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 07 Mar 2018 16:23:33 +0800</pubDate><guid>https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/room.jpg" alt="Featured image of post Kerberos部署,配置与基础使用" />&lt;p>下文以本地测试集群为例, 4节点(cdh1-4), cdh1为NameNode, cdh2-4为DataNode.&lt;/p>
&lt;h2 id="基础概念">基础概念&lt;/h2>
&lt;p>Kerberos principal用于在kerberos加密系统中标记一个唯一的身份。&lt;br>
kerberos为kerberos principal分配tickets使其可以访问由kerberos加密的hadoop服务。&lt;br>
对于hadoop，principals的格式为username/fully.qualified.domain.name@YOUR-REALM.COM.&lt;br>
keytab是包含principals和加密principal key的文件。&lt;br>
keytab文件对于每个host是唯一的，因为key中包含hostname。keytab文件用于不需要人工交互和保存纯文本密码，实现到kerberos上验证一个主机上的principal。&lt;br>
因为服务器上可以访问keytab文件即可以以principal的身份通过kerberos的认证，所以，keytab文件应该被妥善保存，应该只有少数的用户可以访问。&lt;/p>
&lt;h2 id="kdc服务安装及配置">KDC服务安装及配置&lt;/h2>
&lt;h3 id="安装kdc服务">安装KDC服务&lt;/h3>
&lt;p>选择NameNode节点(cdh1)安装KDC服务, 执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum -y install krb5-server krb5-libs krb5-auth-dialog krb5-workstation openldap-clients
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他节点(cdh2-4)只安装Kerberos客户端, 执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum -y install krb5-libs krb5-workstation
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置kdc服务">配置KDC服务&lt;/h3>
&lt;p>1.编辑/etc/krb5.conf:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">## Configuration snippets may be placed in this directory as well&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>includedir /etc/krb5.conf.d/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>logging&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">default&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> FILE:/var/log/krb5libs.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">kdc&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> FILE:/var/log/krb5kdc.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">admin_server&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> FILE:/var/log/kadmind.log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>libdefaults&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">dns_lookup_realm&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">dns_lookup_kdc&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">ticket_lifetime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> 24h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">renew_lifetime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> 7d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">forwardable&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#rdns = false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">default_realm&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> TURINGDI.COM &lt;span style="color:#776e71">#随意定义一个域&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#default_ccache_name = KEYRING:persistent:%{uid}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>realms&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#与上面default_realm一致, 配置KDC服务所在的服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TURINGDI.COM &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">kdc&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> cdh1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">admin_server&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> cdh1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>domain_realm&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.turingdi.com &lt;span style="color:#5bc4bf">=&lt;/span> TURINGDI.COM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>turingdi.com &lt;span style="color:#5bc4bf">=&lt;/span> TURINGDI.COM
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.将/etc/krb5.conf复制到每个节点的/etc/目录下.&lt;br>
3.修改/var/kerberos/krb5kdc/kadm5.acl, 配置用户名包含/admin的用户都是管理员用户:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>*/admin@TURINGDI.COM *
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4.修改修改/var/kerberos/krb5kdc/kdc.conf, 配置令牌的生命周期, 并设置默认允许重新生成令牌:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>kdcdefaults&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">kdc_ports&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#f99b15">88&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">kdc_tcp_ports&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#f99b15">88&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>realms&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TURINGDI.COM &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#master_key_type = aes256-cts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">max_renewable_life&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span> 7d 0h 0m 0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">default_principal_flags&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> +renewable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">acl_file&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> /var/kerberos/krb5kdc/kadm5.acl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">dict_file&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> /usr/share/dict/words
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">admin_keytab&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> /var/kerberos/krb5kdc/kadm5.keytab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">supported_enctypes&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> aes256-cts:normal aes128-cts:normal des3-hmac-sha1:normal arcfour-hmac:normal camellia256-cts:normal camellia128-cts:normal des-hmac-sha1:normal des-cbc-md5:normal des-cbc-crc:normal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建kerberos数据库">创建Kerberos数据库&lt;/h3>
&lt;p>在cdh1执行以下命令, 注意域名:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kdb5_util create –r TURINGDI.COM -s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按提示设置密码并重复密码.&lt;/p>
&lt;h3 id="创建kerberos的管理账号">创建Kerberos的管理账号&lt;/h3>
&lt;p>在cdh1执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kadmin.local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依次输入:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>addprinc admin/admin@TURINGDI.COM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">## 按提示设置管理账号的密码并重复密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置服务自启动">配置服务自启动&lt;/h3>
&lt;p>在cdh1执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chkconfig krb5kdc on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hkconfig kadmin on
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service krb5kdc start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service kadmin start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后尝试登陆Kerberos的管理员账号:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kinit admin/admin@TURINGDI.COM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">## 3. 输入刚才设定的管理账号密码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>klist
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该会输出类似:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Ticket cache: FILE:/tmp/krb5cc_0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Default principal: admin/admin@TURINGDI.COM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Valid starting Expires Service principal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2018-03-06T16:48:23 2018-03-07T16:48:23 krbtgt/TURINGDI.COM@TURINGDI.COM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renew &lt;span style="color:#815ba4">until&lt;/span> 2018-03-13T16:48:23
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即配置成功.&lt;/p>
&lt;h2 id="cdh集群启用kerberos">CDH集群启用Kerberos&lt;/h2>
&lt;ol>
&lt;li>进入Cloudera Manager的“管理”-&amp;gt; “安全”界面:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/security.png"
width="1544"
height="360"
srcset="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/security_huf4677ec2483774f32c9e9eb7c2f66152_14138_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/security_huf4677ec2483774f32c9e9eb7c2f66152_14138_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="428"
data-flex-basis="1029px"
>&lt;/li>
&lt;li>点击&amp;quot;启用Kerberos&amp;quot;按钮, 确保列出的所有检查项都已完成并勾选, 点击&amp;quot;继续&amp;quot;按钮:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/keberosList.png"
width="1268"
height="926"
srcset="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/keberosList_hud19fe07c80291333b2cbcc5eb0726cd4_22242_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/keberosList_hud19fe07c80291333b2cbcc5eb0726cd4_22242_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="328px"
>&lt;/li>
&lt;li>配置相关的KDC信息，包括类型、KDC服务器、KDC Realm、加密类型以及待创建的Service Principal（hdfs，yarn,，hbase，hive等）的更新生命期等, 与/etc/krb5.conf的配置一致, 点击&amp;quot;继续&amp;quot;按钮.&lt;/li>
&lt;li>取消勾选&amp;quot;通过Cloudera Manager管理krb5.conf&amp;quot;, 点击&amp;quot;继续&amp;quot;按钮.&lt;/li>
&lt;li>输入Cloudera Manager的Kerbers管理员账号，必须和之前创建的账号一致，点击&amp;quot;继续&amp;quot;.&lt;/li>
&lt;li>最后点击&amp;quot;继续&amp;quot;, 勾选重启集群, 点击&amp;quot;继续&amp;quot;按钮, 等待配置重启集群.&lt;/li>
&lt;/ol>
&lt;h2 id="aes-256加密与jce">AES-256加密与JCE&lt;/h2>
&lt;p>对于使用centos5.6及以上的系统，默认使用AES-256来加密的。这就需要集群中的所有节点上安装JCE.&lt;br>
打开&lt;a class="link" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener"
>http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a>, 下载jdk对应的JCE文件.&lt;br>
解压后的文件放入&lt;code>${JAVA_HOME}/jre/lib/security/&lt;/code>中.&lt;/p>
&lt;h2 id="kerberos的基础使用">Kerberos的基础使用&lt;/h2>
&lt;h3 id="yarn配置">Yarn配置&lt;/h3>
&lt;p>打开Cloudera Manager的Yarn配置页面, 搜索min.user, 修改为0, 然后按提示重启Yarn.&lt;br>
使用Kerberos需要新建一些用户, 其id可能小于1000, 使用Yarn的默认配置可能会导致一些用户不能提交Yarn任务.&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/yarn.png"
width="1880"
height="1048"
srcset="https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/yarn_hu8c2909963a12b977c7fae31cbd96c112_53756_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Kerberos%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/yarn_hu8c2909963a12b977c7fae31cbd96c112_53756_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;h3 id="导出keytab">导出keytab&lt;/h3>
&lt;p>进入cdh1, 输入&lt;code>kadmin.local&lt;/code>, 输入以下命令:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>xst -k /path/to/*.keytab -norandkey &amp;lt;principal&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中principal为需要导出keytab的用户名, 如hbase/cdh2, 注意-norandkey参数不可缺少, 否则可能会导致重新生成密码, 导致keytab失效.&lt;br>
导出的keytab的效用等同账号密码, 请注意妥善保管.&lt;/p>
&lt;h3 id="以某个kerberos用户登录">以某个Kerberos用户登录&lt;/h3>
&lt;p>两种方法:&lt;/p>
&lt;ol>
&lt;li>&lt;code>kinit 用户名@域名&lt;/code>, 输入密码;&lt;/li>
&lt;li>&lt;code>kinit 用户名@域名 -k -t 对应keytab文件&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>后者无需输入密码, 适合在脚本中使用.&lt;br>
一些组件对Kerberos的令牌有限制, 需要登录对应用户后才能使用, 包括HDFS的文件访问控制, 需要在Kerberos中建立对应的用户.&lt;/p>
&lt;h3 id="创建kerberos用户">创建Kerberos用户&lt;/h3>
&lt;p>前面已经使用过了, 进入cdh1, 输入&lt;code>kadmin.local&lt;/code>, 输入以下命令:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>addprinc 用户名@域名
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">## 按提示设置管理账号的密码并重复密码&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Sentry部署,配置与使用</title><link>https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 07 Mar 2018 16:23:22 +0800</pubDate><guid>https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/summer.jpg" alt="Featured image of post Sentry部署,配置与使用" />&lt;p>最近在CDH集群部署Sentry和Kerberos遇到了不少坑, 把过程总结一下, 都放上来吧.&lt;/p>
&lt;h2 id="sentry组件安装">Sentry组件安装&lt;/h2>
&lt;p>进入Cloudera Manager页面, 点击集群名右边的倒三角按钮, 选择&amp;quot;添加服务&amp;quot;:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/add.png"
width="844"
height="478"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/add_huc0b99d23dde631907b537bf95a0319d0_11156_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/add_huc0b99d23dde631907b537bf95a0319d0_11156_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;br>
选择Sentry组件, 点击&amp;quot;继续&amp;quot;:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addSentry.png"
width="2422"
height="530"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addSentry_hu71bcaa3408fb3e02ca5f307a4516805a_48368_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addSentry_hu71bcaa3408fb3e02ca5f307a4516805a_48368_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="456"
data-flex-basis="1096px"
>&lt;br>
选择集群主节点作为Sentry Server, 选择所有节点为Gateway, 然后点击&amp;quot;继续&amp;quot;:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/selectServer.png"
width="1596"
height="468"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/selectServer_hu1561b49df4de1a4512187ef712b567b8_29750_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/selectServer_hu1561b49df4de1a4512187ef712b567b8_29750_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="341"
data-flex-basis="818px"
>&lt;br>
在集群元数据MySQL中执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">create&lt;/span> &lt;span style="color:#815ba4">database&lt;/span> sentry &lt;span style="color:#815ba4">default&lt;/span> character &lt;span style="color:#815ba4">set&lt;/span> utf8 &lt;span style="color:#815ba4">default&lt;/span> &lt;span style="color:#815ba4">collate&lt;/span> utf8_general_ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">grant&lt;/span> &lt;span style="color:#815ba4">all&lt;/span> &lt;span style="color:#815ba4">on&lt;/span> sentry.&lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#815ba4">to&lt;/span> &lt;span style="color:#48b685">&amp;#39;sentry&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">@&lt;/span>&lt;span style="color:#48b685">&amp;#39;%&amp;#39;&lt;/span> identified &lt;span style="color:#815ba4">by&lt;/span> &lt;span style="color:#48b685">&amp;#39;sentrypassword&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建Sentry所需的数据库, 然后在Sentry安装页面中填上MySQL的地址账号密码, 点击继续, 等待安装和首次启动完毕.&lt;/p>
&lt;h2 id="sentry及相关组件配置">Sentry及相关组件配置&lt;/h2>
&lt;h3 id="hue配置">Hue配置&lt;/h3>
&lt;p>进入Hue配置, 找到&amp;quot;Sentry 服务&amp;quot;, 选择Sentry:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHue.png"
width="970"
height="160"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHue_huddb9b871f0d068303146905e0f4d8291_3928_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHue_huddb9b871f0d068303146905e0f4d8291_3928_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="606"
data-flex-basis="1455px"
>&lt;/p>
&lt;h2 id="hive配置">Hive配置&lt;/h2>
&lt;p>进入Hive配置, 找到&amp;quot;Sentry 服务&amp;quot;, 选择Sentry:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive1.png"
width="946"
height="170"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive1_hu641b9b64e8f2f3de50783ed177ccf2c9_4084_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive1_hu641b9b64e8f2f3de50783ed177ccf2c9_4084_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="556"
data-flex-basis="1335px"
>&lt;br>
找到&amp;quot;HiveServer2 启用模拟&amp;quot;, 取消勾选:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive2.png"
width="1136"
height="128"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive2_hu3da2be25e9f7490b486730954d6f40b5_6992_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive2_hu3da2be25e9f7490b486730954d6f40b5_6992_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="887"
data-flex-basis="2130px"
>&lt;br>
找到&amp;quot;sentry-site.xml 的 Hive 服务高级配置代码段（安全阀）&amp;quot;, 增加&lt;code>sentry.hive.testing.mode&lt;/code>属性, 值为&lt;code>true&lt;/code>:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive3.png"
width="1558"
height="418"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive3_hu311c356bdaa4e60a0f13ab6a6457bb33_10980_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHive3_hu311c356bdaa4e60a0f13ab6a6457bb33_10980_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="372"
data-flex-basis="894px"
>&lt;/p>
&lt;h3 id="impala配置">Impala配置&lt;/h3>
&lt;p>注: 需要确认集群每个节点都安装了Impala Daemon服务;如果Impala启动时提示cannot read or execute the parent directory of dfs.domain.socket.path, 则HDFS配置的dfs.client.read.shortcircuit勾选上, 并创建dfs.domain.socket.path的目录.&lt;br>
进入Impala配置, 找到&amp;quot;Sentry 服务&amp;quot;, 选择Sentry:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setImpala.png"
width="1008"
height="180"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setImpala_hu51c1747fd172fc43081df8420f271252_4268_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setImpala_hu51c1747fd172fc43081df8420f271252_4268_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="560"
data-flex-basis="1344px"
>&lt;/p>
&lt;h3 id="hdfs配置">HDFS配置&lt;/h3>
&lt;p>进入HDFS配置, 找到&amp;quot;启用访问控制列表 dfs.namenode.acls.enabled&amp;quot;, 勾选:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHdfs.png"
width="1032"
height="114"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHdfs_hu3b0e990228748f4b3a91fa73898a15ec_4978_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/setHdfs_hu3b0e990228748f4b3a91fa73898a15ec_4978_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="905"
data-flex-basis="2172px"
>&lt;/p>
&lt;h3 id="重启集群">重启集群&lt;/h3>
&lt;p>Cloudera Manager会提示过期配置需要重启组件, 点击黄色圆形箭头, 点击&amp;quot;重启过时服务&amp;quot;, 并等待重启完成:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/change.png"
width="742"
height="1202"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/change_hudac6d6a8132b5ae7cce3acf822283987_27474_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/change_hudac6d6a8132b5ae7cce3acf822283987_27474_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="148px"
>&lt;/p>
&lt;h2 id="hue用户权限配置">Hue用户权限配置&lt;/h2>
&lt;h3 id="前提">前提&lt;/h3>
&lt;p>Hue的用户权限体系是: 每个用户属于一个或多个组, 每个组可以配置其Hue页面访问权限及Hive/Solr/HDFS数据访问权限, 数据的访问权限由角色定义, 而用户组和角色之间是多对多关系.&lt;br>
Hue使用Sentry进行权限管理之后, 要求登录Hue的用户及其组需要在Sentry Server节点(以正式环境为例, 即gs01节点)Linux系统中存在对应的用户和组, 否则无法进行权限控制.&lt;br>
目前已经在Hue创建了一个hdfs用户组(拥有最高权限), 包含用户admin及hdfs, 两者在gs01节点Linux系统中均存在. hdfs用户的存在主要考虑到Spark程序通过hue的oozie工作流提交时, 保证其执行权限.&lt;br>
下文假定需要建立一个用户组hiveselect和用户hive1, 允许登录, 拥有部分hive表的select权限.&lt;/p>
&lt;h3 id="创建linux用户">创建Linux用户&lt;/h3>
&lt;p>ssh登录gs01节点, 执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>groupadd hiveselect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>useradd -f hiveselect hive1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>P.S. 上面命令建立的用户是没有密码的, 需要密码或其他选项的请自行添加参数.&lt;/p>
&lt;h3 id="创建hue用户">创建Hue用户&lt;/h3>
&lt;p>使用admin或hdfs用户登录Hue, 点击右上角用户名, 选择&amp;quot;Manage users&amp;quot;:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser.png"
width="446"
height="324"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser_hu504f2689fd0a898237e09ec7be11f7a8_6242_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser_hu504f2689fd0a898237e09ec7be11f7a8_6242_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;br>
点击&amp;quot;Group&amp;quot;选项卡, 点击&amp;quot;Add Group&amp;quot;按钮, &amp;ldquo;Name&amp;quot;填Linux的组名&amp;quot;hiveselect&amp;rdquo;, &amp;ldquo;members&amp;quot;为该组用户, 可以后期选择, &amp;ldquo;permissions&amp;quot;是该组用户的Hue页面访问权限, 其中&amp;quot;beeswax.access:Launch this application(2)&amp;ldquo;必选; 如果需要hive查询, 则需要选择&amp;quot;metadata.access:Launch this application(23)&amp;ldquo;和&amp;quot;metastore.access:Launch this application(12)&amp;rdquo;, 其他组件请根据具体需求而勾选:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup1.png"
width="2058"
height="426"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup1_hu0e94cd056a87e61551acccec8e8c4a1b_19824_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup1_hu0e94cd056a87e61551acccec8e8c4a1b_19824_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="483"
data-flex-basis="1159px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup2.png"
width="1630"
height="1484"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup2_hu0201b2a533c6dc3c455a702c91ef4dfa_32918_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addGroup2_hu0201b2a533c6dc3c455a702c91ef4dfa_32918_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;br>
然后点击&amp;quot;Add group&amp;quot;按钮增加组.&lt;/p>
&lt;p>随后点击&amp;quot;Users&amp;quot;选项卡, 点击&amp;quot;Add user&amp;quot;按钮, Step 1填用户名(与Linux用户名一致)和Hue登录密码, Step 2选择所属用户组为&amp;quot;hiveselect&amp;rdquo;(与Linux用户组一致), 最后点击&amp;quot;Add user&amp;quot;按钮:
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser1.png"
width="2002"
height="342"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser1_hu53755ed6163210200dadcf90ac68d272_13536_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser1_hu53755ed6163210200dadcf90ac68d272_13536_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="585"
data-flex-basis="1404px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser2.png"
width="1138"
height="592"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser2_huafb58769bb3a4a402249e03fe66bedde_16000_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser2_huafb58769bb3a4a402249e03fe66bedde_16000_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser3.png"
width="1134"
height="970"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser3_hu1a14d567fa49eb4b36fbe4d2e0688003_17858_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addUser3_hu1a14d567fa49eb4b36fbe4d2e0688003_17858_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;h3 id="配置角色权限">配置角色权限&lt;/h3>
&lt;p>点击左上角≡按钮, 再点击&amp;quot;Security&amp;rdquo;, 选择Hive Tables选项卡, 进行Hive访问权限配置.&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/menu.png"
width="554"
height="984"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/menu_hu09ed838551ac7e0c9b8d6dab7f40a8e7_10854_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/menu_hu09ed838551ac7e0c9b8d6dab7f40a8e7_10854_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="56"
data-flex-basis="135px"
>&lt;br>
左侧选择Roles, 点击右边的&amp;quot;Add&amp;quot;按钮, &amp;ldquo;Name&amp;quot;中填写角色名, 可随意填写, &amp;ldquo;Groups&amp;quot;选择需要授予该角色的用户组, 此处选择了我们现在要处理的hiveselect用户组, &amp;ldquo;Privileges&amp;quot;中点击加号, 增加权限, 可以填写权限类型(select/insert/all), 及对应权限的库/表/列, 一个角色可以增加多条权限规则:&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addRole.png"
width="2094"
height="828"
srcset="https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addRole_hu99d195eb2dd894836bad9caf7521805b_16790_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Sentry%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/addRole_hu99d195eb2dd894836bad9caf7521805b_16790_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="606px"
>&lt;br>
填写完毕之后, 点击Save按钮, 稍等片刻即可生效(按目前经验来看, 新增的组可能需要3-5分钟才能生效, 已经配置过的组修改访问权限的话几乎是立刻生效).&lt;/p>
&lt;h3 id="hive最高权限">Hive最高权限&lt;/h3>
&lt;p>Hue中配置的Hive权限是针对表的读写权限的, 并没有涉及到建库建表的权限, 使用管理员用户可以赋予该权限, 进入hue
的Hive编辑器, 执行:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">grant&lt;/span> &lt;span style="color:#815ba4">all&lt;/span> &lt;span style="color:#815ba4">on&lt;/span> server server1 &lt;span style="color:#815ba4">to&lt;/span> &lt;span style="color:#815ba4">role&lt;/span> hue角色名;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>基于Vert.X的高性能微信支付宝公众号通用服务</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/</link><pubDate>Tue, 30 Jan 2018 14:02:10 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/drink.jpg" alt="Featured image of post 基于Vert.X的高性能微信支付宝公众号通用服务" />&lt;p>去年基于&lt;code>Vert.X&lt;/code>写了一个微信支付宝公众号通用服务，放在&lt;code>Github&lt;/code>上，也有一段时间没维护了，现在把文档发上来记录一下吧。&lt;br>
&lt;code>Github&lt;/code>地址：&lt;a class="link" href="https://github.com/Leibnizhu/AlipayWechatPlatform" target="_blank" rel="noopener"
>https://github.com/Leibnizhu/AlipayWechatPlatform&lt;/a>&lt;/p>
&lt;h1 id="alipay-wechat-platform">Alipay-Wechat-Platform&lt;/h1>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/logo.png"
width="256"
height="90"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/logo_hu5b25fb5b6f99f55f2eb318444d1f5940_6648_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/logo_hu5b25fb5b6f99f55f2eb318444d1f5940_6648_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="682px"
>&lt;/p>
&lt;h2 id="命名">命名&lt;/h2>
&lt;p>原来命名是Wechat-Alipay-Platform，但这样缩写WAP、可能引起歧义，所以改成Alipay-Wechat-Platform，缩写AWP（还是有歧义，但至少不是一个领域的）。&lt;/p>
&lt;h2 id="意义">意义&lt;/h2>
&lt;p>本项目旨在减少Web项目关于微信、支付宝的重复代码，以及解决公众号的安全域名只能配置一个的问题。&lt;br>
未来还可以托管Access Token。
本项目部署后，将公众号安全域名配置到本项目的域名，此后多个web项目（不同域名）可以使用同一个公众号 &lt;del>（理论上）&lt;/del> 。&lt;/p>
&lt;h2 id="技术栈">技术栈&lt;/h2>
&lt;h3 id="变迁">变迁&lt;/h3>
&lt;p>原来：&lt;code>Vue.js + Spring Boot + Druid + MySQL&lt;/code>&lt;br>
现在：&lt;code>Vue.js + Vert.X(Core+Web+JDBC) + HikariCP + MySQL(可能换成PostgreSQL)&lt;/code>&lt;/p>
&lt;h3 id="benchmark">Benchmark&lt;/h3>
&lt;p>针对支付配置获取的API进行测试。&lt;/p>
&lt;ul>
&lt;li>测试工具：&lt;code>Jemeter3.2 r1790748&lt;/code>&lt;/li>
&lt;li>测试环境：&lt;code>Manjaro 17.0.5 x86_64 Linux 4.9.53-1-MANJARO&lt;/code>,&lt;code>OpenJDK 1.8.0_144&lt;/code>&lt;/li>
&lt;li>硬件配置：Intel Core i7-6560U @ 4x 3.2GHz, 8G DDR3, 256G SSD&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;code>Spring&lt;/code>(无Shiro过滤)测试结果：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/spring.png"
width="1494"
height="58"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/spring_hu7082302d019b96b728a530f2e71c351c_12820_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/spring_hu7082302d019b96b728a530f2e71c351c_12820_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="2575"
data-flex-basis="6182px"
>&lt;/li>
&lt;li>&lt;code>Vert.X&lt;/code>(JWT授权+MariaDB)测试结果：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx.png"
width="1496"
height="61"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx_hu63d50766faf3540da712763e1beb3336_12843_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx_hu63d50766faf3540da712763e1beb3336_12843_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="2452"
data-flex-basis="5885px"
>&lt;/li>
&lt;li>&lt;code>Vert.X&lt;/code>(JWT授权+PostgreSQL)测试结果：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx_postgres.png"
width="1184"
height="55"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx_postgres_hu410f5425beb1e3a5a5ab067aa28ea7f6_12201_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8EVert.X%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%AC%E4%BC%97%E5%8F%B7%E9%80%9A%E7%94%A8%E6%9C%8D%E5%8A%A1/vertx_postgres_hu410f5425beb1e3a5a5ab067aa28ea7f6_12201_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="2152"
data-flex-basis="5166px"
>&lt;/li>
&lt;/ol>
&lt;h2 id="maven子模块">Maven子模块&lt;/h2>
&lt;ul>
&lt;li>&lt;code>awp-base&lt;/code>: PoJo类，工具类（通用工具、微信工具、支付宝工具）&lt;/li>
&lt;li>&lt;code>awp-final&lt;/code>: 最终打成Vert.X整合包，包括后台管理和服务的入口&lt;/li>
&lt;li>&lt;code>awp-verticle-bms&lt;/code>: 后台管理页面，需要JWT授权登录&lt;/li>
&lt;li>&lt;code>awp-verticle-base&lt;/code>: Verticle基础通用类，包括一个基础接口机器抽象类，以及定义EventBus常量的命名空间&lt;/li>
&lt;li>&lt;code>awp-verticle-db&lt;/code>: 数据库相关类&lt;/li>
&lt;li>&lt;code>awp-verticle-message&lt;/code>: 微信、支付宝(模板/客服/图文)消息发送服务(TODO)&lt;/li>
&lt;li>&lt;code>awp-verticle-oauth&lt;/code>: 微信、支付宝(TODO)授权服务&lt;/li>
&lt;li>&lt;code>awp-verticle-pay&lt;/code>: 微信、支付宝支付服务(TODO)&lt;/li>
&lt;/ul>
&lt;h2 id="启动方式">启动方式&lt;/h2>
&lt;h3 id="增加支付宝maven依赖">增加支付宝Maven依赖&lt;/h3>
&lt;p>进入项目目录，执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mvn install:install-file -Dfile&lt;span style="color:#5bc4bf">=&lt;/span>dependencies/com.alipay.api-1.0.jar -DgroupId&lt;span style="color:#5bc4bf">=&lt;/span>com.alipay -DartifactId&lt;span style="color:#5bc4bf">=&lt;/span>api -Dversion&lt;span style="color:#5bc4bf">=&lt;/span>1.0 -Dpackaging&lt;span style="color:#5bc4bf">=&lt;/span>jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mvn install:install-file -Dfile&lt;span style="color:#5bc4bf">=&lt;/span>dependencies/com.antgroup.zmxy.openplatform-1.0.jar -DgroupId&lt;span style="color:#5bc4bf">=&lt;/span>com.antgroup -DartifactId&lt;span style="color:#5bc4bf">=&lt;/span>zmxy.openplatform -Dversion&lt;span style="color:#5bc4bf">=&lt;/span>1.0 -Dpackaging&lt;span style="color:#5bc4bf">=&lt;/span>jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置文件">配置文件&lt;/h3>
&lt;p>可以放在任何位置，任何文件名，内容参考&lt;code>awp-final/src/main/resources/config.json&lt;/code>。&lt;/p>
&lt;h3 id="命令行启动">命令行启动&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mvn clean &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> maven package
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>java -jar awp-final/target/awp-0.0.1-SNAPSHOT-fat.jar run com.turingdi.awp.MainVerticle -conf &lt;span style="color:#5bc4bf">[&lt;/span>/path/to/配置文件&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="调试">调试&lt;/h3>
&lt;p>从&lt;code>awp-final&lt;/code>子模块中的&lt;code>com.turingdi.awp.MainLauncher&lt;/code>类启动项目即可，启动参数参考命令行启动的命令（从&lt;code>run&lt;/code>开始）。&lt;/p>
&lt;h2 id="后台管理页面">后台管理页面&lt;/h2>
&lt;p>入口地址：&lt;code>http://localhost:8083/&lt;/code>&lt;/p>
&lt;h2 id="api">API&lt;/h2>
&lt;h3 id="微信授权">微信授权&lt;/h3>
&lt;p>申请微信授权。web服务需要授权时，向用户发送重定向到该接口。&lt;/p>
&lt;ul>
&lt;li>请求地址：&lt;code>http://localhost:8083/oauth/wx/apply/{body}&lt;/code>&lt;/li>
&lt;li>参数：body，格式为变种Base64编码的JSON，请用http://localhost:8083/static/page/sys/base64.html 进行编码&lt;/li>
&lt;/ul>
&lt;p>例如（请修改域名后，在微信打开，静默授权，授权后跳到百度首页(为了展示可以回调到任何地址)，观察地址，rs参数是图灵Base64加密后的结果）: http://localhost:8083/oauth/wx/apply/bgNVIODVIfwpZOI2dADsO3DVIOD3TmLgZSI2KOgxIODVIOkBHCjsHfqB1YI2IfhMTmD2oY60T0cuHfqpZm8uHt6nIVp6OV~~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;eid&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">1&lt;/span>, &lt;span style="color:#ef6155">/*web项目使用的公众号在本项目中的用户ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">0&lt;/span>,&lt;span style="color:#ef6155">/*0=静默授权，只能获取OpenID，1=正常授权，会弹出授权确认页面，可以获取到用户信息*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;callback&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;http://dict.baidu.com&amp;#34;&lt;/span>&lt;span style="color:#ef6155">/*授权成功后调用的web项目回调接口地址&lt;/span>,&lt;span style="color:#ef6155">请使用完整地址,回调时会使用GET方法，加上rs参数，rs参数值是turingBase64加密的授权结果(JSON)*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="支付宝授权">支付宝授权&lt;/h3>
&lt;p>申请支付宝授权。web服务需要授权时，向用户发送重定向到该接口。&lt;/p>
&lt;ul>
&lt;li>请求地址：&lt;code>http://localhost:8083/oauth/zfb/apply/{body}&lt;/code>&lt;/li>
&lt;li>参数：body，格式为变种Base64编码的JSON，请用http://localhost:8083/static/page/sys/base64.html 进行编码&lt;/li>
&lt;/ul>
&lt;p>例如（请修改域名后打开，静默授权，授权后跳到百度首页(为了展示可以回调到任何地址)，观察地址，rs参数是图灵Base64加密后的结果）: http://localhost:8083/oauth/wx/apply/bgNVIODVIfwpZOI2dADsO3DVIOD3TmLgZSI2KOgxIODVIOkBHCjsHfqB1YI2IfhMTmD2oY60T0cuHfqpZm8uHt6nIVp6OV~~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;eid&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">1&lt;/span>, &lt;span style="color:#ef6155">/*web项目使用的公众号在本项目中的用户ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;type&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">0&lt;/span>,&lt;span style="color:#ef6155">/*0=静默授权，只能获取OpenID，1=正常授权，会弹出授权确认页面，可以获取到用户信息*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;callback&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;http://dict.baidu.com&amp;#34;&lt;/span>&lt;span style="color:#ef6155">/*授权成功后调用的web项目回调接口地址&lt;/span>,&lt;span style="color:#ef6155">请使用完整地址,回调时会使用GET方法，加上rs参数，rs参数值是turingBase64加密的授权结果(JSON)*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="微信公众号的accesstoken与jsticket">微信公众号的AccessToken与JsTicket&lt;/h3>
&lt;h4 id="accesstoken">AccessToken&lt;/h4>
&lt;ul>
&lt;li>请求方法：POST&lt;/li>
&lt;li>来源限制：与awp同网段的访问（通过请求头的&lt;code>X-Forwarded-For&lt;/code>与&lt;code>X-Real-IP&lt;/code>请求头判断，通过nginx反代访问的都会带上）&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/tk/wx/act/{eid}&lt;/code>&lt;/li>
&lt;li>请求参数：eid路径参数，用户ID&lt;/li>
&lt;/ul>
&lt;h4 id="jsticket">JsTicket&lt;/h4>
&lt;ul>
&lt;li>请求方法：POST&lt;/li>
&lt;li>来源限制：与awp同网段的访问（通过请求头的&lt;code>X-Forwarded-For&lt;/code>与&lt;code>X-Real-IP&lt;/code>请求头判断，通过nginx反代访问的都会带上）&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/tk/wx/jst/{eid}&lt;/code>&lt;/li>
&lt;li>请求参数：eid路径参数，用户ID&lt;/li>
&lt;/ul>
&lt;h3 id="微信支付">微信支付&lt;/h3>
&lt;p>微信支付相对比较麻烦，单次支付涉及到多个接口。&lt;br>
具体的应用可以参考&lt;code>awp-verticle-admin/resources/static/page/paytest.html&lt;/code>页面的例子。&lt;br>
P.S. 支付的页面需要引入&lt;code>https://res.wx.qq.com/open/js/jweixin-1.2.0.js&lt;/code>。&lt;/p>
&lt;h4 id="预处理wxconfig用">预处理(wx.config用)&lt;/h4>
&lt;ul>
&lt;li>请求方法：GET，由页面AJAX调用&lt;/li>
&lt;li>来源限制：暂无&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/pay/wx/pre/{eid}/{url}&lt;/code>&lt;/li>
&lt;li>请求参数：eid:路径参数，用户ID; url:当前页面URL，请将完整URL进行URL编码再发送&lt;/li>
&lt;li>响应格式：JSON&lt;/li>
&lt;li>响应内容：appId，timestamp（生成签名的时间戳），noncestr（生成签名的随机串），signture（签名），由&lt;code>wx.config()&lt;/code>使用。&lt;/li>
&lt;/ul>
&lt;h4 id="下单">下单&lt;/h4>
&lt;ul>
&lt;li>请求方法：POST，由页面AJAX调用&lt;/li>
&lt;li>来源限制：暂无&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/pay/wx/order&lt;/code>&lt;/li>
&lt;li>请求参数：JSON格式的字符串，包括以下参数：eid(企业用户ID),orderId(本地订单ID),openId(用户OpenID),price(价格，单位：分),name(产品名),callback(支付成功后回调接口，请填写完整URL，无需编码)&lt;/li>
&lt;li>响应格式：JSON&lt;/li>
&lt;li>响应内容：appId,timestamp（生成签名的时间戳），noncestr（生成签名的随机串）,packages(prepay_id),paysign(签名)。供&lt;code>WeixinJSBridge.invoke('getBrandWCPayRequest',{})&lt;/code>使用&lt;/li>
&lt;/ul>
&lt;h4 id="退款">退款&lt;/h4>
&lt;p>(TODO)&lt;/p>
&lt;h3 id="支付宝支付">支付宝支付&lt;/h3>
&lt;h4 id="下单-1">下单&lt;/h4>
&lt;p>需要使用支付宝支付时，由由用户调用此接口（可以是web服务返回重定向到本接口，或后台计算出接口地址，让js跳转）。&lt;/p>
&lt;ul>
&lt;li>请求地址：&lt;code>http://localhost:8083/pay/zfb/order/{body}&lt;/code>&lt;/li>
&lt;li>参数：body，格式为变种Base64编码的JSON，请用http://localhost:8083/static/sys/page/base64.html 进行编码。&lt;/li>
&lt;/ul>
&lt;p>例如(如: http://localhost:8083/pay/zfb/order/bYkL1CX3PB7sIf6YZGwYSCX3P3IjKBKjKBKMdEH0POIsIWJY1CdLIBNjoOkuHCyLIBN32Iu55p2cI3g3HtqsvGkhHts3P3kNTmigP3Q-ZGLBTO53HCL9TS5BvtM3oOkzTCdBZedzIBN31miMcAN-otj-Htqs1G6zTAN4KAVzo0dMHeipHY6gHCTLo0d5cY63HedLdBXu1minvOk6&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;eid&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">1&lt;/span>,&lt;span style="color:#ef6155">/*web项目使用的公众号在本项目中的用户ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;orderId&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;1231234567&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*本地订单ID，请保持唯一性*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;price&amp;#34;&lt;/span>:&lt;span style="color:#f99b15">1&lt;/span>,&lt;span style="color:#ef6155">/*价格，单位：分*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;苹果&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*产品名称*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;callback&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;http://dict.baidu.com&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*支付成功后异步回调地址，将会带上支付宝回调的所有参数*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;success&amp;#34;&lt;/span>:&lt;span style="color:#48b685">&amp;#34;http://localhost:8083/static/page/sys/base64.html&amp;#34;&lt;/span>&lt;span style="color:#ef6155">/*支付后前段立即跳转的地址*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="退款-1">退款&lt;/h4>
&lt;p>(TODO)&lt;/p>
&lt;h3 id="客服模板消息发送">(客服/模板)消息发送&lt;/h3>
&lt;h4 id="微信客服消息">微信客服消息&lt;/h4>
&lt;ul>
&lt;li>请求方法：PUT&lt;/li>
&lt;li>来源限制：与awp同网段的访问（通过请求头的&lt;code>X-Forwarded-For&lt;/code>与&lt;code>X-Real-IP&lt;/code>请求头判断，通过nginx反代访问的都会带上）&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/msg/wx/kf&lt;/code>&lt;/li>
&lt;li>请求参数：JSON格式，无需编码，详见&lt;code>请求提示例&lt;/code>&lt;/li>
&lt;li>响应格式：JSON&lt;/li>
&lt;li>响应内容：微信公众号模板消息接口返回的消息&lt;/li>
&lt;/ul>
&lt;p>请求体示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;eid&amp;#34;&lt;/span>: &lt;span style="color:#f99b15">2&lt;/span>,&lt;span style="color:#ef6155">/*web项目使用的公众号在本项目中的用户ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;openId&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;of2333333333333333333333OBuk&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*用户OpenID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;content&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;韩寒会画画后悔画韩红&amp;#34;&lt;/span>&lt;span style="color:#ef6155">/*客服消息内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>响应体示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;errcode&amp;#34;&lt;/span>: &lt;span style="color:#f99b15">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;errmsg&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;ok&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="微信模板消息">微信模板消息&lt;/h4>
&lt;ul>
&lt;li>请求方法：PUT&lt;/li>
&lt;li>来源限制：与awp同网段的访问（通过请求头的&lt;code>X-Forwarded-For&lt;/code>与&lt;code>X-Real-IP&lt;/code>请求头判断，通过nginx反代访问的都会带上）&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/msg/wx/tp&lt;/code>&lt;/li>
&lt;li>请求参数：JSON格式，无需编码，详见&lt;code>请求体示例&lt;/code>&lt;/li>
&lt;li>响应格式：JSON&lt;/li>
&lt;li>响应内容：微信公众号模板消息接口返回的消息&lt;/li>
&lt;/ul>
&lt;p>请求体示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;eid&amp;#34;&lt;/span>: &lt;span style="color:#f99b15">2&lt;/span>,&lt;span style="color:#ef6155">/*web项目使用的公众号在本项目中的用户ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;openId&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;of2333333333333333333333OBuk&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*用户OpenID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;tmpId&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;6p233333333333333333333333333333333333333oM&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*模板ID*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;https://www.baidu.com&amp;#34;&lt;/span>,&lt;span style="color:#ef6155">/*模板消息点击后跳转的地址*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;data&amp;#34;&lt;/span>: {&lt;span style="color:#ef6155">/*按模板的字段填写具体的内容*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;first&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;航班延误&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;keyword1&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;AA123&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;keyword2&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;延误&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;keyword3&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;北京-上海&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;keyword4&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;2017-9-21&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;remark&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;韩寒会画画后悔画韩红&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>响应体示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;errcode&amp;#34;&lt;/span>: &lt;span style="color:#f99b15">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;errmsg&amp;#34;&lt;/span>: &lt;span style="color:#48b685">&amp;#34;ok&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;#34;msgid&amp;#34;&lt;/span>: &lt;span style="color:#f99b15">439631104&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="支付宝客服消息">支付宝客服消息&lt;/h4>
&lt;p>(TODO)&lt;/p>
&lt;h4 id="支付宝模板消息">支付宝模板消息&lt;/h4>
&lt;ul>
&lt;li>请求方法：PUT&lt;/li>
&lt;li>来源限制：与awp同网段的访问（通过请求头的&lt;code>X-Forwarded-For&lt;/code>与&lt;code>X-Real-IP&lt;/code>请求头判断，通过nginx反代访问的都会带上）&lt;/li>
&lt;li>接口地址：&lt;code>http://localhost:8083/msg/zfb/tp&lt;/code>&lt;/li>
&lt;li>请求参数：JSON格式，无需编码，详见&lt;code>请求体示例&lt;/code>&lt;/li>
&lt;li>响应格式：JSON&lt;/li>
&lt;li>响应内容：微信公众号模板消息接口返回的消息&lt;/li>
&lt;/ul>
&lt;p>与微信的类似，示例略。&lt;/p></description></item><item><title>解决Maxwell发送Kafka消息数据倾斜问题</title><link>https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 03 Jan 2018 17:34:30 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/lotus.jpg" alt="Featured image of post 解决Maxwell发送Kafka消息数据倾斜问题" />&lt;h2 id="问题">问题&lt;/h2>
&lt;p>最近用&lt;code>Maxwell&lt;/code>解析&lt;code>MySQL&lt;/code>的Binlog，发送到&lt;code>Kafka&lt;/code>进行处理，测试的时候发现一个问题，就是&lt;code>Kafka&lt;/code>的Offset严重倾斜，三个partition，其中一个的offset已经快200万了，另外两个offset才不到两百。&lt;br>
Kafka数据倾斜的问题一般是由于生产者使用的&lt;code>Partition&lt;/code>接口实现类对分区处理的问题，一般是对key做hash之后，对分区数取模。当出现数据倾斜时，小量任务耗时远高于其它任务，从而使得整体耗时过大，未能充分发挥分布式系统的并行计算优势（参考&lt;a class="link" href="http://ningg.top/apache-kafka-10-best-practice-tips-data-skew-details/" target="_blank" rel="noopener"
>Apache Kafka 0.10 技术内幕：数据倾斜详解&lt;/a>）。&lt;br>
而使用&lt;code>Maxwell&lt;/code>解析&lt;code>MySQL&lt;/code>的Binlog发送到&lt;code>Kafka&lt;/code>的时候，生产者是&lt;code>Maxwell&lt;/code>，那么数据倾斜的问题明细就是&lt;code>Maxwell&lt;/code>引起的了。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>在&lt;code>Maxwell&lt;/code>官网查文档（&lt;a class="link" href="http://maxwells-daemon.io/producers/#kafka-partitioning" target="_blank" rel="noopener"
>Producers:kafka-partitioning Maxwell&amp;rsquo;s Daemon&lt;/a>）得知，在&lt;code>Maxwell&lt;/code>没有配置的情况下，默认使用数据库名作为计算分区的key，并使用Java默认的hashcode算法进行计算：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>A binlog event&amp;#39;s partition is determined by the selected hash function and hash string as follows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| HASH_FUNCTION(HASH_STRING) % TOPIC.NUMBER_OF_PARTITIONS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The HASH_FUNCTION is either java&amp;#39;s hashCode or murmurhash3. The default HASH_FUNCTION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is hashCode. Murmurhash3 may be set with the kafka_partition_hash option.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…………
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The HASH_STRING may be (database, table, primary_key, column). The default HASH_STRING
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is the database. The partitioning field can be configured using the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>producer_partition_by option.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在很多业务系统中，不同数据库的活跃度差异是很大的，主体业务的数据库操作频繁，产生的Binlog也就很多，而&lt;code>Maxwell&lt;/code>默认使用数据库作为key进行hash，那么显而易见，Binglog的操作经常都被分到同一个分区里面了。&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>于是我们在&lt;code>Maxwell&lt;/code>启动命令中加入对应参数即可，这里我选择了Rowkey作为分区key，同时选用murmurhash3
哈希算法，以获得更好的效率和分布：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nohup /opt/maxwell-1.11.0/bin/maxwell --user&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;maxwell&amp;#39;&lt;/span> --password&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;***&amp;#39;&lt;/span> --host&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;***&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--exclude_dbs&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;/^(mysql|maxwell|test)/&amp;#39;&lt;/span> --producer&lt;span style="color:#5bc4bf">=&lt;/span>kafka --kafka.bootstrap.servers&lt;span style="color:#5bc4bf">=&lt;/span>***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--kafka_partition_hash&lt;span style="color:#5bc4bf">=&lt;/span>murmur3 --producer_partition_by&lt;span style="color:#5bc4bf">=&lt;/span>primary_key &amp;gt;&amp;gt; /root/maxwell.log &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用此命令重新启动&lt;code>Maxwell&lt;/code>之后，观察Offset的变化，隔一段时间之后，各分区Offset的增量基本一致，问题解决！&lt;/p></description></item><item><title>Spark2的Kafka消费Offset管理</title><link>https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 22 Dec 2017 08:46:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/sunup.png" alt="Featured image of post Spark2的Kafka消费Offset管理" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>网上流传一篇关于Spark Streaming消费Kafka时用Zookeeper保存Kafka队列offset的文章，如&lt;a class="link" href="https://www.2cto.com/net/201710/692443.html" target="_blank" rel="noopener"
>https://www.2cto.com/net/201710/692443.html&lt;/a>，最初源头没找了，亲测在Spark1.6是可以用的。&lt;br>
然而在Spark2中，这种方法的&lt;code>KafkaManager&lt;/code>类中所依赖的&lt;code>KafkaCluster&lt;/code>等等的类并不存在，因此此法无法直接套用到Spark中；此外，如果使用Cloudera的CDH集群的Spark2，其API更为缺少。因此，本文给出一种在CDH5.13的Spark2中通过Zookeeper管理Kafka消费Offset的方法。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;ul>
&lt;li>集群：&lt;code>Cloudera CDH&lt;/code>（&lt;code>Cloudera Manager&lt;/code> 5.13.0）&lt;/li>
&lt;li>&lt;code>Spark&lt;/code>：2.1.0 cloudera2&lt;/li>
&lt;li>&lt;code>Scala&lt;/code>：2.11.8&lt;/li>
&lt;li>&lt;code>Java&lt;/code>：1.8.0_u91&lt;/li>
&lt;/ul>
&lt;h2 id="maven依赖">Maven依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.source&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.target&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scala.version&amp;gt;&lt;/span>2.11.8&lt;span style="color:#5bc4bf">&amp;lt;/scala.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;spark.version&amp;gt;&lt;/span>2.1.0.cloudera2&lt;span style="color:#5bc4bf">&amp;lt;/spark.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;kafka.version&amp;gt;&lt;/span>0.11.0-kafka-3.0.0&lt;span style="color:#5bc4bf">&amp;lt;/kafka.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scala-test.version&amp;gt;&lt;/span>3.0.0&lt;span style="color:#5bc4bf">&amp;lt;/scala-test.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>cloudera&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>https://repository.cloudera.com/artifactory/cloudera-repos/&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>aliyun&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>http://maven.aliyun.com/nexus/content/groups/public&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.scala-lang&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>scala-library&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${scala.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-core_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-streaming_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-streaming-kafka-0-10_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.kafka&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kafka-clients&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${kafka.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.kafka&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kafka-streams&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${kafka.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="管理kafka消费offset">管理Kafka消费Offset&lt;/h2>
&lt;h3 id="使用方法">使用方法&lt;/h3>
&lt;h4 id="创建kafkamanager对象">创建KafkaManager对象&lt;/h4>
&lt;p>使用类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Kafka的连接和Offset管理工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param zkHosts Zookeeper地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param kafkaParams Kafka启动参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Serializable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> zkHosts &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;localhost:2181&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> kafkaParams &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;auto.offset.reset&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;latest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;bootstrap.servers&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> kafkaBrokers&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#fec418">MAXWELL_KAFKA_GROUP&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;enable.auto.commit&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">java.lang.Boolean&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> &lt;span style="color:#776e71">//禁用自动提交Offset，否则可能没正常消费完就提交了，造成数据错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#48b685">&amp;#34;key.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;value.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> km &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建kafka输入流">创建Kafka输入流&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* 包装createDirectStream方法，支持Kafka Offset，用于创建Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @param ssc Spark Streaming Context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @tparam K Kafka消息Key类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @tparam V Kafka消息Value类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @return Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>, &lt;span style="color:#fec418">V:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">StreamingContext&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">InputDStream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> kafkaStream &lt;span style="color:#815ba4">=&lt;/span> km&lt;span style="color:#5bc4bf">.&lt;/span>createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#5bc4bf">,&lt;/span> kafkaTopics&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toSeq&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="操作完毕后更新offset">操作完毕后更新Offset&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存Kafka消息队列消费的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param rdd SparkStreaming的Kafka RDD，RDD[ConsumerRecord[K, V]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param storeEndOffset true=保存结束offset， false=保存起始offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">RDD&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]],&lt;/span> storeEndOffset&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>km&lt;span style="color:#5bc4bf">.&lt;/span>persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="详细代码">详细代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">package&lt;/span> &lt;span style="color:#fec418">com.turingdi.enmonster.nrt.common&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">java.lang.Object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">com.turingdi.enmonster.nrt.common.Constants._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">kafka.utils.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.kafka.clients.consumer.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">KafkaConsumer&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.kafka.common.TopicPartition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.rdd.RDD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.StreamingContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.dstream.InputDStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.kafka010.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ConsumerStrategies&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">HasOffsetRanges&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">KafkaUtils&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.slf4j.LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.collection.JavaConversions._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.reflect.ClassTag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.util.Try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Kafka的连接和Offset管理工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param zkHosts Zookeeper地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param kafkaParams Kafka启动参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Serializable&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Logback日志对象，使用slf4j框架
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">@transient&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">lazy&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> log &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">LoggerFactory&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getLogger&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立ZkUtils对象所需的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>zkClient&lt;span style="color:#5bc4bf">,&lt;/span> zkConnection&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createZkClientAndConnection&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZK_SESSION_TIMEOUT&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZK_CONNECTION_TIMEOUT&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//ZkUtils对象，用于访问Zookeeper
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> zkUtils &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkClient&lt;span style="color:#5bc4bf">,&lt;/span> zkConnection&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 包装createDirectStream方法，支持Kafka Offset，用于创建Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param ssc Spark Streaming Context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @tparam K Kafka消息Key类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @tparam V Kafka消息Value类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>, &lt;span style="color:#fec418">V:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">StreamingContext&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">InputDStream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> groupId &lt;span style="color:#815ba4">=&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> storedOffsets &lt;span style="color:#815ba4">=&lt;/span> readOffsets&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#5bc4bf">,&lt;/span> groupId&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>info&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Kafka消息偏移量汇总(格式:(话题,分区号,偏移量)):{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> storedOffsets&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>off &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>off&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">,&lt;/span> off&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">(),&lt;/span> off&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> kafkaStream &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">KafkaUtils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">PreferConsistent&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ConsumerStrategies&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Subscribe&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>topics&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">,&lt;/span> storedOffsets&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kafkaStream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 从Zookeeper读取Kafka消息队列的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param groupId Kafka Group ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 返回一个Map[TopicPartition, Long]，记录每个话题每个Partition上的offset，如果还没消费，则offset为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> readOffsets&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span> groupId&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">TopicPartition&lt;/span>, &lt;span style="color:#fec418">Long&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> topicPartOffsetMap &lt;span style="color:#815ba4">=&lt;/span> collection&lt;span style="color:#5bc4bf">.&lt;/span>mutable&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">HashMap&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>empty&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">TopicPartition&lt;/span>, &lt;span style="color:#fec418">Long&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> partitionMap &lt;span style="color:#815ba4">=&lt;/span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>getPartitionsForTopics&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// /consumers/&amp;lt;groupId&amp;gt;/offsets/&amp;lt;topic&amp;gt;/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> partitionMap&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkGroupTopicDirs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>groupId&lt;span style="color:#5bc4bf">,&lt;/span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>partition &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetPath &lt;span style="color:#815ba4">=&lt;/span> zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> partition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> tryGetKafkaOffset &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetStatTuple &lt;span style="color:#815ba4">=&lt;/span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>readData&lt;span style="color:#5bc4bf">(&lt;/span>offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>offsetStatTuple &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>info&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;查询Kafka消息偏移量详情: 话题:{}, 分区:{}, 偏移量:{}, ZK节点路径:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetStatTuple&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>put&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>valueOf&lt;span style="color:#5bc4bf">(&lt;/span>partition&lt;span style="color:#5bc4bf">)),&lt;/span> offsetStatTuple&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>toLong&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>tryGetKafkaOffset&lt;span style="color:#5bc4bf">.&lt;/span>isFailure&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//http://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> consumer &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">KafkaConsumer&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>kafkaParams&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> partitionList &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>assign&lt;span style="color:#5bc4bf">(&lt;/span>partitionList&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> minAvailableOffset &lt;span style="color:#815ba4">=&lt;/span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>beginningOffsets&lt;span style="color:#5bc4bf">(&lt;/span>partitionList&lt;span style="color:#5bc4bf">).&lt;/span>values&lt;span style="color:#5bc4bf">.&lt;/span>head
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>close&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>warn&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;查询Kafka消息偏移量详情: 没有上一次的ZK节点:{}, 话题:{}, 分区:{}, ZK节点路径:{}, 使用最小可用偏移量:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>tryGetKafkaOffset&lt;span style="color:#5bc4bf">.&lt;/span>failed&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">.&lt;/span>getMessage&lt;span style="color:#5bc4bf">,&lt;/span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">,&lt;/span> minAvailableOffset&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>put&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>valueOf&lt;span style="color:#5bc4bf">(&lt;/span>partition&lt;span style="color:#5bc4bf">)),&lt;/span> minAvailableOffset&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>toMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存Kafka消息队列消费的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param rdd SparkStreaming的Kafka RDD，RDD[ConsumerRecord[K, V]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param storeEndOffset true=保存结束offset， false=保存起始offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">RDD&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]],&lt;/span> storeEndOffset&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> groupId &lt;span style="color:#815ba4">=&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetsList &lt;span style="color:#815ba4">=&lt;/span> rdd&lt;span style="color:#5bc4bf">.&lt;/span>asInstanceOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">HasOffsetRanges&lt;/span>&lt;span style="color:#5bc4bf">].&lt;/span>offsetRanges
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offsetsList&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>or &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkGroupTopicDirs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>groupId&lt;span style="color:#5bc4bf">,&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetPath &lt;span style="color:#815ba4">=&lt;/span> zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetVal &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>storeEndOffset&lt;span style="color:#5bc4bf">)&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>untilOffset &lt;span style="color:#815ba4">else&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>fromOffset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>updatePersistentPath&lt;span style="color:#5bc4bf">(&lt;/span>zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">,&lt;/span> offsetVal &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#776e71">/*, JavaConversions.bufferAsJavaList(acls)*/&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>debug&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;保存Kafka消息偏移量详情: 话题:{}, 分区:{}, 偏移量:{}, ZK节点路径:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>or&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">,&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetVal&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tomcat8源码读后感</title><link>https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/</link><pubDate>Thu, 30 Nov 2017 11:53:14 +0800</pubDate><guid>https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/sundown2.jpg" alt="Featured image of post Tomcat8源码读后感" />&lt;p>源码版本：&lt;code>Tomcat 8.0.41&lt;/code>&lt;/p>
&lt;h3 id="request和response的门面模式">Request和Response的门面模式&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request.png"
width="180"
height="274"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request_hua75cf0cc9e85cc522889505be9bf757c_9924_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request_hua75cf0cc9e85cc522889505be9bf757c_9924_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="157px"
> &lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response.png"
width="194"
height="275"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response_hu6ca6fcfc53f1885b949cdbeece85a962_10304_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response_hu6ca6fcfc53f1885b949cdbeece85a962_10304_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;br>
从UML图可以看到，Tomcat中&lt;code>HttpServletRequest&lt;/code>和&lt;code>HttpServletResponse&lt;/code>的实现类是&lt;code>org.apache.catalina.connector.Request&lt;/code>和&lt;code>org.apache.catalina.connector.Response&lt;/code>，但实际提供给Servlet的时候用的是门面类&lt;code>RequestFacade&lt;/code>和&lt;code>ResponseFacade&lt;/code>。这是因为实现类里面的public方法比接口的多，而且可能涉及到安全问题，如果Servlet直接将其强转成实现类，是可以访问这些方法的，存在安全问题，因为使用了门面模式，将这些方法隐藏起来。&lt;/p>
&lt;h3 id="统一日志消息处理">统一日志消息处理&lt;/h3>
&lt;p>Tomcat8使用&lt;code>org.apache.catalina.tribes.util.StringManager&lt;/code>对日志消息进行统一处理，每个包一般都有一个&lt;code>LocalStrings.properties&lt;/code>文件，需要调用这些日志信息的类，会维护一个&lt;code>StringManager&lt;/code>的实例，初始化时以当前包名为参数，以获取当前包对应的&lt;code>LocalStrings.properties&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#06b6ef">StringManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> StringManager&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> managers &lt;span style="color:#5bc4bf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Get the StringManager for a particular package. If a manager for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * a package already exists, it will be reused, else a new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * StringManager will be created and returned.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param packageName The package name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">synchronized&lt;/span> StringManager &lt;span style="color:#06b6ef">getManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String packageName&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringManager mgr &lt;span style="color:#5bc4bf">=&lt;/span> managers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mgr &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mgr &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringManager&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> managers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">,&lt;/span> mgr&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> mgr&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/* For Example */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> StringManager sm &lt;span style="color:#5bc4bf">=&lt;/span> StringManager&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Constants&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Package&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到它使用了&lt;code>Hashtable&lt;/code>来维护每个包对应的&lt;code>StringManager&lt;/code>单例。&lt;br>
然后在需要读取消息的时候调用&lt;code>StringManager&lt;/code>的&lt;code>getString(String key)&lt;/code>方法，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sm&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;receiverBase.socket.bind&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> addr&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="请求参数等的懒解析">请求参数等的懒解析&lt;/h3>
&lt;p>为了提高效率，请求参数在第一次调用&lt;code>public String getParameter(String name)&lt;/code>、&lt;code>public Enumeration&amp;lt;String&amp;gt; getParameterNames()&lt;/code>等方法的时候才会解析，如果整个请求响应处理过程中都没有调用相关方法的话，请求参数将不会被解析，因为字符串处理的消耗不低。其他的一些属性也有类似的处理。主要的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Request parameters parsed flag.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> parametersParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Return the value of the specified request parameter, if any; otherwise,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * return &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;. If there is more than one value defined,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * return only the first one.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param name Name of the desired request parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getParameter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>parametersParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseParameters&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> coyoteRequest&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getParameters&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getParameter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Returns a &amp;lt;code&amp;gt;Map&amp;lt;/code&amp;gt; of the parameters of this request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Request parameters are extra information sent with the request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * For HTTP servlets, parameters are contained in the query string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * or posted form data.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return A &amp;lt;code&amp;gt;Map&amp;lt;/code&amp;gt; containing parameter names as keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * and parameter values as map values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">[]&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getParameterMap&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isLocked&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> parameterMap&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> enumeration &lt;span style="color:#5bc4bf">=&lt;/span> getParameterNames&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>enumeration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasMoreElements&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String name &lt;span style="color:#5bc4bf">=&lt;/span> enumeration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextElement&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#5bc4bf">[]&lt;/span> values &lt;span style="color:#5bc4bf">=&lt;/span> getParameterValues&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> values&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocked&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> parameterMap&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Return the names of all defined request parameters for this request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getParameterNames&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>parametersParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseParameters&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> coyoteRequest&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getParameters&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getParameterNames&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Parse request parameters.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseParameters&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parametersParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*………具体的解析处理，在此省略………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>ParameterMap&lt;/code>是一个继承了&lt;code>LinkedHashMap&lt;/code>的类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">ParameterMap&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> LinkedHashMap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="connector连接器">Connector连接器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector.png"
width="526"
height="200"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector_hu63d16e56f15764500da85ffad2275921_10488_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector_hu63d16e56f15764500da85ffad2275921_10488_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="631px"
>
Tomcat8主要有四个Connector，分别为&lt;code>Http11Protocol&lt;/code>、&lt;code>Http11NioProtocol&lt;/code>、&lt;code>Http11Nio2Protocol&lt;/code>、&lt;code>Http11AprProtocol&lt;/code>，UML如上图所示，内容比较多，暂时不讨论了。&lt;/p>
&lt;h3 id="tomcat容器层次">Tomcat容器层次&lt;/h3>
&lt;p>Tomcat中有四个层次的容器：&lt;/p>
&lt;ul>
&lt;li>Engine：整个Catalina Servlet引擎&lt;/li>
&lt;li>Host：包含一个或多个Context容器的虚拟主机&lt;/li>
&lt;li>Context：表示一个Web应用程序，包含一个或多个Wrapper&lt;/li>
&lt;li>Wrapper：表示一个独立的Servlet&lt;/li>
&lt;/ul>
&lt;p>以上四个类均实现了&lt;code>org.apache.catalina.Container&lt;/code>接口，标准实现分别为&lt;code>org.apache.catalina.core&lt;/code>包中的&lt;code>StandardEngine&lt;/code>、&lt;code>StandardHost&lt;/code>、&lt;code>StandardContext&lt;/code>、&lt;code>StandardWrapper&lt;/code>。
&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container.png"
width="1144"
height="396"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container_hub792b78ab73a6bdeeca26693cee98c0c_40450_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container_hub792b78ab73a6bdeeca26693cee98c0c_40450_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="693px"
>&lt;/p>
&lt;h3 id="pipeline管道">Pipeline管道&lt;/h3>
&lt;p>(尚未完工)
&lt;code>org.apache.catalina.valves.AccessLogValve&lt;/code>&lt;/p></description></item><item><title>最近对Java服务框架的思考</title><link>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Wed, 11 Oct 2017 14:19:12 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/mokou_kaguya.png" alt="Featured image of post 最近对Java服务框架的思考" />&lt;p>简单说几句，关于最近对Java服务框架的思考。&lt;br>
最早我是用&lt;code>springMVC + Spring&lt;/code>的，因为太臃肿，配置麻烦，很快切换到&lt;code>SpringBoot&lt;/code>。&lt;br>
用上&lt;code>SpringBoot&lt;/code>后，觉得内置&lt;code>Tomcat/Jetty&lt;/code>性能可能不够好，于是自己写了个&lt;a class="link" href="https://github.com/Leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>基于Netty的内置Servlet容器&lt;/a>，然而简单测试后发现性能与内置的&lt;code>Tomcat/Jetty&lt;/code>相差不大（也有可能是因为测试用例太简单了，没有把&lt;code>Netty NIO&lt;/code>在业务阻塞线程时的优势体现出来）。&lt;br>
期间还考虑过直接用&lt;code>Netty&lt;/code>原生API来写一个分发请求的简单框架，看了一些别人类似功能的项目，后来不了了之。&lt;br>
结合这两点，盯上了&lt;code>Play Framework&lt;/code>，这个在许久前就有关注过，但没深入了解，看了官方文档之后，发现这就是我想要的！开发起来很方便嘛，但是&lt;code>Session&lt;/code>的实现有点………………建议用&lt;code>scala&lt;/code>写，我个人是没问题，但不好带人一起写。&lt;br>
后来在Telegram某群组里被安利了&lt;code>Vert.X&lt;/code>，看了官方文档，还有详细的官方Demo，以及各种安利文章，发现这玩意真好用诶，跟&lt;code>Node.Js&lt;/code>有点像诶，也不用跟用&lt;code>Netty&lt;/code>原生API一样战战兢兢了，配套解决方案也不少，逼格也有，多语言支持（虽然对我而言用处不大），决定就是你了！&lt;br>
所以最终结论就是：&lt;code>Vert.X&lt;/code>大法好，退&lt;code>Spring&lt;/code>保平安～&lt;/p>
&lt;p>P.S. 在&lt;a class="link" href="https://github.com/Leibnizhu/VertxLearn" target="_blank" rel="noopener"
>Github&lt;/a>写了一些简单的&lt;code>Vert.X&lt;/code>学习例子，另外准备用&lt;code>Vert.X&lt;/code>写一个微信/支付宝的微服务(2018-08-02更新:2017年年底已经写了,忘了更新这篇文章, 请参阅&lt;a class="link" href="https://leibnizhu.github.io/p/%e5%9f%ba%e4%ba%8eVert.X%e7%9a%84%e9%ab%98%e6%80%a7%e8%83%bd%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e5%ae%9d%e5%85%ac%e4%bc%97%e5%8f%b7%e9%80%9a%e7%94%a8%e6%9c%8d%e5%8a%a1/" >基于Vert.X的高性能微信支付宝公众号通用服务&lt;/a>)。&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（五）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</link><pubDate>Wed, 13 Sep 2017 21:51:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/lzwx.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（五）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现五">基于Netty的Spring Boot内置Servlet容器的实现（五）&lt;/h1>
&lt;h2 id="benchmark-程序编写">BenchMark 程序编写&lt;/h2>
&lt;p>BenchMark可以用Jmeter进行，也可以直接编写java Test程序，通过@Befor进行时间计算。&lt;br>
更方便的方法直使JM框架。&lt;/p>
&lt;h3 id="jmh简介">JMH简介&lt;/h3>
&lt;p>JMH是新的microbenchmark（微基准测试）框架（2013年首次发布）。与其他众多框架相比它的特色优势在于，它是由Oracle实现JIT的相同人员开发的。特别是我想提一下Aleksey Shipilev和他优秀的博客文章。JMH可能与最新的Oracle JRE同步，其结果可信度很高。&lt;/p>
&lt;h3 id="idea的jmh插件">IDEA的JMH插件&lt;/h3>
&lt;p>直接使用JMH需要额外编写一些入口方法、增加依赖等，并不是特别方便，而IDEA有插件支持JMH。打开&lt;code>Files-Settings&lt;/code>，找到&lt;code>Plugins&lt;/code>选项卡，安装&lt;code>JMH Plugin&lt;/code>插件，安装后重启如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin.png"
width="1019"
height="458"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu7ef27e16e2b803f9b51873ddc4e17e92_54023_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu7ef27e16e2b803f9b51873ddc4e17e92_54023_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;h3 id="编写benchmark方法">编写BenchMark方法&lt;/h3>
&lt;p>安装&lt;code>JMH Plugin&lt;/code>插件之后无需编写入口方法、增加依赖，可以直接关注具体的测试。&lt;br>
编写一个简单例子，测试我们容器的测试用例吞吐量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@BenchmarkMode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Mode&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Throughput&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletBenchmark&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">json&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/json?msg=1&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getUrl&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String url&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> read&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BufferedReader br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InputStream is &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sbuf &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL reqURL &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>url&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpURLConnection connection &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpURLConnection&lt;span style="color:#5bc4bf">)&lt;/span> reqURL&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">openConnection&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">// 进行连接，但是实际上getrequest要在下一句的connection.getInputStream() 函数中才会真正发到服务器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDoOutput&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setUseCaches&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setRequestMethod&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setConnectTimeout&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>200&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDoInput&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">connect&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>read&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> BufferedReader&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> InputStreamReader&lt;span style="color:#5bc4bf">(&lt;/span>connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInputStream&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String line&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>line &lt;span style="color:#5bc4bf">=&lt;/span> br&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">readLine&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbuf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>line&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is &lt;span style="color:#5bc4bf">=&lt;/span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInputStream&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;连接服务器&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> url &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;时发生错误：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">finally&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> br&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>is &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> sbuf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@BenchmarkMode(Mode.Throughput)&lt;/code>表示测试吞吐量，即一秒内可以跑多少次测试方法。其他的测试模式如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">名称&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Mode.Throughput&lt;/td>
&lt;td style="text-align:left">计算一个时间单位内操作数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.AverageTime&lt;/td>
&lt;td style="text-align:left">计算平均运行时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.SampleTime&lt;/td>
&lt;td style="text-align:left">计算一个方法的运行时间(包括百分位)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.SingleShotTime&lt;/td>
&lt;td style="text-align:left">方法仅运行一次(用于冷测试模式)。或者特定批量大小的迭代多次运行；这种情况下JMH将计算批处理运行时间(一次批处理所有调用的总时间)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">这些模式的任意组合&lt;/td>
&lt;td style="text-align:left">可以指定这些模式的任意组合——该测试运行多次(取决于请求模式的数量)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.All&lt;/td>
&lt;td style="text-align:left">所有模式依次运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>接下来是具体的测试方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@Benchmark&lt;/code>注解表示当前方法是需要JMH执行测试的方法，&lt;code>@Warmup(iterations = 10)&lt;/code>表示每次正式测试前，先跑10次进行热身（不参与测试结果的计算），&lt;code>@Measurement(iterations = 20)&lt;/code>表示每次正式测试执行20次方法。&lt;/p>
&lt;h3 id="执行测试">执行测试&lt;/h3>
&lt;p>执行方法很简单，点击菜单&lt;code>Run-Run...&lt;/code>，弹出窗中选择当前类，即可：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh.png"
width="771"
height="577"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hua518ab098583ec7acbf9ae00bb1114f9_144804_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hua518ab098583ec7acbf9ae00bb1114f9_144804_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2.png"
width="302"
height="184"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu38e8e493510dfff90c048bbecb62a622_11890_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu38e8e493510dfff90c048bbecb62a622_11890_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;br>
等测试完毕，就会打印出测试结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Result &lt;span style="color:#48b685">&amp;#34;io.gitlab.leibnizhu.sbnetty.benchmark.NettyServletBenchmark.plaintext&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6508.938 ±&lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span> 189.498 ops/s &lt;span style="color:#5bc4bf">[&lt;/span>Average&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">(&lt;/span>min, avg, max&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>157.637, 6508.938, 7098.929&lt;span style="color:#5bc4bf">)&lt;/span>, &lt;span style="color:#ef6155">stdev&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> 802.346
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI &lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span>: &lt;span style="color:#5bc4bf">[&lt;/span>6319.440, 6698.436&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>assumes normal distribution&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmark Mode Cnt Score Error Units
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.json thrpt &lt;span style="color:#f99b15">200&lt;/span> 6756.677 ± 182.976 ops/s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.plaintext thrpt &lt;span style="color:#f99b15">200&lt;/span> 6508.938 ± 189.498 ops/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到IDEA对该类两个带有&lt;code>@Benchmark&lt;/code>注解的方法分别进行了测试，测试结果分别是6.76kQps和6.51kQps（平均值）。&lt;/p></description></item><item><title>发布项目到Maven中央仓库</title><link>https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</link><pubDate>Tue, 05 Sep 2017 13:36:04 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/melen.png" alt="Featured image of post 发布项目到Maven中央仓库" />&lt;h1 id="发布项目到maven中央仓库">发布项目到Maven中央仓库&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>写完项目之后，为了方便别人调用，需要发布到网上，有以下方法：&lt;/p>
&lt;ol>
&lt;li>提交到Github/Gitlab上的公开项目（包含pom.xml），其他人clone后，通过&lt;code>mvn install&lt;/code>安装到本地仓库，再通过maven依赖引入。缺点：需要使用者手动操作的比较多，体验不好。&lt;/li>
&lt;li>提交到Maven中央仓库，使用者只要直接通过maven依赖引入即可。缺点：发布者操作较多麻烦。&lt;/li>
&lt;/ol>
&lt;p>本文讨论的是第二种方法，目前网上也有很多相关文章，经过实践发现一些具体的操作已经过时/不可用，本人也踩了不少坑。所以写下本文记录。&lt;/p>
&lt;h2 id="注册sonatype提交申请">注册Sonatype提交申请&lt;/h2>
&lt;p>Maven中央仓库由Sonatype公司在维护，在向Maven中央仓库提交项目前，需要先注册Sonatype账户，然后提交issue申请。&lt;/p>
&lt;h3 id="注册sonatype">注册Sonatype&lt;/h3>
&lt;p>到 &lt;a class="link" href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener"
>Sonatype官网&lt;/a> 注册帐号，随后登录。&lt;/p>
&lt;h3 id="提交issue申请">提交issue申请&lt;/h3>
&lt;p>登录点击上方导航栏的&lt;code>Create&lt;/code>按钮：
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/1.png"
width="933"
height="58"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/1_hu43f17aed28e4867488ff5a14926208ff_4880_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/1_hu43f17aed28e4867488ff5a14926208ff_4880_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1608"
data-flex-basis="3860px"
>&lt;br>
弹出模态窗：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/2.png"
width="1029"
height="808"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/2_hue05c559bb8b182b335a7a1614a184cc8_19932_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/2_hue05c559bb8b182b335a7a1614a184cc8_19932_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;br>
其中&lt;code>Project&lt;/code>选择&lt;code>Community Support - Open Source Project Repository Hosting&lt;/code>，&lt;code>Already Synced to Central&lt;/code>按默认选&lt;code>No&lt;/code>其他信息按实际填写，页面上也有例子。值得注意的是&lt;code>Group Id&lt;/code>要与项目pom.xml里面的以及实际包名一致，最好是你拥有的域名倒着写；&lt;code>Project URL&lt;/code>和&lt;code>SCM url&lt;/code>可以写Gitlab/Github地址。&lt;br>
创建后可以通过导航栏的&lt;code>issue&lt;/code>菜单找到我们提交的issue：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/3.png"
width="448"
height="173"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/3_hucae461f926ddf10e87936e0aa56c47db_5696_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/3_hucae461f926ddf10e87936e0aa56c47db_5696_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="621px"
>&lt;/p>
&lt;h3 id="等待工作人员确认">等待工作人员确认&lt;/h3>
&lt;p>由于时差关系，Sonatype的工作人员大约会在北京时间22：00开始处理issue。&lt;br>
分配工作人员后，在issue页面右边看到&lt;code>Assignee&lt;/code>分配给谁了：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/4.png"
width="395"
height="212"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/4_hub9ca58a326a2cb552c3c1a5d9d86674a_4936_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/4_hub9ca58a326a2cb552c3c1a5d9d86674a_4936_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="447px"
>&lt;br>
如果这个groupId是第一次用来提交，会有工作人员留言，向你确认groupId：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/5.png"
width="979"
height="268"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/5_hua88af01423cb1242d9cd43343e4fe9e4_17878_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/5_hua88af01423cb1242d9cd43343e4fe9e4_17878_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="365"
data-flex-basis="876px"
>&lt;br>
我们回复、工作人员确认没问题之后，会告诉你审批通过，准备好配置了：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/6.png"
width="904"
height="305"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/6_hud3c9255d5839571891995826dd8033b8_32080_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/6_hud3c9255d5839571891995826dd8033b8_32080_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;br>
这时就可以准备上传了。&lt;/p>
&lt;h2 id="上传前的准备">上传前的准备&lt;/h2>
&lt;h3 id="gpg签名">GPG签名&lt;/h3>
&lt;p>一般Linux发行版都会预装gpg，没有的自行安装即可（apt、pacman等命令，不再赘述）。输入命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg --gen-key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要输入姓名、邮箱等字段，其它字段可使用默认值，此外，还需要输入一个 Passphase，相当于一个密钥库的密码，要记好，deploy要用。&lt;br>
再输入下面命令来获取公钥ID：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg --list-signatures
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/7.png"
width="701"
height="159"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/7_hu3a90b98cb33030f9fe786c53a8dbccfc_17292_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/7_hu3a90b98cb33030f9fe786c53a8dbccfc_17292_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="440"
data-flex-basis="1058px"
>&lt;br>
上图是输出结果，其中红框里的就是公钥ID，记下来。&lt;br>
最后输入以下命令将公钥发布到 PGP 密钥服务器（以下三句命令发布到三个不同的服务器，任意输入一句即可，Sonatype对这三个服务器均认可）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://pool.sks-keyservers.net：11371 --send-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://pgp.mit.edu:11371 --send-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后验证是否发布成功（也是任选一句，对应上面输入的服务器）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://pool.sks-keyservers.net：11371 --recv-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://pgp.mit.edu:11371 --recv-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 刚才的公钥ID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>正常结果应该类似：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gpg: 密钥 F***9：“L***z &amp;lt;l***u@***.***&amp;gt;”未改变
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg: 合计被处理的数量：1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gpg: 未改变：1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改pomxml">修改pom.xml&lt;/h3>
&lt;p>pom.xml文件需要修改比较多，在这直接列出相关的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;licenses&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;license&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>The Apache Software License, Version 2.0&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>http://www.apache.org/licenses/LICENSE-2.0.txt&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;distribution&amp;gt;&lt;/span>repo&lt;span style="color:#5bc4bf">&amp;lt;/distribution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/license&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/licenses&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;scm&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 修改自己的地址 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;tag&amp;gt;&lt;/span>master&lt;span style="color:#5bc4bf">&amp;lt;/tag&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>https://github.com/Leibnizhu/spring-boot-starter-netty&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;connection&amp;gt;&lt;/span>scm:git:git@github.com:Leibnizhu/spring-boot-starter-netty.git&lt;span style="color:#5bc4bf">&amp;lt;/connection&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;developerConnection&amp;gt;&lt;/span>scm:git:git@github.com:Leibnizhu/spring-boot-starter-netty.git&lt;span style="color:#5bc4bf">&amp;lt;/developerConnection&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/scm&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;developers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;developer&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>***&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>***&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;email&amp;gt;&lt;/span>L***@***.***&lt;span style="color:#5bc4bf">&amp;lt;/email&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/developer&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/developers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;java.version&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/java.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javadoc.version&amp;gt;&lt;/span>8&lt;span style="color:#5bc4bf">&amp;lt;/javadoc.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;compiler-plugin.version&amp;gt;&lt;/span>3.6.2&lt;span style="color:#5bc4bf">&amp;lt;/compiler-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;war-plugin.version&amp;gt;&lt;/span>3.1.0&lt;span style="color:#5bc4bf">&amp;lt;/war-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;clean-plugin.version&amp;gt;&lt;/span>3.0.0&lt;span style="color:#5bc4bf">&amp;lt;/clean-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;resources-plugin.version&amp;gt;&lt;/span>3.0.2&lt;span style="color:#5bc4bf">&amp;lt;/resources-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;surefire-plugin.version&amp;gt;&lt;/span>2.20&lt;span style="color:#5bc4bf">&amp;lt;/surefire-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jar-plugin.version&amp;gt;&lt;/span>3.0.2&lt;span style="color:#5bc4bf">&amp;lt;/jar-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;source-plugin.version&amp;gt;&lt;/span>3.0.1&lt;span style="color:#5bc4bf">&amp;lt;/source-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javadoc-plugin.version&amp;gt;&lt;/span>2.10.4&lt;span style="color:#5bc4bf">&amp;lt;/javadoc-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;gpg-plugin.version&amp;gt;&lt;/span>1.6&lt;span style="color:#5bc4bf">&amp;lt;/gpg-plugin.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;distributionManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>oss&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://oss.sonatype.org/service/local/staging/deploy/maven2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;snapshotRepository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>oss&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;uniqueVersion&amp;gt;&lt;/span>false&lt;span style="color:#5bc4bf">&amp;lt;/uniqueVersion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://oss.sonatype.org/content/repositories/snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/snapshotRepository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/distributionManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;profiles&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;profile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>release&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-source-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${source-plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>attach-sources&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>jar-no-fork&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;attach&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/attach&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-javadoc-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${javadoc-plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>package&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>jar&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;links&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;link&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http://docs.oracle.com/javase/${javadoc.version}/docs/api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/link&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/links&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-gpg-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${gpg-plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>install&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>sign&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;distributionManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>oss&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://oss.sonatype.org/service/local/staging/deploy/maven2/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/distributionManagement&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/profile&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/profiles&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-compiler-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;source&amp;gt;&lt;/span>${java.version}&lt;span style="color:#5bc4bf">&amp;lt;/source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;target&amp;gt;&lt;/span>${java.version}&lt;span style="color:#5bc4bf">&amp;lt;/target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-jar-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${jar-plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>maven-surefire-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${surefire-plugin.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;skip&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/skip&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里加了很多插件，因为Sonatype要求有javadoc、GPG签名等等。&lt;/p>
&lt;h3 id="修改m2settingsxml">修改~/.m2/settings.xml&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;settings&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;servers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;server&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>oss&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;username&amp;gt;&lt;/span>用户名&lt;span style="color:#5bc4bf">&amp;lt;/username&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;password&amp;gt;&lt;/span>密码&lt;span style="color:#5bc4bf">&amp;lt;/password&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/server&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/servers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/settings&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="上传发布">上传&amp;amp;&amp;amp;发布&lt;/h2>
&lt;h3 id="maven上传">Maven上传&lt;/h3>
&lt;p>进入项目，输入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mvn deploy -P release -Dgpg.passphrase&lt;span style="color:#5bc4bf">=[&lt;/span>GPG密码&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>稍等片刻，期间可能会弹窗要求输入GPG密码。最后看到&lt;code>BUILD SUCCESS&lt;/code>成功。&lt;br>
注: MacOS下可能会提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>gpg: signing failed: Inappropriate ioctl for device
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请先输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>export GPG_TTY=$(tty)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再执行&lt;code>mvn deploy&lt;/code>&lt;/p>
&lt;h3 id="oss发布">OSS发布&lt;/h3>
&lt;p>打开 &lt;a class="link" href="https://oss.sonatype.org/" target="_blank" rel="noopener"
>https://oss.sonatype.org/&lt;/a> 并登陆（帐号密码与前面注册一样）。&lt;br>
点击左边的&lt;code>Staging Repositories&lt;/code>，再在右上角搜索groupid：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/8.png"
width="1371"
height="466"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/8_hue2ce7b03c4a605c561c88ae3b01d0422_30870_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/8_hue2ce7b03c4a605c561c88ae3b01d0422_30870_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="294"
data-flex-basis="706px"
>&lt;br>
选中自己的项目，点击&lt;code>Close&lt;/code>再在弹出模态窗点&lt;code>Confirm&lt;/code>，描述可以不用写：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/9.png"
width="532"
height="357"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/9_hu01e188b2ce57fcc1a27adb92a8452b69_7214_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/9_hu01e188b2ce57fcc1a27adb92a8452b69_7214_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="357px"
>&lt;br>
等一两分钟再刷新上面的列表，可以看到状态已经变成Closed（如果没有的话，在下方的Acitivity可以看到close操作的情况，看具体是什么问题，我一开始就一直说找不到签名，将GPG公钥发布后又说缺少javadoc，于是再加Maven插件生成javadoc）。
这时候再选中自己的项目，然后点&lt;code>Release&lt;/code>按钮，再点&lt;code>Confirm&lt;/code>提交，即可。&lt;/p>
&lt;h2 id="收尾工作">收尾工作&lt;/h2>
&lt;h3 id="关闭oss的issue">关闭OSS的issue&lt;/h3>
&lt;p>回到OSS &lt;a class="link" href="https://issues.sonatype.org" target="_blank" rel="noopener"
>https://issues.sonatype.org&lt;/a> ，打开自己提交的issue，回复一下，告诉工作人员已经上传发布到OSS了，很快他们就会回复说10分钟内会同步到中央仓库，2小时内可以被搜索到：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/10.png"
width="953"
height="112"
srcset="https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/10_huc18c1609081400298b4026f8251ab410_12510_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%8F%91%E5%B8%83%E9%A1%B9%E7%9B%AE%E5%88%B0Maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/10_huc18c1609081400298b4026f8251ab410_12510_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="850"
data-flex-basis="2042px"
>&lt;/p>
&lt;h3 id="等待同步中央仓库">等待同步中央仓库&lt;/h3>
&lt;p>一般等最多两个小时，就可以在 &lt;a class="link" href="https://search.maven.org" target="_blank" rel="noopener"
>https://search.maven.org&lt;/a> 搜索到自己发布的项目啦。&lt;br>
我的Spring-Boot-Starter-Netty项目地址： &lt;a class="link" href="https://search.maven.org/#artifactdetails%7Cio.gitlab.leibnizhu%7Cspring-boot-starter-netty%7C1.0%7Cjar" target="_blank" rel="noopener"
>https://search.maven.org/#artifactdetails%7Cio.gitlab.leibnizhu%7Cspring-boot-starter-netty%7C1.0%7Cjar&lt;/a>&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（四）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/</link><pubDate>Sat, 02 Sep 2017 15:11:03 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/jinjia.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（四）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现四">基于Netty的Spring Boot内置Servlet容器的实现（四）&lt;/h1>
&lt;h2 id="registration注册器的实现">Registration注册器的实现&lt;/h2>
&lt;h3 id="设计与继承结构">设计与继承结构&lt;/h3>
&lt;p>在本系列第一篇提到了&lt;code>javax.servlet.Registration&lt;/code>接口，用于实现Filter和Servlet的动态注册，这个接口相对比较简单；有两个子接口，详见下面的UML图：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration.png"
width="332"
height="119"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration_hu831b4d4bf95df234e4449ae778439cb1_7670_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration_hu831b4d4bf95df234e4449ae778439cb1_7670_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="278"
data-flex-basis="669px"
>&lt;br>
我们将要分别实现&lt;code>FilterRegistration&lt;/code>和&lt;code>ServletRegistration&lt;/code>接口，为了保持与&lt;code>Registration&lt;/code>接口的继承关系相近，我们设计了三个类，分别是抽象类，Filter注册、Servlet注册：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">AbstractNettyRegistration&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Registration&lt;span style="color:#5bc4bf">,&lt;/span> Registration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> ServletConfig&lt;span style="color:#5bc4bf">,&lt;/span> FilterConfig&lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> FilterRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span>&lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span>&lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些类构成的UML图如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration.png"
width="763"
height="305"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration_hu06c2b308d87ab306685ce16afaf10d4e_20515_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration_hu06c2b308d87ab306685ce16afaf10d4e_20515_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;h3 id="代码实现">代码实现&lt;/h3>
&lt;p>在实际实现的过程中，忽略了很多用不到的方法，着重实现了加入Mapping以及获取Filter/Servlet实例的方法。&lt;br>
加入Mapping的方法由ServletContext处理（Mapping本身也是由ServletContext维护），而获取Filter/Servlet的方法使用的是类似于懒加载单例的方法，每个Registration实例维护自己的一个Filter/Servlet实例，首次获取的时候通过反射获取到实例，并将反射获取到的实例由Registration实例持有。具体实现代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialised&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> urlPatternMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyServletRegistration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyContext context&lt;span style="color:#5bc4bf">,&lt;/span> String servletName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> context&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Servlet &lt;span style="color:#06b6ef">getServlet&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>initialised&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>initialised&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> servlet&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Servlet&lt;span style="color:#5bc4bf">)&lt;/span> Class&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">forName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClassName&lt;span style="color:#5bc4bf">()).&lt;/span>&lt;span style="color:#06b6ef">newInstance&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//反射获取实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">init&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//初始化Servlet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> initialised &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servlet&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">addMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">...&lt;/span> urlPatterns&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//在RequestUrlPatternMapper中会检查url Pattern是否冲突
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> NettyContext context &lt;span style="color:#5bc4bf">=&lt;/span> getNettyContext&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String urlPattern &lt;span style="color:#5bc4bf">:&lt;/span> urlPatterns&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addServletMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">,&lt;/span> getName&lt;span style="color:#5bc4bf">(),&lt;/span> getServlet&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Servlet in NettyServletRegistration.&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternMappings&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Arrays&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">asList&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPatterns&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashSet&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;(&lt;/span>urlPatternMappings&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> FilterRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialised&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Filter filter&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> urlPatternMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyFilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyContext context&lt;span style="color:#5bc4bf">,&lt;/span> String filterName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">,&lt;/span> Filter filter&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> context&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">filter&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> filter&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Filter &lt;span style="color:#06b6ef">getFilter&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>initialised&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>initialised&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> filter&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Filter&lt;span style="color:#5bc4bf">)&lt;/span> Class&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">forName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClassName&lt;span style="color:#5bc4bf">()).&lt;/span>&lt;span style="color:#06b6ef">newInstance&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//反射获取实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">init&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//初始化Filter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> initialised &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filter&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addMappingForUrlPatterns&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EnumSet&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>DispatcherType&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> dispatcherTypes&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isMatchAfter&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">...&lt;/span> urlPatterns&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyContext context &lt;span style="color:#5bc4bf">=&lt;/span> getNettyContext&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String urlPattern &lt;span style="color:#5bc4bf">:&lt;/span> urlPatterns&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addFilterMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>dispatcherTypes&lt;span style="color:#5bc4bf">,&lt;/span> isMatchAfter&lt;span style="color:#5bc4bf">,&lt;/span> urlPattern&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternMappings&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Arrays&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">asList&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPatterns&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="filterchain过滤器链的实现">FilterChain过滤器链的实现&lt;/h2>
&lt;p>大家应该都知道过滤器链的概念，所有过滤器都在过滤器链上，当有请求进入，将依次经过每个适用的过滤器（根据过滤器的Url Pattern与请求的路径而不同），过滤器里执行&lt;code>doFilter()&lt;/code>方法让过滤器链执行下一个过滤器，直到最后一个，则执行Servlet的&lt;code>service()&lt;/code>方法。而过滤器链对应的接口&lt;code>javax.servlet.FilterChain&lt;/code>里面就一个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">FilterChain&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doFilter&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span> ServletRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServletResponse response &lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException&lt;span style="color:#5bc4bf">,&lt;/span> ServletException&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>显然，实现&lt;code>FilterChain&lt;/code>接口，应该要维护一个过滤器的数组或者List，而在&lt;code>doFilter()&lt;/code>方法里面，应该判断有没有下一个过滤器，有则调用其&lt;code>doFilter()&lt;/code>方法，无则调用当前请求对应Servlet实例的&lt;code>service()&lt;/code>方法，可以用迭代器或者记录游标（数组或List的下标）来实现。具体代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterChain&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> FilterChain &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 考虑到每个请求只有一个线程处理，而且ServletContext在每次请求时都会new 一个SimpleFilterChain对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以这里把过滤器链的Iterator作为FilterChain的私有变量，没有线程安全问题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filterIterator&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyFilterChain&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Servlet servlet&lt;span style="color:#5bc4bf">,&lt;/span> Iterable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filters&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">filterIterator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> checkNotNull&lt;span style="color:#5bc4bf">(&lt;/span>filters&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">iterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> checkNotNull&lt;span style="color:#5bc4bf">(&lt;/span>servlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 每个Filter在处理完请求之后调用FilterChain的这个方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 这时候应该找到下一个Filter，调用其doFilter()方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 如果没有下一个了，应该调用servlet的service()方法了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServletRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServletResponse response&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException&lt;span style="color:#5bc4bf">,&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>filterIterator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasNext&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Filter filter &lt;span style="color:#5bc4bf">=&lt;/span> filterIterator&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">doFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">,&lt;/span> response&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">service&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">,&lt;/span> response&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="httpservletrequest的实现">HttpServletRequest的实现&lt;/h2>
&lt;p>接口&lt;code>javax.servlet.http.HttpServletRequest&lt;/code>的方法比较多，大概可以分为Cookie相关、Header相关、各种路径相关、Session相关、请求参数相关、请求协议/地址/端口相关、Attributes相关、异步相关、multipart/form-data相关（上传文件）等等方法，以上提到的方法本文基本实现了，还有一些没实现的是暂时用不到的。&lt;/p>
&lt;h3 id="cookie相关方法">Cookie相关方法&lt;/h3>
&lt;p>Cookie使用“懒解析”，就是用标识&lt;code>isCookieParsed&lt;/code>记录Cookie是否被解析过，初始化Request对象的时候不解析，在获取Cookiea相关方法被调用的时候再判断是否未解析，若未解析则解析再返回，否则直接返回。&lt;code>NettyHttpServletRequest&lt;/code>的构造方法传入了netty的&lt;code>HttpHeaders&lt;/code>实例，可以从中获取Cookie请求头，再进行解析。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Cookie 相关方法 开始 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> cookies&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">transient&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isCookieParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">getCookies&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>isCookieParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseCookie&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cookies&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 解析request中的Cookie到本类的cookies数组中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseCookie&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isCookieParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String cookieOriginStr &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>cookieOriginStr &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">netty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">handler&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codec&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cookie&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Cookie&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> nettyCookies &lt;span style="color:#5bc4bf">=&lt;/span> ServerCookieDecoder&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">LAX&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">decode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookieOriginStr&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>nettyCookies&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cookies&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Cookie&lt;span style="color:#5bc4bf">[&lt;/span>nettyCookies&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">()];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">netty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">handler&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codec&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cookie&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Cookie&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> itr &lt;span style="color:#5bc4bf">=&lt;/span> nettyCookies&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">iterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> i &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>itr&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasNext&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">netty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">handler&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">codec&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cookie&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Cookie&lt;/span> nettyCookie &lt;span style="color:#5bc4bf">=&lt;/span> itr&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cookie servletCookie &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Cookie&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">name&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// servletCookie.setMaxAge(Ints.checkedCast(nettyCookie.maxAge()));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">domain&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> servletCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDomain&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">domain&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">path&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> servletCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setPath&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">path&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setHttpOnly&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>nettyCookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isHttpOnly&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cookies&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">++]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletCookie&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isCookieParsed&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Cookie 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="header相关方法">Header相关方法&lt;/h3>
&lt;p>上面提到&lt;code>NettyHttpServletRequest&lt;/code>的构造方法传入了netty的&lt;code>HttpHeaders&lt;/code>实例，可以从中获取所有请求头，而Header相关方法的实现就靠他了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Header 相关方法 开始 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> HttpHeaders headers&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">long&lt;/span> &lt;span style="color:#06b6ef">getDateHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getHeaders&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Collections&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enumeration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getHeaderNames&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Collections&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">enumeration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">names&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getIntHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String headerStringValue &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>headerStringValue &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">parseInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>headerStringValue&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Header 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="session相关方法">Session相关方法&lt;/h3>
&lt;p>Session相关方法相对多一些。Session的解析分两种，首先尝试从Cookie中获取Cookie（名为JSESSIONID），如果没有，则从请求路径中找类似&amp;quot;;jsessionid=*******&amp;ldquo;的参数作为SessionID。拿到SessionID后，再调用SessionManager的方法获取Session对象；而根据从哪里解析到的SessionID可以设置&lt;code>isCookieSession&lt;/code>和&lt;code>isURLSession&lt;/code>两个属性，用于&lt;code>isRequestedSessionIdFromCookie()&lt;/code>和&lt;code>isRequestedSessionIdFromURL()&lt;/code>方法。如果拿不到SessionID，则调用SessionManager的方法创建一个新Session。&lt;br>
至于Session和SessionManager的实现我们在下一小节再讲，值得注意的是，&lt;code>getSession()&lt;/code>方法返回的并不是我们定义的Session类实例，而是其门面类，是出于安全的考虑；这一点参考了Tomcat的做法（Tomcat的Request、Response、Session等对象都是用门面模式）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> NettyHttpSession session&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isCookieSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isURLSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 先后看请求路径和Cookie中是否有sessionid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 有，则从SessionManager获取session对象放入session属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 如果session对象过期，则创建一个新的并放入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 无，则创建一个新Session并放入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseSession&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sessionId&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession curSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//从Cookie解析SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> sessionId &lt;span style="color:#5bc4bf">=&lt;/span> getSessionIdFromCookie&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sessionId &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curSession &lt;span style="color:#5bc4bf">=&lt;/span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSessionManager&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sessionId&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> curSession&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isCookieSession&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recoverySession&lt;span style="color:#5bc4bf">(&lt;/span>curSession&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isCookieSession&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 从请求路径解析SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> sessionId &lt;span style="color:#5bc4bf">=&lt;/span> getSessionIdFromUrl&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curSession &lt;span style="color:#5bc4bf">=&lt;/span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSessionManager&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sessionId&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> curSession&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isURLSession&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recoverySession&lt;span style="color:#5bc4bf">(&lt;/span>curSession&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Cookie和请求参数中都没拿到Session，则创建一个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 从URL解析到的SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getSessionIdFromUrl&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder u &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">uri&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> sessionStart &lt;span style="color:#5bc4bf">=&lt;/span> u&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> NettyHttpSession&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SESSION_REQUEST_PARAMETER_NAME&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sessionStart &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#39;;&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> 1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>sessionEnd &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#39;?&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> 1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>sessionEnd &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">// still
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> u&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> NettyHttpSession&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SESSION_REQUEST_PARAMETER_NAME&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> 2&lt;span style="color:#5bc4bf">,&lt;/span> sessionEnd&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 从Cookie解析到的SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getSessionIdFromCookie&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> cookies &lt;span style="color:#5bc4bf">=&lt;/span> getCookies&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookies &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Cookie cookie &lt;span style="color:#5bc4bf">:&lt;/span> cookies&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SESSION_COOKIE_NAME&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getValue&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 恢复旧Session
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param curSession 要恢复的Session对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">recoverySession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession curSession&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setNew&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletContext&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSessionManager&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">updateAccessTime&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">boolean&lt;/span> create&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> valid &lt;span style="color:#5bc4bf">=&lt;/span> isRequestedSessionIdValid&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//在管理器存在，且没到期
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//可用则直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>valid&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//不可用则判断是否新建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>create&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//如果过期了设为null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//不可用且允许新建则新建之
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> getSession&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">changeSessionId&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">session&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">createtSession&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSessionManager&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">createSession&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdValid&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSessionManager&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">checkValid&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromCookie&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isCookieSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromURL&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isURLSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Deprecated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromUrl&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isRequestedSessionIdFromURL&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getRequestedSessionId&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Session 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="httpservletresponse实现">HttpServletResponse实现&lt;/h2>
&lt;p>HttpServletResponse接口相对简单一点，方法少一点，下面列举出部分方法的实现。&lt;/p>
&lt;h3 id="header相关方法-1">Header相关方法&lt;/h3>
&lt;p>这里的Header指响应头。&lt;code>NettyHttpServletResponse&lt;/code>的构造方法里传入了netty的&lt;code>HttpResponse&lt;/code>对象，默认的调用是传入一个200的正常HTTP响应。我们可以通过这个&lt;code>HttpResponse&lt;/code>对象的&lt;code>headers()&lt;/code>方法对响应头进行操作。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setDateHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">long&lt;/span> date&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> date&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addDateHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">long&lt;/span> date&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> date&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> String value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0 &lt;span style="color:#5bc4bf">||&lt;/span> value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isCommitted&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>setHeaderField&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">setHeaderField&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> String value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">char&lt;/span> c &lt;span style="color:#5bc4bf">=&lt;/span> name&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">charAt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>0&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//减少判断的时间，提高效率
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#39;C&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> c &lt;span style="color:#5bc4bf">||&lt;/span> &lt;span style="color:#48b685">&amp;#39;c&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> c&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CONTENT_TYPE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">contentEqualsIgnoreCase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setContentType&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> String value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0 &lt;span style="color:#5bc4bf">||&lt;/span> value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isCommitted&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>setHeaderField&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setIntHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isCommitted&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addIntHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isCommitted&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="getnettyresponse方法">getNettyResponse()方法&lt;/h3>
&lt;p>方法&lt;code>public HttpResponse getNettyResponse()&lt;/code>是我们自己定义的，用于响应输出流在写入时做的一些基本处理，主要是请求头的处理，具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 设置基本的请求头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpResponse &lt;span style="color:#06b6ef">getNettyResponse&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>committed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> response&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> committed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpHeaders headers &lt;span style="color:#5bc4bf">=&lt;/span> response&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> contentType&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> characterEncoding &lt;span style="color:#5bc4bf">?&lt;/span> contentType &lt;span style="color:#5bc4bf">:&lt;/span> contentType &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;; charset=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> characterEncoding&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//Content Type 响应头的内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> headers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CONTENT_TYPE&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CharSequence date &lt;span style="color:#5bc4bf">=&lt;/span> getFormattedDate&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">DATE&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> date&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">// 时间日期响应头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> headers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SERVER&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServerInfo&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span> &lt;span style="color:#776e71">//服务器信息响应头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// cookies处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// long curTime = System.currentTimeMillis(); //用于根据maxAge计算Cookie的Expires
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//先处理Session ，如果是新Session需要通过Cookie写入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">isNew&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sessionCookieStr &lt;span style="color:#5bc4bf">=&lt;/span> NettyHttpSession&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SESSION_COOKIE_NAME&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getRequestedSessionId&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;; path=/; domain=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServerName&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SET_COOKIE&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sessionCookieStr&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他业务或框架设置的cookie，逐条写入到响应头去
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Cookie cookie &lt;span style="color:#5bc4bf">:&lt;/span> cookies&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sb &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">()).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getValue&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;; max-Age=&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMaxAge&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPath&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;; path=&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPath&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDomain&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;; domain=&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getDomain&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpHeaderNames&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SET_COOKIE&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> response&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="session实现">Session实现&lt;/h2>
&lt;p>Session相关的包括Session实现类&lt;code>NettyHttpSession&lt;/code>，Sessionn门面包装类&lt;code>NettyHttpSessionFacade&lt;/code>，以及Session管理器&lt;code>NettySessionManager&lt;/code>。&lt;br>
门面类前面提及到了，构造的时候传入一个&lt;code>NettyHttpSession&lt;/code>实例并持有，所有&lt;code>HttpSession&lt;/code>接口的方法都调用&lt;code>NettyHttpSession&lt;/code>实例的对应方法去处理。&lt;br>
Session管理器&lt;code>NettySessionManager&lt;/code>是单例，由&lt;code>NettyContext&lt;/code>实例持有，负责存储所有Session的映射，方便其他类根据SessionID去获取Session对象，提供创建新Session的方法，允许更新Session访问时间，同时定时清理过期的Session。&lt;br>
每个&lt;code>NettyHttpSession&lt;/code>实例都持有&lt;code>NettySessionManager&lt;/code>的引用，实现了&lt;code>HttpSession&lt;/code>接口。&lt;/p>
&lt;h3 id="nettyhttpsession">NettyHttpSession&lt;/h3>
&lt;p>实现比较简单，Attribute由对象持有的HashMap进行存储，自身保存ID、创建时间、访问时间、生命周期等信息。
具体代码如下（部分过时的方法、简单的getter不列出）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyHttpSession&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> HttpSession&lt;span style="color:#5bc4bf">,&lt;/span> Serializable &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SESSION_COOKIE_NAME &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;JSESSIONID&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SESSION_REQUEST_PARAMETER_NAME &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;jsessionid&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> NettySessionManager manager&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">long&lt;/span> creationTime&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">long&lt;/span> lastAccessedTime&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> interval &lt;span style="color:#5bc4bf">=&lt;/span> NettySessionManager&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SESSION_LIFE_SECONDS&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String id&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession&lt;span style="color:#5bc4bf">(&lt;/span>String id&lt;span style="color:#5bc4bf">,&lt;/span> NettySessionManager manager&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">long&lt;/span> curTime &lt;span style="color:#5bc4bf">=&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">creationTime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curTime&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">lastAccessedTime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curTime&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">id&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> id&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">manager&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> manager&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sessionFacade&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpSessionFacade&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> HttpSession sessionFacade&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> sessionFacade&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">updateAccessTime&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastAccessedTime &lt;span style="color:#5bc4bf">=&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setMaxInactiveInterval&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> interval&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">interval&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> interval&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ConcurrentHashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> Object value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">invalidate&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">clear&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manager&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">invalidate&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manager &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isNew &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isNew&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isNew&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setNew&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">boolean&lt;/span> isNew&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isNew&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> isNew&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 是否过期
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">expire&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span> creationTime &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> interval &lt;span style="color:#5bc4bf">*&lt;/span> 1000&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nettysessionmanager">NettySessionManager&lt;/h3>
&lt;p>Session管理器没有现成的接口，因为比较简单所以也没抽出接口，自己在实现的过程中根据需求写了一些public方法：&lt;/p>
&lt;ul>
&lt;li>使用ConcurrentHashMap存储所有Session。&lt;/li>
&lt;li>在构造的同时开启一个线程，每隔&lt;code>SESSION_LIFE_CHECK_INTER&lt;/code>毫秒扫描所有Session判断是否过期需要清除（有待优化，比如等待时间按最快过期的session的过期时间，或者记录预计下次需要处理的个数，减少遍历的数量）。&lt;/li>
&lt;li>SessionID是6位随机数字+时间戳翻转。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettySessionManager&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> NettyContext servletContext&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> NettyHttpSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> sessions &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ConcurrentHashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_SECONDS &lt;span style="color:#5bc4bf">=&lt;/span> 60 &lt;span style="color:#5bc4bf">*&lt;/span> 30&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_MILLISECONDS &lt;span style="color:#5bc4bf">=&lt;/span> SESSION_LIFE_SECONDS &lt;span style="color:#5bc4bf">*&lt;/span> 1000&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_CHECK_INTER &lt;span style="color:#5bc4bf">=&lt;/span> 1000 &lt;span style="color:#5bc4bf">*&lt;/span> 60&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettySessionManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyContext servletContext&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletContext&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletContext&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Thread&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> checkInvalidSessions&lt;span style="color:#5bc4bf">(),&lt;/span> &lt;span style="color:#48b685">&amp;#34;Session-Check&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">invalidate&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpSession session&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessions&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">updateAccessTime&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession session&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">updateAccessTime&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">checkValid&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession session&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> sessions&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">expire&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String id&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> id &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> sessions&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>id&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">createSession&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String id &lt;span style="color:#5bc4bf">=&lt;/span> createUniqueSessionId&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession newSession &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpSession&lt;span style="color:#5bc4bf">(&lt;/span>id&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessions&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>id &lt;span style="color:#5bc4bf">,&lt;/span>newSession&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> newSession&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">createUniqueSessionId&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String prefix &lt;span style="color:#5bc4bf">=&lt;/span> String&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>100000 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">nextInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>899999&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">()).&lt;/span>&lt;span style="color:#06b6ef">reverse&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>prefix&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setOldSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession session&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setNew&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 超时的Session无效化，定期执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">checkInvalidSessions&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Runnable &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Session Manager expire-checking thread has been started...&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sleep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SESSION_LIFE_CHECK_INTER&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>InterruptedException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">long&lt;/span> curTime &lt;span style="color:#5bc4bf">=&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NettyHttpSession session &lt;span style="color:#5bc4bf">:&lt;/span> sessions&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">values&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">expire&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Session(ID={}) is invalidated by Session Manager&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">invalidate&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可以改进的地方">可以改进的地方&lt;/h3>
&lt;ul>
&lt;li>Session持久化，包括可选的持久化时间间隔、shutdown自动持久化、startup自动读入。&lt;/li>
&lt;li>Redis集中存储Session，便于服务集群使用&lt;/li>
&lt;li>优化解析速度&lt;/li>
&lt;/ul></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（三）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/</link><pubDate>Sun, 27 Aug 2017 08:52:03 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/yuyuko2.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（三）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现三">基于Netty的Spring Boot内置Servlet容器的实现（三）&lt;/h1>
&lt;h2 id="embeddedservletcontainer实现">EmbeddedServletContainer实现&lt;/h2>
&lt;h3 id="spring-boot启动过程与embeddedservletcontainer">Spring Boot启动过程与EmbeddedServletContainer&lt;/h3>
&lt;p>一般来说，Spring Boot的应用如果使用内置Servlet容器单独运行，我们都会在main()方法中调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object source&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">...&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法。通过&lt;code>source&lt;/code>参数构造一个&lt;code>SpringApplication&lt;/code>对象再调用其&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> ConfigurableApplicationContext &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">...&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，这个方法先通过&lt;code>createApplicationContext()&lt;/code>创建一个&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>对象，随后会调用到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">refresh&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ApplicationContext applicationContext&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，这个方法会调用到&lt;code>AbstractApplicationContext&lt;/code>的&lt;code>refresh()&lt;/code>方法。而通过下面的UML图可以看到，&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>是&lt;code>AbstractApplicationContext&lt;/code>的子类。
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext.png"
width="1259"
height="674"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext_hubb628447eb401c9fce10d7720ddf2d45_46426_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext_hubb628447eb401c9fce10d7720ddf2d45_46426_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>
实际上，这里使用了模板设计模式，&lt;code>refresh()&lt;/code>的具体流程由父类&lt;code>AbstractApplicationContext&lt;/code>定义，具体的一些操作由子类去实现，在子类调用&lt;code>refresh()&lt;/code>方法的时候，调用的是子类实现的操作方法，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">onRefresh&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> BeansException
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法。这个方法在&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>的父类&lt;code>EmbeddedWebApplicationContext&lt;/code>中有实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">onRefresh&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">onRefresh&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">createEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Throwable var2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ApplicationContextException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Unable to start embedded container&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> var2&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">createEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServletContext localServletContext &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServletContext&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>localContainer &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> localServletContext &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainerFactory containerFactory &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getEmbeddedServletContainerFactory&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> containerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> ServletContextInitializer&lt;span style="color:#5bc4bf">[]{&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSelfInitializer&lt;/span>&lt;span style="color:#5bc4bf">()});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>localServletContext &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSelfInitializer&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">onStartup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>localServletContext&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletException var4&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ApplicationContextException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cannot initialize servlet context&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> var4&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">initPropertySources&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查embeddedServletContainer私有变量是否为空，为空的话获取&lt;code>EmbeddedServletContainerFactory&lt;/code>工厂类（就是我们写的&lt;code>EmbeddedNettyFactory&lt;/code>），获取到&lt;code>EmbeddedServletContainer&lt;/code>实例并赋值给&lt;code>this.embeddedServletContainer&lt;/code>。&lt;br>
在模板方法&lt;code>AbstractApplicationContext.refresh()&lt;/code>中，调用&lt;code>onRefresh()&lt;/code>后，会继续调用&lt;code>finishRefresh()&lt;/code>，通过上面的分析我们知道实际调用的是&lt;code>EmbeddedWebApplicationContext.finishRefresh()&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">finishRefresh&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">finishRefresh&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>localContainer &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">publishEvent&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerInitializedEvent&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> localContainer&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">startEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>localContainer &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localContainer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> localContainer&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到他调用了私有方法&lt;code>startEmbeddedServletContainer()&lt;/code>启动容器，在这个方法里面，获取&lt;code>this.embeddedServletContainer&lt;/code>（就是我们本文要实现的&lt;code>NettyContainer&lt;/code>）然后执行其&lt;code>start()&lt;/code>方法，以启动内置Servlet容器。&lt;br>
因此我们应该在&lt;code>EmbeddedServletContainer&lt;/code>实现类的&lt;code>start()&lt;/code>对Netty服务器进行初始化。&lt;/p>
&lt;h3 id="nettycontainer">NettyContainer&lt;/h3>
&lt;p>自己编写的内置Servlet容器需要实现&lt;code>EmbeddedServletContainer&lt;/code>接口，具体包括以下三个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">EmbeddedServletContainer&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//Spring Boot启动时调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">stop&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//Spring Boot关闭时调用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getPort&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//获取端口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这几个方法的用途比较清晰明确了，接下来就是实现。&lt;/p>
&lt;h4 id="构造方法">构造方法&lt;/h4>
&lt;p>首先在之前写的&lt;code>EmbeddedNettyFactory&lt;/code>工厂类里面，需要调用将要写的&lt;code>EmbeddedNettyFactory&lt;/code>的构造方法，并将必要的参数传入其构造方法，比如端口号、以及已经i初始化完毕的ServletContext实例。
构造方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> InetSocketAddress address&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//监听端口地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> NettyContext context&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//Context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyContainer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>InetSocketAddress address&lt;span style="color:#5bc4bf">,&lt;/span> NettyContext context&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">address&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> address&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> context&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>EmbeddedNettyFactory&lt;/code>中修改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServletContextInitializer&lt;span style="color:#5bc4bf">...&lt;/span> initializers&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*…………………………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//return null;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyContainer&lt;span style="color:#5bc4bf">(&lt;/span>address&lt;span style="color:#5bc4bf">,&lt;/span> context&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//初始化容器并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getPort&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> address&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPort&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="start">start()&lt;/h4>
&lt;p>通过以上的分析，我们知道&lt;code>EmbeddedServletContainer&lt;/code>的&lt;code>start()&lt;/code>是由&lt;code>AbstractApplicationContext.refresh()&lt;/code>模板方法负责调用启动的，我们应该在这个方法里面初始化Netty服务器。Netty的启动大家应该比较清楚了，无非就是设置两个&lt;code>EventLoopGroup&lt;/code>用于处理请求的获取与读写，并设置&lt;code>Pipeline&lt;/code>上的&lt;code>Handler&lt;/code>，最后绑定端口，启动服务。以下是具体实现的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setInitialised&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServerBootstrap sb &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServerBootstrap&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//根据不同系统初始化对应的EventLoopGroup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Linux&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>StandardSystemProperty&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">OS_NAME&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">()))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EpollEventLoopGroup&lt;span style="color:#5bc4bf">(&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EpollEventLoopGroup&lt;span style="color:#5bc4bf">();&lt;/span>&lt;span style="color:#776e71">//不带参数，线程数传入0,实际解析为 Math.max(1, SystemPropertyUtil.getInt(&amp;#34;io.netty.eventLoopThreads&amp;#34;, Runtime.getRuntime().availableProcessors() * 2));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channel&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EpollServerSocketChannel&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">group&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>bossGroup&lt;span style="color:#5bc4bf">,&lt;/span> workerGroup&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EpollChannelOption&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TCP_CORK&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NioEventLoopGroup&lt;span style="color:#5bc4bf">(&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NioEventLoopGroup&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channel&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NioServerSocketChannel&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">group&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>bossGroup&lt;span style="color:#5bc4bf">,&lt;/span> workerGroup&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelOption&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TCP_NODELAY&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelOption&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SO_REUSEADDR&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">option&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelOption&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SO_BACKLOG&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> 100&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Bootstrap configuration: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletExecutor &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultEventExecutorGroup&lt;span style="color:#5bc4bf">(&lt;/span>50&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">childHandler&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> ChannelInitializer&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>SocketChannel&lt;span style="color:#5bc4bf">&amp;gt;()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">initChannel&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SocketChannel ch&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChannelPipeline p &lt;span style="color:#5bc4bf">=&lt;/span> ch&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pipeline&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;codec&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HttpServerCodec&lt;span style="color:#5bc4bf">(&lt;/span>4096&lt;span style="color:#5bc4bf">,&lt;/span> 8192&lt;span style="color:#5bc4bf">,&lt;/span> 8192&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span> &lt;span style="color:#776e71">//HTTP编码解码Handler
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;servletInput&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletContentHandler&lt;span style="color:#5bc4bf">(&lt;/span>servletContext&lt;span style="color:#5bc4bf">));&lt;/span> &lt;span style="color:#776e71">//处理请求，读入数据，生成Request和Response对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>checkNotNull&lt;span style="color:#5bc4bf">(&lt;/span>servletExecutor&lt;span style="color:#5bc4bf">),&lt;/span> &lt;span style="color:#48b685">&amp;#34;filterChain&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RequestDispatcherHandler&lt;span style="color:#5bc4bf">(&lt;/span>servletContext&lt;span style="color:#5bc4bf">));&lt;/span> &lt;span style="color:#776e71">//获取请求分发器，让对应的Servlet处理请求，同时处理404情况
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setInitialised&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChannelFuture future &lt;span style="color:#5bc4bf">=&lt;/span> sb&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">bind&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>address&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">awaitUninterruptibly&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Throwable cause &lt;span style="color:#5bc4bf">=&lt;/span> future&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">cause&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> cause&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Could not start Netty server&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> cause&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>servletContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServerInfo&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; started on port: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> getPort&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有两个&lt;code>Handler&lt;/code>类是我们实现的——&lt;code>ServletContentHandler&lt;/code>和&lt;code>RequestDispatcherHandler&lt;/code>，我们将在后面讲解。&lt;/p>
&lt;h4 id="stop">stop()&lt;/h4>
&lt;p>在&lt;code>stop()&lt;/code>方法里应该关闭在&lt;code>start()&lt;/code>方法中开启的资源，以便Spring Boot关闭，防止资源/内存泄漏：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">stop&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> bossGroup&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">await&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> workerGroup&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">await&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> servletExecutor&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletExecutor&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">await&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>InterruptedException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Container stop interrupted&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="netty服务设计">Netty服务设计&lt;/h2>
&lt;h3 id="设计思路">设计思路&lt;/h3>
&lt;p>看过Tomcat之类Servlet容器的源码的话，应该对Servleti容器设计有一点概念。&lt;/p>
&lt;ol>
&lt;li>首先我们需要通过Socket，处理HTTP连接，获取请求的数据，这一块可通过netty的API进行。&lt;/li>
&lt;li>然后对接收到的数据进行解析封装成&lt;code>HttpServletRequest&lt;/code>和&lt;code>HttpServletResponse&lt;/code>对象，这一块需要netty自带的http解码编码器，并自定义Handler来i实现。&lt;/li>
&lt;li>而&lt;code>HttpServletRequest&lt;/code>本身也需要一些处理，比如Cookie、Session、Attributes（懒解析），需要自行实现。&lt;/li>
&lt;li>接着需要对请求路径进行匹配，找到对应处理的Servlet， 这一部分前面已经实现了（2017-08-26似乎还有点Bug需要解决）。&lt;/li>
&lt;li>接下来就是调用对应Servlet的&lt;code>service()&lt;/code>方法，等待返回（在容器启动的时候需要对有on-startup的Servlet进行&lt;code>init()&lt;/code>方法的调用）。&lt;/li>
&lt;li>Servlet返回后，包装响应，处理异常和HTTP错误。&lt;/li>
&lt;li>HTTP编码响应返回。&lt;/li>
&lt;li>容器关闭的时候，调用所有已注册的Servlet的&lt;code>destroy()&lt;/code>方法，并关闭打开的资源。&lt;/li>
&lt;/ol>
&lt;h3 id="自定义netty的handler处理请求响应">自定义Netty的Handler处理请求响应&lt;/h3>
&lt;p>根据前面的分析，我们的netty服务需要三个Handler，其中HTTP解码编码的有现成的&lt;code>HttpServerCodec&lt;/code>，另外两个则需要我们自己实现。&lt;br>
首先是对请求进行封装的Handler， 功能：&lt;/p>
&lt;ul>
&lt;li>channel激活时， 开启一个新的输入流&lt;/li>
&lt;li>有信息/请求进入时，封装请求和响应对象，执行读操作&lt;/li>
&lt;li>channel恢复时，关闭输入流，等待下一次连接到来&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelActive&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HttpRequestInputStream&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channel&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> Object msg&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>msg &lt;span style="color:#815ba4">instanceof&lt;/span> HttpRequest&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpRequest request &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpRequest&lt;span style="color:#5bc4bf">)&lt;/span> msg&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpResponse response &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultHttpResponse&lt;span style="color:#5bc4bf">(&lt;/span>HttpVersion&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> HttpResponseStatus&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">OK&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setKeepAlive&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>response&lt;span style="color:#5bc4bf">,&lt;/span> HttpUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isKeepAlive&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpServletResponse servletResponse &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpServletResponse&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> servletContext&lt;span style="color:#5bc4bf">,&lt;/span> response&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpServletRequest servletRequest &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpServletRequest&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> servletContext&lt;span style="color:#5bc4bf">,&lt;/span> request&lt;span style="color:#5bc4bf">,&lt;/span> servletResponse&lt;span style="color:#5bc4bf">,&lt;/span> inputStream&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">is100ContinueExpected&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span> &lt;span style="color:#776e71">//请求头包含Expect: 100-continue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">write&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse&lt;span style="color:#5bc4bf">(&lt;/span>HttpVersion&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> HttpResponseStatus&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CONTINUE&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">voidPromise&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">fireChannelRead&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>servletRequest&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>msg &lt;span style="color:#815ba4">instanceof&lt;/span> HttpContent&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addContent&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>HttpContent&lt;span style="color:#5bc4bf">)&lt;/span> msg&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelInactive&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后是一个处理URL匹配分发请求的Handler，完成以下功能：&lt;/p>
&lt;ul>
&lt;li>读入请求数据时，对请求URI获取分发器&lt;/li>
&lt;li>找不到返回404错误.&lt;/li>
&lt;li>找到则调用FilterChain进行业务逻辑&lt;/li>
&lt;li>最后关闭输出流&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelReadComplete&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">flush&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead0&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> NettyHttpServletRequest request&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletResponse servletResponse &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpServletResponse&lt;span style="color:#5bc4bf">)&lt;/span> request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServletResponse&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyRequestDispatcher dispatcher &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>NettyRequestDispatcher&lt;span style="color:#5bc4bf">)&lt;/span> context&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getRequestDispatcher&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getRequestURI&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>dispatcher &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletResponse&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sendError&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>404&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">dispatch&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">,&lt;/span> servletResponse&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">finally&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isAsyncStarted&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletResponse&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getOutputStream&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">exceptionCaught&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> Throwable cause&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Unexpected exception caught during request&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> cause&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（二）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/</link><pubDate>Thu, 24 Aug 2017 17:43:37 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/sanae.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（二）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现二">基于Netty的Spring Boot内置Servlet容器的实现（二）&lt;/h1>
&lt;h2 id="实现servlet-context接口">实现Servlet Context接口&lt;/h2>
&lt;h3 id="servlet-context接口简介">Servlet Context接口简介&lt;/h3>
&lt;p>接口&lt;code>ServletContext&lt;/code>定义了一系列方法用于与相应的servlet容器通信，比如：获得文件的MIME类型，分派请求，或者是向日志文件写日志等。每一个web-app只能有一个&lt;code>ServletContext&lt;/code>，webapp可以是一个放置有web application 文件的文件夹，也可以是一个.war的文件。&lt;code>ServletContext&lt;/code>对象包含在&lt;code>ServletConfig&lt;/code>对象之中，&lt;code>ServletConfig&lt;/code>对象在servlet初始化时提供servlet对象。
接口&lt;code>ServletContext&lt;/code>定义的方法比较多，大致可以分为：添加和配置Servlet、添加和配置Filter、添加和配置Listener、添加Servlet、Filter和Listener的注解处理需求、初始化参数、Context属性、资源获取等几大类方法。&lt;br>
具体可以参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html" target="_blank" rel="noopener"
>Tomcat的JavaDoc&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://waylau.gitbooks.io/servlet-3-1-specification/docs/Servlet%20Context/4.1%20Introduction%20to%20the%20ServletContext%20Interface.html" target="_blank" rel="noopener"
>中文翻译的文档 ServletContext 接口介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="实现">实现&lt;/h3>
&lt;p>实现的思想：&lt;/p>
&lt;ul>
&lt;li>不处理的：InitParameter相关的方法、Listener相关方法——目前用不到&lt;/li>
&lt;li>以后处理的：Session Cookie相关的方法等待实现&lt;/li>
&lt;li>Context的Attributes用&lt;code>Hashtable&lt;/code>实现，主要是考虑到相关的方法需要返回&lt;code>Enumeration&lt;/code>类型，用&lt;code>Hashtable&lt;/code>有现成方法可以返回。&lt;/li>
&lt;li>Filter的注册用&lt;code>HashMap&lt;/code>存储FilterName及对应&lt;code>Registration&lt;/code>的映射关系，暂时还没处理Filter的URL Pattern（所有注册的Filter对所有请求都会过滤，暂时可以满足需求）&lt;/li>
&lt;li>Servlet的注册也是用&lt;code>HashMap&lt;/code>存储ServletName及对应&lt;code>Registration&lt;/code>的映射关系，以及URL Pattern和ServletName的映射关系（相当与&lt;code>web.xml&lt;/code>里的配置）&lt;/li>
&lt;/ul>
&lt;p>这里列出主要的方法，一些没具体实现，或者比较简单的方法就省略了（部分代码参考了Tomcat 8.0.45的源码）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.core&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * ServletContext实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyContext&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> ServletContext &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String contextPath&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//保证不以“/”结尾
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> ClassLoader classLoader&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String serverInfo&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialized&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//记录是否初始化完毕
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> RequestUrlPatternMapper servletUrlPatternMapper&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> NettyServletRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//getServletRegistration()等方法要用，key是ServletName
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> NettyFilterRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filters &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//getFilterRegistration()等方法要用，Key是FilterName
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servletMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//保存请求路径urlPattern与Servlet名的映射,urlPattern是不带contextPath的
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 默认构造方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param contextPath contextPath
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param classLoader classLoader
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param serverInfo 服务器信息，写在响应的server响应头字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String contextPath&lt;span style="color:#5bc4bf">,&lt;/span> ClassLoader classLoader&lt;span style="color:#5bc4bf">,&lt;/span> String serverInfo&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>contextPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contextPath &lt;span style="color:#5bc4bf">=&lt;/span> contextPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>0&lt;span style="color:#5bc4bf">,&lt;/span> contextPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">contextPath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> contextPath&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">classLoader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> classLoader&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">serverInfo&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> serverInfo&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletUrlPatternMapper &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RequestUrlPatternMapper&lt;span style="color:#5bc4bf">(&lt;/span>servletMappings&lt;span style="color:#5bc4bf">,&lt;/span> contextPath&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkNotInitialised&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkState&lt;span style="color:#5bc4bf">(!&lt;/span>isInitialised&lt;span style="color:#5bc4bf">(),&lt;/span> &lt;span style="color:#48b685">&amp;#34;This method can not be called before the context has been initialised&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addServletMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String urlPattern&lt;span style="color:#5bc4bf">,&lt;/span> String name&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkNotInitialised&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletMappings&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">,&lt;/span> checkNotNull&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletUrlPatternMapper&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addWrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">,&lt;/span> name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addFilterMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EnumSet&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>DispatcherType&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> dispatcherTypes&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isMatchAfter&lt;span style="color:#5bc4bf">,&lt;/span> String urlPattern&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkNotInitialised&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 过滤器的urlPatter解析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getMimeType&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String file&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> MimeTypeUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMimeTypeByFileName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>file&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getResourcePaths&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String path&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> thePaths &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashSet&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">+=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String basePath &lt;span style="color:#5bc4bf">=&lt;/span> getRealPath&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>basePath &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File theBaseDir &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File&lt;span style="color:#5bc4bf">(&lt;/span>basePath&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>theBaseDir&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exists&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>theBaseDir&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isDirectory&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String theFiles&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> theBaseDir&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">list&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>theFiles &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String filename &lt;span style="color:#5bc4bf">:&lt;/span> theFiles&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File testFile &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File&lt;span style="color:#5bc4bf">(&lt;/span>basePath &lt;span style="color:#5bc4bf">+&lt;/span> File&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">separator&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> filename&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>testFile&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isFile&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thePaths&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path &lt;span style="color:#5bc4bf">+&lt;/span> filename&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>testFile&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isDirectory&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thePaths&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path &lt;span style="color:#5bc4bf">+&lt;/span> filename &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> URL &lt;span style="color:#06b6ef">getResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String path&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> MalformedURLException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MalformedURLException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Path &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39; does not start with &amp;#39;/&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL url &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>getClassLoader&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getResource&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>1&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">openStream&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Throwable t&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting InputStream of &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> t&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> url&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> InputStream &lt;span style="color:#06b6ef">getResourceAsStream&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String path&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> getResource&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">openStream&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> RequestDispatcher &lt;span style="color:#06b6ef">getRequestDispatcher&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String path&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName &lt;span style="color:#5bc4bf">=&lt;/span> servletUrlPatternMapper&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServletNameByRequestURI&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Servlet servlet&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> servletName &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> servlets&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">getServlet&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>servlet &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 过滤器的urlPatter解析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> allNeedFilters &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ArrayList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>NettyFilterRegistration registration &lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">filters&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">values&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allNeedFilters&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>registration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getFilter&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FilterChain filterChain &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> SimpleFilterChain&lt;span style="color:#5bc4bf">(&lt;/span>servlet&lt;span style="color:#5bc4bf">,&lt;/span> allNeedFilters&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyRequestDispatcher&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> filterChain&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Filter from NettyFilterRegistration of path &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getRealPath&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String path&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File f &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File&lt;span style="color:#5bc4bf">(&lt;/span>getResource&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">toURI&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> f&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAbsolutePath&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Throwable t&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting real path of &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> t&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getServerInfo&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> serverInfo&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// InitParameter相关的方法不实现（返回空/空集合）基本用不到
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getAttributeNames&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">keys&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> Object object&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> object&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String servletName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String servletName&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getClass&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> servlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String servletName&lt;span style="color:#5bc4bf">,&lt;/span> Class&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> Servlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servletClass&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">,&lt;/span> servletClass&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ServletRegistration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String servletName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyServletRegistration servletRegistration &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyServletRegistration&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> servletName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlets&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>servletName&lt;span style="color:#5bc4bf">,&lt;/span> servletRegistration&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletRegistration&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String filterName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String filterName&lt;span style="color:#5bc4bf">,&lt;/span> Filter filter&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">,&lt;/span> filter&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getClass&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> filter&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> javax&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String filterName&lt;span style="color:#5bc4bf">,&lt;/span> String className&lt;span style="color:#5bc4bf">,&lt;/span> Filter filter&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyFilterRegistration filterRegistration &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyFilterRegistration&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> filterName&lt;span style="color:#5bc4bf">,&lt;/span> className&lt;span style="color:#5bc4bf">,&lt;/span> filter&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filters&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">,&lt;/span> filterRegistration&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filterRegistration&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String filterName&lt;span style="color:#5bc4bf">,&lt;/span> Class&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filterClass&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">,&lt;/span> filterClass&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T &lt;span style="color:#815ba4">extends&lt;/span> Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> T &lt;span style="color:#06b6ef">createFilter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Class&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> c&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">newInstance&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>InstantiationException &lt;span style="color:#5bc4bf">|&lt;/span> IllegalAccessException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">FilterRegistration&lt;/span> &lt;span style="color:#06b6ef">getFilterRegistration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String filterName&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filters&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>filterName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> FilterRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getFilterRegistrations&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> ImmutableMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copyOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>filters&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO Session Cookie相关的方法等待实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不支持Listener，现在很少用了吧
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="url-pattrn匹配查找">URL Pattrn匹配查找&lt;/h3>
&lt;p>参考Tomcat源码，设计了一个&lt;code>RequestUrlPatternMapper&lt;/code>类用于保存，计算URL-pattern与请求路径的匹配关系。在&lt;code>NettyContext&lt;/code>的&lt;code>public RequestDispatcher getRequestDispatcher(String path)&lt;/code>方法中可以看到对其的调用，传入请求的路径，返回对应处理的Servlet名称。此外在&lt;code>NettyContext&lt;/code>的&lt;code> public void addServletMapping(String urlPattern, String name, Servlet servlet)&lt;/code>方法中也调用该类，增加新的Servlet映射。&lt;br>
增加映射的时候，先后判断：&lt;/p>
&lt;ol>
&lt;li>路径匹配&lt;/li>
&lt;li>扩展名匹配&lt;/li>
&lt;li>默认匹配&lt;/li>
&lt;li>精确匹配&lt;/li>
&lt;/ol>
&lt;p>用&lt;code>MappedWrapper&lt;/code>类包装起新的Servlet，根据对应的匹配策略，放加入到&lt;code>ContextVersion&lt;/code>实例的&lt;code>wildcardWrappers&lt;/code>、&lt;code>extensionWrappers&lt;/code>、&lt;code>defaultWrapper&lt;/code>、&lt;code>exactWrappers&lt;/code>中进行保存。&lt;br>
在查询匹配的时候，处理完请求路径后，根据URL Pattern的定义，先后根据以下匹配方法进行匹配：&lt;/p>
&lt;ol>
&lt;li>精确匹配&lt;/li>
&lt;li>路径匹配&lt;/li>
&lt;li>后缀名匹配&lt;/li>
&lt;li>Welcome资源匹配&lt;/li>
&lt;li>默认Servlet匹配&lt;/li>
&lt;/ol>
&lt;p>使用&lt;code>MappingData&lt;/code>类实例对查询结果进行保存，每一级匹配如果已经找到对应的Servlet，那么下一级的匹配将不会进行，直接返回，此时&lt;code>MappingData&lt;/code>对象里保存的就是最终匹配到的结果。&lt;br>
具体的匹配中，精确匹配直接对Map进行查找即可，后缀名匹配类似，根据当前请求的后缀名进行精确匹配；而路径匹配，则是将路径进行降序排序，匹配的时候依次匹配，就能匹配到最长的那一个。&lt;br>
下面贴上主要的实现代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.utils&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存，计算URL-pattern与请求路径的匹配关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz.Hu
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Created on 2017-08-25 11:32.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">RequestUrlPatternMapper&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> UrlPatternContext urlPatternContext&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String contextPath&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">RequestUrlPatternMapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String contextPath&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">urlPatternContext&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> UrlPatternContext&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">contextPath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> contextPath&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 增加映射关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param urlPattern urlPattern
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param servlet servlet对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param servletName servletName
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String urlPattern&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">,&lt;/span> String servletName&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/*&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>0&lt;span style="color:#5bc4bf">,&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span> 1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>MappedServlet ms &lt;span style="color:#5bc4bf">:&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ms&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">,&lt;/span> servletName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>newServlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sort&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>o1&lt;span style="color:#5bc4bf">,&lt;/span> o2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> o2&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">compareTo&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>o1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Curretn Wildcard URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;*.&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 扩展名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>2&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">extensionServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">,&lt;/span> servletName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">extensionServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">,&lt;/span> newServlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Curretn Extension URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">extensionServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">keySet&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default资源匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">,&lt;/span> servletName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exactServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">,&lt;/span> servletName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exactServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">,&lt;/span> newServlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Curretn Exact URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exactServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">keySet&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 删除映射关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param urlPattern
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeServlet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String urlPattern&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/*&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>0&lt;span style="color:#5bc4bf">,&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span> 2&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">removeIf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>mappedServlet &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> mappedServlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;*.&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 扩展名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>2&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">extensionServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default资源匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String pattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPattern&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exactServlets&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pattern&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getServletNameByRequestURI&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String absoluteUri&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappingData mappingData &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappingData&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchRequestPath&lt;span style="color:#5bc4bf">(&lt;/span>absoluteUri&lt;span style="color:#5bc4bf">,&lt;/span> mappingData&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Servlet Name by request URI, maybe cause by lacking of buffer size.&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Wrapper mapping.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws IOException buffer大小不足
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">matchRequestPath&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String absolutePath&lt;span style="color:#5bc4bf">,&lt;/span> MappingData mappingData&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 处理ContextPath，获取访问的相对URI
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> noServletPath &lt;span style="color:#5bc4bf">=&lt;/span> absolutePath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>contextPath&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> absolutePath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>contextPath &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>absolutePath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>contextPath&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String path &lt;span style="color:#5bc4bf">=&lt;/span> noServletPath &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> absolutePath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>contextPath&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//去掉查询字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">int&lt;/span> queryInx &lt;span style="color:#5bc4bf">=&lt;/span> path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#39;?&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>queryInx &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>0&lt;span style="color:#5bc4bf">,&lt;/span> queryInx&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 优先进行精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> internalMapExactWrapper&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exactServlets&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> mappingData&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 然后进行路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internalMapWildcardWrapper&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> mappingData&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑JSP的处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> noServletPath&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 路径为空时，重定向到“/”
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 后缀名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internalMapExtensionWrapper&lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">extensionServlets&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> path&lt;span style="color:#5bc4bf">,&lt;/span> mappingData&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑Welcome资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default Servlet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultServlet&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑请求静态目录资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">charAt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span> 1&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#48b685">&amp;#39;/&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapExactWrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets&lt;span style="color:#5bc4bf">,&lt;/span> String path&lt;span style="color:#5bc4bf">,&lt;/span> MappingData mappingData&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> servlets&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>servlet &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapWildcardWrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets&lt;span style="color:#5bc4bf">,&lt;/span> String path&lt;span style="color:#5bc4bf">,&lt;/span> MappingData mappingData&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet result &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>MappedServlet ms &lt;span style="color:#5bc4bf">:&lt;/span> servlets&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ms&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#5bc4bf">=&lt;/span> ms&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>result &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> result&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> result&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 后缀名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapExtensionWrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets&lt;span style="color:#5bc4bf">,&lt;/span> String path&lt;span style="color:#5bc4bf">,&lt;/span> MappingData mappingData&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> dotInx &lt;span style="color:#5bc4bf">=&lt;/span> path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>dotInx &lt;span style="color:#5bc4bf">+&lt;/span> 1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> servlets&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>path&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>servlet &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 以下是用到的内部类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">UrlPatternContext&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet defaultServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//默认Servlet
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> exactServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> wildcardServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> extensionServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span> &lt;span style="color:#776e71">//扩展名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MappedServlet&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> MapElement&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Servlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> pattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">,&lt;/span> Servlet servlet&lt;span style="color:#5bc4bf">,&lt;/span> String servletName&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> servlet&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletName&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MapElement&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">final&lt;/span> String pattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">final&lt;/span> T object&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MapElement&lt;span style="color:#5bc4bf">(&lt;/span>String pattern&lt;span style="color:#5bc4bf">,&lt;/span> T object&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pattern&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> pattern&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">object&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> object&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MappingData&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Servlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String redirectPath &lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">recycle&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redirectPath &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="再次启动">再次启动&lt;/h2>
&lt;p>现在ServletContext有了，再次启动，不再报错了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">:::&lt;/span> Using Embedded Netty Servlet &lt;span style="color:#06b6ef">Container&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>version&lt;span style="color:#5bc4bf">:)&lt;/span> &lt;span style="color:#5bc4bf">:::&lt;/span> &lt;span style="color:#ef6155">＼&lt;/span>&lt;span style="color:#5bc4bf">(^&lt;/span>O&lt;span style="color:#5bc4bf">^)&lt;/span>&lt;span style="color:#ef6155">／&lt;/span> Spring&lt;span style="color:#5bc4bf">-&lt;/span>Boot 1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22&lt;span style="color:#5bc4bf">:&lt;/span>08&lt;span style="color:#5bc4bf">:&lt;/span>33&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">019&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">gitlab&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">leibnizhu&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sbnetty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TestWebApp&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> Starting TestWebApp on XPS13 with PID 17565
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22&lt;span style="color:#5bc4bf">:&lt;/span>08&lt;span style="color:#5bc4bf">:&lt;/span>35&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">760&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">gitlab&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">leibnizhu&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sbnetty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TestWebApp&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> Started TestWebApp in 3&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">383&lt;/span> &lt;span style="color:#06b6ef">seconds&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>JVM running &lt;span style="color:#815ba4">for&lt;/span> 4&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">012&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22&lt;span style="color:#5bc4bf">:&lt;/span>08&lt;span style="color:#5bc4bf">:&lt;/span>35&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">761&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> Thread&lt;span style="color:#5bc4bf">-&lt;/span>2&lt;span style="color:#5bc4bf">]&lt;/span> ationConfigEmbeddedWebApplicationContext &lt;span style="color:#5bc4bf">:&lt;/span> Closing org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embedded&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AnnotationConfigEmbeddedWebApplicationContext&lt;/span>&lt;span style="color:#5bc4bf">@4a07d605&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> startup date &lt;span style="color:#5bc4bf">[&lt;/span>Fri Aug 25 22&lt;span style="color:#5bc4bf">:&lt;/span>08&lt;span style="color:#5bc4bf">:&lt;/span>33 CST 2017&lt;span style="color:#5bc4bf">];&lt;/span> root of context hierarchy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22&lt;span style="color:#5bc4bf">:&lt;/span>08&lt;span style="color:#5bc4bf">:&lt;/span>35&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">763&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> Thread&lt;span style="color:#5bc4bf">-&lt;/span>2&lt;span style="color:#5bc4bf">]&lt;/span> o&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">s&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">j&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">e&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">a&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AnnotationMBeanExporter&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> Unregistering JMX&lt;span style="color:#5bc4bf">-&lt;/span>exposed beans on shutdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disconnected from the target VM&lt;span style="color:#5bc4bf">,&lt;/span> address&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#ef6155">&amp;#39;&lt;/span>127&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">0&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">0&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">1&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>46101&lt;span style="color:#ef6155">&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> transport&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#ef6155">&amp;#39;&lt;/span>socket&lt;span style="color:#ef6155">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可是…………好像有点不对劲……&lt;br>
启动之后过一会儿就自动关了。&lt;br>
原因很简单，在&lt;code>EmbeddedNettyFactory&lt;/code>类里面，我们还没返回真正的&lt;code>EmbeddedServletContainer&lt;/code>实现类，而只是返回null，所以Spring没有Servlet容器可用，也就只能关闭啦。&lt;br>
我们将在下一篇文章里讨论如何实现&lt;code>EmbeddedServletContainer&lt;/code>——与netty结合最紧密的地方。&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（一）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/</link><pubDate>Thu, 24 Aug 2017 14:30:11 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/yuyuko.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（一）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现一">基于Netty的Spring Boot内置Servlet容器的实现（一）&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Spring Boot有Tomcat、Jetty和undertow三种内置Servlet容器，默认使用Tomcat。&lt;br>
一般来说已经够用了，但当Spring Boot用于高并发微服务的时候，可能并不够用，而且tomcat的资源占用在这种情况下说不上轻量化了。于是萌生了自己实现一个Spring Boot的Netty Servlet容器的想法。&lt;br>
接下来可能会有几篇文章关于这个的，相应的代码也在开发之中，放在&lt;a class="link" href="https://gitlab.com/leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>Gitlab&lt;/a> 和 &lt;a class="link" href="https://github.com/Leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>GitHub&lt;/a>里。&lt;/p>
&lt;h2 id="需要完成的任务">需要完成的任务&lt;/h2>
&lt;h3 id="实现servlet容器">实现Servlet容器&lt;/h3>
&lt;p>Servlet规范有以下几个核心类(接口)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ServletContext&lt;/code>：定义了一些可以和Servlet Container交互的方法。&lt;/li>
&lt;li>&lt;code>Registration&lt;/code>：实现Filter和Servlet的动态注册。&lt;/li>
&lt;li>&lt;code>ServletRequest&lt;/code>(&lt;code>HttpServletRequest&lt;/code>)：对HTTP请求消息的封装。&lt;/li>
&lt;li>&lt;code>ServletResponse&lt;/code>(&lt;code>HttpServletResponse&lt;/code>)：对HTTP响应消息的封装。&lt;/li>
&lt;li>&lt;code>RequestDispatcher&lt;/code>：将当前请求分发给另一个URL，甚至ServletContext以实现进一步的处理。&lt;/li>
&lt;li>&lt;code>Servlet&lt;/code>(&lt;code>HttpServlet&lt;/code>)：所有“服务器小程序”要实现了接口，这些“服务器小程序”重写doGet、doPost、doPut、doHead、doDelete、doOption、doTrace等方法(HttpServlet)以实现响应请求的相关逻辑。&lt;/li>
&lt;li>&lt;code>Filter&lt;/code>(&lt;code>FilterChain&lt;/code>)：在进入Servlet前以及出Servlet以后添加一些用户自定义的逻辑，以实现一些横切面相关的功能，如用户验证、日志打印等功能。&lt;/li>
&lt;li>&lt;code>AsyncContext&lt;/code>：实现异步请求处理。&lt;/li>
&lt;/ul>
&lt;p>我们想要实现一个Servlet容器，不管是要重头实现一个类似tomcat的容器，还是要实现一个Spring Boot内置Servlet容器，都需要实现以上接口。&lt;br>
我们的任务就是利用Netty的API实现以上接口。&lt;/p>
&lt;h3 id="实现spring-boot内置servlet容器接口">实现Spring Boot内置Servlet容器接口&lt;/h3>
&lt;p>具体来说，就是要实现&lt;code>EmbeddedServletContainer&lt;/code>接口，同时实现一个配置类，配置Spring Boot在哪些情况下启动我们的Netty Servlet容器。&lt;/p>
&lt;h3 id="编写测试类方法">编写测试类/方法&lt;/h3>
&lt;p>需要测试以下内容:&lt;/p>
&lt;ul>
&lt;li>基本的SpringMVC功能，如请求分发、响应是否正常&lt;/li>
&lt;li>异步请求&lt;/li>
&lt;li>热交换&lt;/li>
&lt;li>缓存&lt;/li>
&lt;li>Session&lt;/li>
&lt;li>在一个现有Spring Boot项目中测试使用&lt;/li>
&lt;li>与内置Tomcat、Jetty的性能对比&lt;/li>
&lt;li>…………&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>感谢以下项目/博文的作者：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://fangjian0423.github.io/2017/05/22/springboot-embedded-servlet-container/" target="_blank" rel="noopener"
>SpringBoot源码分析之内置Servlet容器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/DanielThomas/spring-boot-starter-netty" target="_blank" rel="noopener"
>Github DanielThomas/spring-boot-starter-netty&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="现在开始">现在开始&lt;/h2>
&lt;p>首先创建一个Maven项目。&lt;/p>
&lt;h3 id="maven依赖">Maven依赖&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;project&lt;/span> &lt;span style="color:#06b6ef">xmlns=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">xmlns:xsi=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">xsi:schemaLocation=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;modelVersion&amp;gt;&lt;/span>4.0.0&lt;span style="color:#5bc4bf">&amp;lt;/modelVersion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>io.gitlab.leibnizhu&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-netty&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;packaging&amp;gt;&lt;/span>jar&lt;span style="color:#5bc4bf">&amp;lt;/packaging&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>spring-boot-starter-netty&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.5.2.RELEASE&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;relativePath/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Netty及其建议的反射依赖 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>io.netty&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>netty-all&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>4.1.2.Final&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.javassist&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javassist&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.20.0-GA&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Spring Boot基本依赖及测试，排除内置tomcat，我们自己来实现 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-tomcat&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-test&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Servleten基本API --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>javax.servlet&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javax.servlet-api&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.1.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>com.google.guava&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>guava&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>18.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 省略 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web应用测试类">Web应用测试类&lt;/h3>
&lt;p>我们直接在test包里创建一个SpringBoot应用，暂时先覆盖最基本的SpringMVC使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableAutoConfiguration&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>exclude &lt;span style="color:#5bc4bf">=&lt;/span> WebMvcAutoConfiguration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@ComponentScan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableWebMvc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">TestWebApp&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String MESSAGE &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Hello, World!这是一条测试语句&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">main&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">[]&lt;/span> args&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>TestWebApp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/plaintext&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/plain&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">plaintext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> MESSAGE&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/async&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/plain&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Callable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">async&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> MESSAGE&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/json&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Message &lt;span style="color:#06b6ef">json&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Message&lt;span style="color:#5bc4bf">(&lt;/span>MESSAGE&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistrationBean &lt;span style="color:#06b6ef">nullServletRegistration&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletRegistrationBean&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> HttpServlet&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doGet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HttpServletRequest req&lt;span style="color:#5bc4bf">,&lt;/span> HttpServletResponse resp&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> ServletException&lt;span style="color:#5bc4bf">,&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getOutputStream&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">print&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Null Servlet Test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">},&lt;/span> &lt;span style="color:#48b685">&amp;#34;/null&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Message&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String message&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">Message&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String message&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">message&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> message&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> message&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现embeddedservletcontainerfactory接口">实现EmbeddedServletContainerFactory接口&lt;/h3>
&lt;p>直接启动，提示缺少&lt;code>EmbeddedServletContainerFactory&lt;/code>Bean：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> Unable to start embedded container&lt;span style="color:#5bc4bf">;&lt;/span> nested exception is org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean&lt;span style="color:#5bc4bf">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Spring Boot会查找EmbeddedServletContainerFactory接口的实现类(工厂类)，调用其getEmbeddedServletContainer()方法，来获取web应用的容器。
所以我们要实现这个接口，这里不直接实现，而是通过继承AbstractEmbeddedServletContainerFactory类来实现。
其中最重要的就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServletContextInitializer&lt;span style="color:#5bc4bf">...&lt;/span> initializers&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，用于生成&lt;code>EmbeddedServletContainer&lt;/code>容器实例，顺便可以做一些初始化动作，比如定义监听的端口号，初始化Context，同时调用传入参数的&lt;code>ServletContextInitializer&lt;/code>（Servlet初始化器）们的&lt;code>onStartup()&lt;/code>方法以设置ServletContext中的一些配置。&lt;br>
目前的实现是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.bootstrap&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Spring Boot会查找EmbeddedServletContainerFactory接口的实现类(工厂类)，调用其getEmbeddedServletContainer()方法，来获取web应用的容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以我们要实现这个接口，这里不直接实现，而是通过继承AbstractEmbeddedServletContainerFactory类来实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz on 2017-08-24.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNettyFactory&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractEmbeddedServletContainerFactory &lt;span style="color:#815ba4">implements&lt;/span> ResourceLoaderAware &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EmbeddedNettyFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SERVER_INFO &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Netty@SpringBoot&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ResourceLoader resourceLoader&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServletContextInitializer&lt;span style="color:#5bc4bf">...&lt;/span> initializers&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Netty启动环境相关信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Package nettyPackage &lt;span style="color:#5bc4bf">=&lt;/span> Bootstrap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPackage&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String title &lt;span style="color:#5bc4bf">=&lt;/span> nettyPackage&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getImplementationTitle&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String version &lt;span style="color:#5bc4bf">=&lt;/span> nettyPackage&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getImplementationVersion&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Running with &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> title &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> version&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//上下文，暂时为空
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> ServletContext context &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>isRegisterDefaultServlet&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">warn&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;This container does not support a default servlet&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletContextInitializer initializer &lt;span style="color:#5bc4bf">:&lt;/span> initializers&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initializer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">onStartup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>context&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RuntimeException&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//从SpringBoot配置中获取端口，如果没有则随机生成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">int&lt;/span> port &lt;span style="color:#5bc4bf">=&lt;/span> getPort&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 0 &lt;span style="color:#5bc4bf">?&lt;/span> getPort&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">nextInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>65535 &lt;span style="color:#5bc4bf">-&lt;/span> 1024&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> 1024&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InetSocketAddress address &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> InetSocketAddress&lt;span style="color:#5bc4bf">(&lt;/span>port&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Server initialized with port: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> port&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//初始化容器并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setResourceLoader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ResourceLoader resourceLoader&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">resourceLoader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> resourceLoader&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在&lt;code>ServletContext&lt;/code>和&lt;code>EmbeddedServletContainer&lt;/code>接口还没实现，先用null代替。&lt;/p>
&lt;h3 id="配置spring-boot启动自定义servlet容器">配置Spring Boot启动自定义Servlet容器&lt;/h3>
&lt;p>就这样直接启动测试Web应用是不行的，因为这个&lt;code>EmbeddedNettyFactory&lt;/code>并没有被Spring加载。&lt;br>
想被Spring加载很简单，类加&lt;code>@Component&lt;/code>之类的注解就行，但这样集成在任何环境中都会加载，可能引起端口冲突。&lt;br>
所以我们还要写一个配置类，配置Spring什么时候去加载&lt;code>EmbeddedNettyFactory&lt;/code>，具体如下，注释里写得比较清楚了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.bootstrap&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 配置加载内置Netty容器的工厂类Bean。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 最早是直接将EmbeddedNettyFactory加@Component注解，这样集成在任何环境中都会加载，可能引起端口冲突。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以通过这个配置类，配置在当前上下文缺少EmbeddedServletContainerFactory接口实现类时（即缺少内置Servlet容器），加载EmbeddedNettyFactory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 这样SpringBoot项目在引入这个maven依赖，并且排除了内置tomcat依赖、且没引入其他servlet容器（如jetty）时，就可以通过工厂类加载并启动netty容器了。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz 2017-08-24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@AutoConfigureOrder&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Ordered&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">HIGHEST_PRECEDENCE&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@ConditionalOnWebApplication&lt;/span> &lt;span style="color:#776e71">// 在Web环境下才会起作用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNettyAutoConfiguration&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ConditionalOnClass&lt;/span>&lt;span style="color:#5bc4bf">({&lt;/span>Bootstrap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">})&lt;/span> &lt;span style="color:#776e71">// Netty的Bootstrap类必须在classloader中存在，才能启动Netty容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">@ConditionalOnMissingBean&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> EmbeddedServletContainerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> search &lt;span style="color:#5bc4bf">=&lt;/span> SearchStrategy&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CURRENT&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//当前Spring容器中不存在EmbeddedServletContainerFactory接口的实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNetty&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//上述条件注解成立的话就会构造EmbeddedNettyFactory这个EmbeddedServletContainerFactory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> EmbeddedNettyFactory &lt;span style="color:#06b6ef">embeddedNettyFactory&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedNettyFactory&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="再次启动">再次启动&lt;/h3>
&lt;p>这样子是启动不了的，但启动报错信息已经改了，变成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>24 14&lt;span style="color:#5bc4bf">:&lt;/span>20&lt;span style="color:#5bc4bf">:&lt;/span>25&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">660&lt;/span> ERROR 16708 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> o&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">s&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span> &lt;span style="color:#5bc4bf">:&lt;/span> Application startup failed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> Unable to start embedded container&lt;span style="color:#5bc4bf">;&lt;/span> nested exception is java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">lang&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">NullPointerException&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embedded&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">EmbeddedWebApplicationContext&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">onRefresh&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EmbeddedWebApplicationContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>137&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">support&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">AbstractApplicationContext&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">refresh&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>AbstractApplicationContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>536&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>context&lt;span style="color:#5bc4bf">-&lt;/span>4&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">3&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">7&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>4&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">3&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">7&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">context&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">embedded&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">EmbeddedWebApplicationContext&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">refresh&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>EmbeddedWebApplicationContext&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>122&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">refresh&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>737&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">refreshContext&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>370&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>314&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1162&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">springframework&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">boot&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1151&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">jar&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">5&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">2&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at io&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">gitlab&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">leibnizhu&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sbnetty&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TestWebApp&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">main&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>TestWebApp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">java&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span>102&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>test&lt;span style="color:#5bc4bf">-&lt;/span>classes&lt;span style="color:#5bc4bf">/:&lt;/span>na&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by&lt;span style="color:#5bc4bf">:&lt;/span> java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">lang&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">NullPointerException&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为SpringBoot在启动的时候，&lt;code>SpringApplication&lt;/code>会调用&lt;code>refresh(context)&lt;/code>方法进行初始化动作，而我们的context传入了null，当然报空指针异常了。&lt;br>
我们将在下一篇文章再讨论怎么实现这个。&lt;/p></description></item><item><title>HashMap线程安全性讨论</title><link>https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/</link><pubDate>Tue, 01 Aug 2017 16:36:39 +0800</pubDate><guid>https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/</guid><description>&lt;img src="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/sundown.png" alt="Featured image of post HashMap线程安全性讨论" />&lt;h1 id="hashmap线程安全性讨论">HashMap线程安全性讨论&lt;/h1>
&lt;p>去年写的 &lt;a class="link" href="https://leibnizhu.github.io/2016/12/24/HashMap%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e7%ac%94%e8%ae%b0/" >HashMap源码阅读笔记&lt;/a> 分析了JDK8 中的&lt;code>HashMap&lt;/code>源码的&lt;code>get()&lt;/code>和&lt;code>put()&lt;/code>两大方法，当时并没有考虑到&lt;code>HashMap&lt;/code>的线程安全性。&lt;br>
众所周知，&lt;code>HashMap&lt;/code>并非线程安全的，但在 &lt;em>JDK8&lt;/em> 之前，&lt;code>HashMap&lt;/code>的线程安全不但体现在多线程读写可能出现数据错误，还存在一个多线程扩容导致的死循环Bug。本文将讨论这一Bug，及在 &lt;em>JDK8&lt;/em> 中的修复，以及相关的&lt;code>ConcurrentHashMap&lt;/code>。&lt;/p>
&lt;h2 id="jdk8-之前的多线程扩容bug">&lt;em>JDK8&lt;/em> 之前的多线程扩容Bug&lt;/h2>
&lt;h3 id="扩容代码解析">扩容代码解析&lt;/h3>
&lt;p>我们直接看JDK7 中&lt;code>HashMap&lt;/code>的扩容方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">resize&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> newCapacity&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Entry&lt;span style="color:#5bc4bf">[]&lt;/span> oldTable &lt;span style="color:#5bc4bf">=&lt;/span> table&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> oldCapacity &lt;span style="color:#5bc4bf">=&lt;/span> oldTable&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//最大长度限制在Integer.MAX_VALUE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>oldCapacity &lt;span style="color:#5bc4bf">==&lt;/span> MAXIMUM_CAPACITY&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threshold &lt;span style="color:#5bc4bf">=&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">MAX_VALUE&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Entry&lt;span style="color:#5bc4bf">[]&lt;/span> newTable &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Entry&lt;span style="color:#5bc4bf">[&lt;/span>newCapacity&lt;span style="color:#5bc4bf">];&lt;/span>&lt;span style="color:#776e71">//按新的长度分配哈希表数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> transfer&lt;span style="color:#5bc4bf">(&lt;/span>newTable&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//将旧的哈希表重新分配到新哈希表里，可能导致环链
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> table &lt;span style="color:#5bc4bf">=&lt;/span> newTable&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//将新的哈希表复制到HashMap的table变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> threshold &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">)(&lt;/span>newCapacity &lt;span style="color:#5bc4bf">*&lt;/span> loadFactor&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//按新容量更新扩容阈值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">transfer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Entry&lt;span style="color:#5bc4bf">[]&lt;/span> newTable&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Entry&lt;span style="color:#5bc4bf">[]&lt;/span> src &lt;span style="color:#5bc4bf">=&lt;/span> table&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> newCapacity &lt;span style="color:#5bc4bf">=&lt;/span> newTable&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> j &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span> j &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> src&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">length&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> j&lt;span style="color:#5bc4bf">++)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Entry&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> e &lt;span style="color:#5bc4bf">=&lt;/span> src&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>e &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//关键部分
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">do&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Entry&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> next &lt;span style="color:#5bc4bf">=&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//获得原来链表中的下一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">int&lt;/span> i &lt;span style="color:#5bc4bf">=&lt;/span> indexFor&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hash&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> newCapacity&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//获取扩容后新的下标，可能跟原来一样，或者比原来的大newCapacity/2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> newTable&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">];&lt;/span>&lt;span style="color:#776e71">//设置当前元素在链表的下一个元素为新哈希表对应位置原来的元素，也就是说旧元素会被往后推，该链表上最早读取的元素会成为尾部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> newTable&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> e&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//哈希表的入口改为当前元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> e &lt;span style="color:#5bc4bf">=&lt;/span> next&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//遍历原来链表的下一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>e &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>工作原理在上面代码的注释里说得比较清楚了，值得注意的是，&lt;code>transfer(newTable)&lt;/code>之后的新哈希表里，每个链表的顺序都与扩容之前的刚好相反，这一点直接注定了会出现多线程扩容Bug。&lt;/p>
&lt;h3 id="扩容时的多线程死循环bug">扩容时的多线程死循环Bug&lt;/h3>
&lt;p>如上面的分析，由于扩容后每个链表的顺序都调转了，因此定性地分析，多线程同时触发扩容的时候，有可能其中一个线程已经把链表调转了，而另一个线程获取了链表调转前的状态，重新获取到时间片的时候，再次翻转，导致next引用的赋值出错，链表中构成环；这样在调用&lt;code>get()&lt;/code>方法的时候，进入到这个链表就会陷入死循环。
具体的举例分析，可以参考美团点评技术团队的文章 &lt;a class="link" href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="noopener"
>Java 8系列之重新认识HashMap&lt;/a> ，在此贴出关键的部分：&lt;/p>
&lt;blockquote>
&lt;p>代码例子如下(便于理解，仍然使用JDK1.7的环境)：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">HashMapInfiniteLoop&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Integer&lt;span style="color:#5bc4bf">,&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> map &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Integer&lt;span style="color:#5bc4bf">,&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;(&lt;/span>2&lt;span style="color:#ef6155">，&lt;/span>0&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">75f&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">main&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">[]&lt;/span> args&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>5&lt;span style="color:#ef6155">，&lt;/span> &lt;span style="color:#48b685">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Thread&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Thread1&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>7&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>map&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}.&lt;/span>&lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Thread&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Thread2&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>3&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>map&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}.&lt;/span>&lt;span style="color:#06b6ef">start&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>其中，map初始化为一个长度为2的数组，loadFactor=0.75，threshold=2*0.75=1，也就是说当put第二个key的时候，map就需要进行resize。&lt;/p>
&lt;p>通过设置断点让线程1和线程2同时debug到transfer方法(3.3小节代码块)的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/3.png"
width="1388"
height="628"
srcset="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/3_hu8c609b8e724bfb2c0290ec31e1a358b7_20420_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/3_hu8c609b8e724bfb2c0290ec31e1a358b7_20420_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>
注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。&lt;/p>
&lt;p>线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/4.png"
width="1380"
height="522"
srcset="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/4_hu4e735beccad0b142c011203082f64e5a_15190_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/4_hu4e735beccad0b142c011203082f64e5a_15190_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="264"
data-flex-basis="634px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/5.png"
width="1374"
height="484"
srcset="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/5_hu2621d6ffff8728bce2c216db713e4324_15188_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/5_hu2621d6ffff8728bce2c216db713e4324_15188_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="681px"
>&lt;br>
e.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/6.png"
width="1384"
height="482"
srcset="https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/6_hufeb79b1a930dbfa7f169a79531429de5_14874_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%A8%E8%AE%BA/6_hufeb79b1a930dbfa7f169a79531429de5_14874_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="287"
data-flex-basis="689px"
>&lt;br>
于是，当我们用线程一调用map.get(11)时，悲剧就出现了——Infinite Loop。&lt;/p>
&lt;/blockquote>
&lt;h2 id="jdk8-如何修复多线程扩容bug">&lt;em>JDK8&lt;/em> 如何修复多线程扩容Bug&lt;/h2>
&lt;p>正如我在 &lt;a class="link" href="https://leibnizhu.github.io/2016/12/24/HashMap%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e7%ac%94%e8%ae%b0/" >HashMap源码阅读笔记&lt;/a> 中分析到的，&lt;em>JDK8&lt;/em> 中&lt;code>Node&amp;lt;K,V&amp;gt;[] resize()&lt;/code>扩容方法利用了哈希表长度为2的幂，以及&lt;code>get()&lt;/code>方法对哈希值取低位的特性，结合每次扩容哈希表大小都增倍等特性，每次扩容，一个哈希桶里的元素在扩容后的位置，只会是原位置，或者原位置+原哈希表大小。&lt;br>
因此扩容的时候可以将一个哈希桶的扩容结果分为两个链表，还在原来位置的记为 &lt;em>低位链表&lt;/em>(我自己起的名字)，用&lt;code>loHead loTail&lt;/code>标记其头尾；扩容后分配到原位置+原哈希表大小的构成 &lt;em>高位链表&lt;/em>(同样是我自己起的名字)，用&lt;code>hiHead hiTail&lt;/code>标记其头尾。&lt;br>
具体实现的核心部分代码如下（省略了特殊容量处理、红黑树处理等等代码）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">final&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;[]&lt;/span> &lt;span style="color:#06b6ef">resize&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*…………省略前面代码…………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>loHead&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>loTail&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//记录低位链表头尾位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>hiHead&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>hiTail&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//记录高位链表头尾位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>next&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//记录当前链表元素在原来链表中的下一个元素，便于下次循环使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//遍历哈希桶的链表，拆分成高位和低位链表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">do&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hash&lt;/span>&lt;span style="color:#5bc4bf">&amp;amp;&lt;/span>oldCap&lt;span style="color:#5bc4bf">)==&lt;/span>0&lt;span style="color:#5bc4bf">){&lt;/span> &lt;span style="color:#776e71">//新增的有效哈希位为0，即当前元素扩容后分配到 低位链表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>loTail&lt;span style="color:#5bc4bf">==&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//低位链表尚未初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> loHead&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//设置低位链表头部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//低位链表尾部增加当前元素，以保持原链表顺序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> loTail&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//更新低位链表的尾部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>&lt;span style="color:#815ba4">else&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span> &lt;span style="color:#776e71">//新增的有效哈希位为1，即当前元素扩容后分配到 高位链表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hiTail&lt;span style="color:#5bc4bf">==&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//高低位链表尚未初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hiHead&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//设置高位链表头部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hiTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//高位链表尾部增加当前元素，以保持原链表顺序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hiTail&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//更新高位链表的尾部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>&lt;span style="color:#815ba4">while&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>e&lt;span style="color:#5bc4bf">=&lt;/span>next&lt;span style="color:#5bc4bf">)!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//更新两个链表到哈希表中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>loTail&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span> &lt;span style="color:#776e71">//扩容后低位链表不为空，需要处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> loTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//低位链表设置尾部结束
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> newTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">]=&lt;/span>loHead&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//哈希桶设置链表入口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hiTail&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span> &lt;span style="color:#776e71">//扩容后高位链表不为空，需要处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> hiTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//高位链表设置尾部结束
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> newTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">+&lt;/span>oldCap&lt;span style="color:#5bc4bf">]=&lt;/span>hiHead&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//哈希桶设置链表入口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*…………省略后面代码…………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体处理的过程我在上面的注释里说得比较清楚了，包括代码之前的那段文字。&lt;br>
可以看到，扩容后，原来哈希桶的链表被拆分为两个，两个链表中的元素都能继续维持原有的顺序。这样就算在多线程环境下同时扩容，一个线程A读取链表状态后停止工作，另一个线程B对同一链表的前几个元素进行扩容分成两个链表，此时线程A恢复工作，由于线程B对链表元素的顺序没有发生变化，所以线程A恢复工作后只是重复了拆分链表的工作，而不会因为链表已被改变顺序而导致环的生成，因此不会发生死循环的问题。&lt;br>
也就是说 &lt;em>JDK8&lt;/em> 的&lt;code>HashMap&lt;/code>扩容方法不但效率提升了（根据哈希值特点拆分链表，红黑树），而且还维持了扩容前后的链表顺序，从而解决了多线程扩容使链表产生环，导致死循环的问题。&lt;/p>
&lt;h2 id="其他线程安全map">其他线程安全Map&lt;/h2>
&lt;h3 id="hashtable类">Hashtable类&lt;/h3>
&lt;p>类名叫&lt;code>Hashtable&lt;/code>不叫&lt;code>HashTable&lt;/code>真是逼死强迫症。这个类现在很少用了，从源码可以看到，它是在&lt;code>get() put()&lt;/code>等方法的声明里加了&lt;code>synchronized&lt;/code>关键字来实现多线程安全的，因此显然效率比较低。&lt;/p>
&lt;h3 id="collectionssynchronizedmap方法">Collections.synchronizedMap()方法&lt;/h3>
&lt;p>在&lt;code>Collections&lt;/code>工具类里有&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">synchronizedMap&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> m&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，传入将普通的Map实例，返回一个线程安全的Map实例。实现方法也比较简单，返回的是&lt;code>Collections&lt;/code>的内部类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">SynchronizedMap&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;,&lt;/span> Serializable &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> m&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">// Backing Map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Object mutex&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">// Object on which to synchronize
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SynchronizedMap&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> m&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">m&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> Objects&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requireNonNull&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>m&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mutex &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SynchronizedMap&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> m&lt;span style="color:#5bc4bf">,&lt;/span> Object mutex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">m&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> m&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">mutex&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> mutex&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> V &lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object key&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mutex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">return&lt;/span> m&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>key&lt;span style="color:#5bc4bf">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> V &lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>K key&lt;span style="color:#5bc4bf">,&lt;/span> V value&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mutex&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">return&lt;/span> m&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>key&lt;span style="color:#5bc4bf">,&lt;/span> value&lt;span style="color:#5bc4bf">);}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*………省略其他方法，大同小异………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>的实例。上面也给出了简要的类代码，实现的方法相当简单粗暴，由构造方法传入线程不安全的类实例，用一个锁（默认是自身，也可以在构造方法里传入），在各种&lt;code>Map&lt;/code>接口的方法里面使用这个锁对线程不安全的类实例方法进行同步，也就是一个包装的设计模式，用同步代码块包装原有方法。&lt;br>
显然这样得到的线程安全类的效率也不高。&lt;/p>
&lt;h3 id="concurrenthashmap类">ConcurrentHashMap类&lt;/h3>
&lt;p>&lt;em>JDK8&lt;/em> 之前的&lt;code>ConcurrentHashMap&lt;/code>使用Segment（锁段）提高同步的效率，而 &lt;em>JDK8&lt;/em> 开始利用CAS算法大大提高了实现线程安全的效率。有空要再写一篇博客分析一下&lt;code>ConcurrentHashMap&lt;/code>的源码。&lt;/p></description></item><item><title>LinkedList源码阅读笔记（JDK8）</title><link>https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</link><pubDate>Mon, 31 Jul 2017 14:35:06 +0800</pubDate><guid>https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/night.png" alt="Featured image of post LinkedList源码阅读笔记（JDK8）" />&lt;h1 id="linkedlist源码阅读笔记">LinkedList源码阅读笔记&lt;/h1>
&lt;h2 id="继承结构">继承结构&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/LinkedList_UML.png"
width="658"
height="455"
srcset="https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/LinkedList_UML_hu0bbba6c5472c67862680e5e322c83415_25624_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/LinkedList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/LinkedList_UML_hu0bbba6c5472c67862680e5e322c83415_25624_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;h2 id="成员变量">成员变量&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//记录长度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">transient&lt;/span> &lt;span style="color:#fec418">int&lt;/span> size &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//第一个元素的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">transient&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> first&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//最后一个元素的指针（为了增加从尾部开始的速度，及支持一些增删改查尾部元素的方法）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">transient&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> last&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上成员变量都用了transient关键字避免被持久化。&lt;/p>
&lt;p>从继承结构来看，&lt;code>LinkedList&lt;/code>继承了&lt;code>AbstractSequentialList&lt;/code>，而&lt;code>AbstractSequentialList&lt;/code>继承了&lt;code>AbstractList&lt;/code>，因此&lt;code>LinkedList&lt;/code>也继承了&lt;code>protected transient int modCount&lt;/code>变量，具体作用与&lt;code>ArayList&lt;/code>中一样，不再赘述。&lt;/p>
&lt;h2 id="构造方法">构造方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">LinkedList&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认构造方法，实现为空方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">LinkedList&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>addAll()&lt;/code>方法将参数c中的所有元素增加到当前实例中，完成构造。&lt;/p>
&lt;h2 id="内部类node">内部类Node&lt;/h2>
&lt;h3 id="定义">定义&lt;/h3>
&lt;p>在&lt;code>LinkedList&lt;/code>中，使用&lt;code>Node&lt;/code>内部类存储List的每个元素，其结构比较简单:&lt;/p>
&lt;ul>
&lt;li>&lt;code>item&lt;/code>存储具体的List元素引用&lt;/li>
&lt;li>&lt;code>next&lt;/code>和&lt;code>prev&lt;/code>分别存储后一个和上一个元素的引用，由此构成链表。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Node&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> E item&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> next&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> prev&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">(&lt;/span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> prev&lt;span style="color:#5bc4bf">,&lt;/span> E element&lt;span style="color:#5bc4bf">,&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> next&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">item&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> element&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> next&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">prev&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> prev&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="维护链表的基础方法">维护链表的基础方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 将元素插入到链表头部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * prev=LinkedList.next, next=null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 然后更新first，原来first的prev引用更新为新元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">linkFirst&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 将元素插入到链表尾部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * prev=null, next=LinkedList.first
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 然后更新last，原来last的next引用更新为新元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">linkLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 插入到指定元素前面
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 设置新元素的前后引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 然后对应修改succ的前一项为新元素，以及原来succ的前一项的后者为新元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 如果succ原来的前一项为null，那么新的LinkedList.first就是新元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 我觉得可以直接进来就判断nullsucc原来的前一项时调用linkFirst()进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">linkBefore&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">,&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> succ&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 将链表头部元素从链表中移除并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 主要任务是将LinkedList.first指向原来first的next所引用的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 同时将原来first的item以及next设为null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * item设为null是为了原来first元素的GC回收，而next设为null是方便新的first在未来被回收
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 最后size--，modCount++，维护边界条件并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> E &lt;span style="color:#06b6ef">unlinkFirst&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 类似unlinkLast()，将链表尾部元素从链表中移除并返回，不再赘述
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> E &lt;span style="color:#06b6ef">unlinkLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> l&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#ef6155">；&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 将任一位置的元素从链表中移除并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 代码实现上类似于unlinkFirst()与unlinkLast()的结合
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>E &lt;span style="color:#06b6ef">unlink&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> x&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常规方法">常规方法&lt;/h2>
&lt;h3 id="维护头部尾部的方法">维护头部尾部的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//first为空则抛NoSuchElementException异常，否则返回first.item
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">getFirst&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//last为空则抛NoSuchElementException异常，否则返回last.item
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">getLast&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//first为空则抛异常，否则调用unlinkFirst()删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">removeFirst&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//last为空则抛异常，否则调用unlinkLast()删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">removeLast&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//调用linkFirst()进行处理，允许e为null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addFirst&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//调用linkLast()进行处理，允许e为null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口常规增删改查方法">接口常规增删改查方法&lt;/h3>
&lt;h4 id="增">增&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//调用linkLast()进行处理，并返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E element&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>指定下标插入元素的方法&lt;code>add()&lt;/code>先对&lt;code>index&lt;/code>进行下标越界检查，然后如果&lt;code>index==size&lt;/code>，即插入到List最后面，那么直接调用&lt;code>linkLast()&lt;/code>执行插入就可以；否则调用&lt;code>linkBefore()&lt;/code>插入到指定下标的元素前面，即新的元素拥有&lt;code>index&lt;/code>的下标（符合&lt;code>add()&lt;/code>方法对&lt;code>index&lt;/code>参数的定义）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//调用addAll(size, c)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>批量增加方法&lt;code>addAll()&lt;/code>将参数&lt;code>c&lt;/code>里面的元素全部逐个加到当前List中。先检查下标是否越界，然后将Collection转为Object数组，若数组长度为0则返回false。index为要插入的第一个元素所在的下标，如果不是size（最后一个元素之后），则需要读取对应插入处原来的元素及其上一个元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> pred&lt;span style="color:#5bc4bf">,&lt;/span> succ&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//插入新元素的前后元素引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>index &lt;span style="color:#5bc4bf">==&lt;/span> size&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> succ &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pred &lt;span style="color:#5bc4bf">=&lt;/span> last&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> succ &lt;span style="color:#5bc4bf">=&lt;/span> node&lt;span style="color:#5bc4bf">(&lt;/span>index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pred &lt;span style="color:#5bc4bf">=&lt;/span> succ&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">prev&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>随后遍历Object数组，逐个生成&lt;code>Node&lt;/code>对象，并将上一个元素的next指向当前元素。遍历完后，维护插入新元素的前/后元素的后/前引用，如果succ为null则&lt;code>LinkedList.last&lt;/code>赋值为&lt;code>pred&lt;/code>，同时维护&lt;code>size&lt;/code>，更新&lt;code>modCount&lt;/code>。&lt;/p>
&lt;h4 id="删">删&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>删除元素的方法&lt;code>remove()&lt;/code>类似&lt;code>indexOf()&lt;/code>，从&lt;code>first&lt;/code>开始遍历List，逐个元素判断是否与参数&lt;code>o&lt;/code>相同（判断方法与&lt;code>indexOf()&lt;/code>一样），找到后调用&lt;code>unlink()&lt;/code>进行删除并返回true。如果没找到相同的元素则返回false。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该方法删除指定下标的元素。检查下标没有越界后，调用&lt;code>unlink(node(index))&lt;/code>删除指定元素（其中&lt;code>node()&lt;/code>是查找指定下标的元素，详见 &lt;em>查&lt;/em> 部分）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">clear&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>清空整个List，从&lt;code>first&lt;/code>开始，遍历整个List，把每个&lt;code>Node&lt;/code>的&lt;code>item next prev&lt;/code>都置为null（方便GC），以及&lt;code>LinkedList&lt;/code>的&lt;code>first last&lt;/code>也置为null，&lt;code>size&lt;/code>归零。&lt;/p>
&lt;h4 id="改">改&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E element&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将下标为&lt;code>index&lt;/code>的元素设置为&lt;code>element&lt;/code>，并将旧值返回。该方法在检查&lt;code>index&lt;/code>是否越界后，先调用&lt;code>node()&lt;/code>方法查找到指定下标的&lt;code>Node&lt;/code>元素，直接修改&lt;code>Node&lt;/code>实例的&lt;code>item&lt;/code>属性为新值，并返回旧值（而不是新建一个&lt;code>Node&lt;/code>，这样既减少操作，也减少多余的对象，从而减轻GC负担）。&lt;/p>
&lt;h4 id="旧的查找方法">旧的查找方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">contains&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法&lt;code>contains()&lt;/code>判断当前List是否包含指定元素，返回&lt;code>indexOf(o) != -1&lt;/code>。&lt;br>
方法&lt;code>indexOf()&lt;/code>从&lt;code>first&lt;/code>开始通过&lt;code>next&lt;/code>引用遍历List，逐个元素判断是否与参数&lt;code>o&lt;/code>相同（o为null则用&lt;code>item==null&lt;/code>进行判断，o非null则调用&lt;code>o.equals(item)&lt;/code>进行判断），与ArrayList的实现类似。&lt;br>
方法&lt;code>lastIndexOf()&lt;/code>的实现与&lt;code>indexOf()&lt;/code>类似，只是查找的起点改成&lt;code>last&lt;/code>，且遍历的方向相反。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//返回size属性
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">node&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者&lt;code>node()&lt;/code>方法是通过遍历从链表中查找到指定下标的元素，其中有个优化，如果查找的下标大于&lt;code>size&lt;/code>的一半则从&lt;code>last&lt;/code>引用开始找，否则从&lt;code>first&lt;/code>引用开始找。&lt;br>
后者&lt;code>get()&lt;/code>方法在检查&lt;code>index&lt;/code>参数没有越界后，调用前者进行查找。&lt;/p>
&lt;h4 id="jdk5-开始引入的方法">&lt;em>JDK5&lt;/em> 开始引入的方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取但不移除该List的头部，first为null时返回null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">peek&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取但不移除该List的头部，调用getFirst()，first为null时抛NoSuchElementException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">element&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取并移除该List的头部，first为null时返回null，否则调用unlinkFirst()处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">poll&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取并移除该List的头部，调用removeFirst()，first为null时抛NoSuchElementException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//将指定元素添加到该List的尾部，调用add()方法处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">offer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="jdk6-开始引入的方法">&lt;em>JDK6&lt;/em> 开始引入的方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//在该List的开头插入指定的元素，调用addFirst()方法，后者又调用linkFirst()处理，返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">offerFirst&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// 在该List末尾插入指定的元素，调用addLast()方法，后者又调用linkLast()处理，返回true。实际实现与offer()一致
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">offerLast&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// 获取但不移除该List的第一个元素；如果该List为空，则返回 null。实现与peek()一样
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">peekFirst&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取但不移除该List的最后一个元素；如果该List为空，则返回 null。实现与peek()类似
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">peekLast&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取并移除该List的第一个元素；如果该List为空，则返回 null；实现与poll()一样
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">pollFirst&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//获取并移除该List的最后一个元素；如果该List为空，则返回 null；否则调用unlinkLast()进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">pollLast&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//将元素推入该List所表示的堆栈。实际调用addFirst()进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">push&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//从该List所表示的堆栈处弹出一个元素。实际调用removeFirst()进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">pop&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//从该List中移除第一次出现的指定元素（从头部到尾部遍历列表时）。调用remove(o)进行处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">removeFirstOccurrence&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//从该List中移除最后一次出现的指定元素。从last开始向前遍历，找到与o相同的元素;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//再调用unlink()进行删除处理，返回true；遍历完后还找不到对应元素则返回false。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">removeLastOccurrence&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到 &lt;em>JDK6&lt;/em> 新增的这些方法实际上是对 &lt;em>JDK5&lt;/em> 新增的方法的扩展，从默认的操作（可能是针对头部或尾部）扩展到对头部和尾部的操作。&lt;/p>
&lt;h3 id="边界检查方法">边界检查方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//是否合法的元素下标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isElementIndex&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//对迭代器和add()方法而言是否合法下标（允许等于size）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isPositionIndex&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//生成报错信息字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">outOfBoundsMsg&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//检查是否合法的元素下标，不合法则抛IndexOutOfBoundsException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkElementIndex&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//检查对迭代器和add()方法而言是否合法下标，不合法则抛出IndexOutOfBoundsException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkPositionIndex&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他方法">其他方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//先调用父类的clone方法复制（其实是Object的本地方法），
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//然后遍历原List，逐个add到克隆后的新List中并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">clone&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//List转数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//根据size新建一个Object数组，遍历List，逐个Node的item属性加到Object数组中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Object&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//如果a的长度小于size，需要调用java.lang.reflect.Array.newInstance(方法新建一个size长度的T[]数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//然后遍历List，将每个Node元素的item属性复制到数组中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//最后将下标为size的元素置为null（标识数组结束， 数组长度大于size才有这个操作）并返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> T&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>T&lt;span style="color:#5bc4bf">[]&lt;/span> a&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//序列化方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//写入到输出流，先写入size，然后遍历List逐个Node元素的item属性写入输出流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeObject&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">io&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ObjectOutputStream&lt;/span> s&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//读取输入流构造List，先读入一个int作为size，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//然后从输入流读取size次，每次读取的对象强转为E类型，并调用linkLast()加入到L链表尾部
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">readObject&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">io&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ObjectInputStream&lt;/span> s&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="jdk8-开始引入的方法">&lt;em>JDK8&lt;/em> 开始引入的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//spliterator：返回一个内部类static final class LLSpliterator&amp;lt;E&amp;gt; implements Spliterator&amp;lt;E&amp;gt; 的实例。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//为了并行遍历数据源中的元素，Stream.isParallel()实现调用。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//关于Spliterator接口在ArrayList源码的笔记里有介绍，在此不再赘述
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//这个实现类在final int getEst()est = LinkedList的size，expectedModCount = LinkedList的modCount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Spliterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">spliterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="迭代器">迭代器&lt;/h2>
&lt;h3 id="获取迭代器的方法">获取迭代器的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//返回此列表中的元素的列表迭代器（按适当顺序），从列表中指定位置开始。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//检查下标越界后，返回LinkedList的内部类ListItr的实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> ListIterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">listIterator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//返回以逆向顺序在此双端队列的元素上进行迭代的迭代器。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//返回的是LinkedList的内部类DescendingIterator的实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">descendingIterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//返回父类AbstractList的内部类ListItr实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> AbstractSequentialList&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">iterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="迭代器listitr">迭代器ListItr&lt;/h3>
&lt;p>包含以下成员变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//next()，previous()，remove()，set()，add()等方法返回的Node元素记录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> lastReturned&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//当前游标指向的Node元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> next&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//当前游标的下标值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> nextIndex&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//记录应有的modCount，迭代器对链表进行修改后会更新modCount，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//而迭代器以外对链表的操作不会更新这个属性，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//因此外部操作后再进行迭代器的操作会抛出ConcurrentModificationException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> expectedModCount &lt;span style="color:#5bc4bf">=&lt;/span> modCount&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其余&lt;code>ListIterator&lt;/code>接口方法的具体实现在此不表，与&lt;code>ArrayList&lt;/code>的&lt;code>ListItr&lt;/code>的实现类似，只是在一些修改链表的方法里需要对应修改前后元素的引用而已，此外上一个下一个的迭代效率也较高（直接读取Node元素的prev/next引用）。&lt;/p>
&lt;h3 id="迭代器descendingiterator">迭代器DescendingIterator&lt;/h3>
&lt;p>该迭代器是为了实现&lt;code>java.util.Deque&lt;/code>接口的&lt;code>Iterator&amp;lt;E&amp;gt; descendingIterator()&lt;/code>方法。&lt;br>
具体实现还是用前面介绍的&lt;code>LinkedList&lt;/code>的内部类&lt;code>ListItr&lt;/code>。由于是反向的迭代器，因此用私有变量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> ListItr itr &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ListItr&lt;span style="color:#5bc4bf">(&lt;/span>size&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现从链表尾部开始迭代。&lt;br>
从尾部迭代到头部的迭代方式（反向迭代）从其他几个方法的具体实现也可以看出来，比较简单，只贴出代码就算了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">hasNext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> itr&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasPrevious&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> itr&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">previous&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> itr&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出并没有去重写 &lt;em>JDK8&lt;/em> 的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">default&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">forEachRemaining&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Consumer&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> action&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法。&lt;/p></description></item><item><title>SpringMVC中的WebSocket开发</title><link>https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 29 Jul 2017 15:26:32 +0800</pubDate><guid>https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/snow.png" alt="Featured image of post SpringMVC中的WebSocket开发" />&lt;h1 id="springmvc中的websocket开发">SpringMVC中的WebSocket开发&lt;/h1>
&lt;h2 id="websocket简介">WebSocket简介&lt;/h2>
&lt;h3 id="websocket背景">WebSocket背景&lt;/h3>
&lt;p>在WebSocket出现之前，服务器的状态更新想要通知客户端，只能由客户端发起轮询（如Ajax）， 即在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客服端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。
WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。WebSocket通讯协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。
在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。WebSocket不仅允许服务器和客户端双向通信，而且互相沟通的Header是很小的-大概只有 2 Bytes。&lt;/p>
&lt;h3 id="支持情况">支持情况&lt;/h3>
&lt;ul>
&lt;li>Spring： Spring从4.0开始加入了spring-websocket这个模块，并能够全面支持WebSocket，它与Java WebSocket API标准（JSR-356）保持一致，同时提供了额外的服务。&lt;/li>
&lt;li>浏览器：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">浏览器&lt;/th>
&lt;th style="text-align:center">支持的版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Chrome&lt;/td>
&lt;td style="text-align:center">4+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Firefox&lt;/td>
&lt;td style="text-align:center">4+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Internet Explorer&lt;/td>
&lt;td style="text-align:center">10+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Opera&lt;/td>
&lt;td style="text-align:center">10+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Safari&lt;/td>
&lt;td style="text-align:center">5+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>服务端：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">服务器&lt;/th>
&lt;th style="text-align:center">支持的版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">jetty&lt;/td>
&lt;td style="text-align:center">7.0.1+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">tomcat&lt;/td>
&lt;td style="text-align:center">7.0.27+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Nginx&lt;/td>
&lt;td style="text-align:center">1.3.13+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">resin&lt;/td>
&lt;td style="text-align:center">4+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="java-实现方法">Java 实现方法&lt;/h3>
&lt;p>在 Spring 端可以有以下几种方法使用 WebSocket：&lt;/p>
&lt;ol>
&lt;li>使用 Java EE7 的方式&lt;/li>
&lt;li>使用 Spring 提供的接口&lt;/li>
&lt;li>使用 STOMP 协议以及 Spring 的 MVC&lt;/li>
&lt;/ol>
&lt;p>本文使用Spring提供的接口，实现起来比较简单。&lt;/p>
&lt;h3 id="适用场景">适用场景&lt;/h3>
&lt;p>客户端和服务器需要 &lt;strong>高频率&lt;/strong> &lt;strong>低延迟&lt;/strong> 交换事件的时候。基本的候选包括但不限于，金融、游戏、合作、以及其他应用。这些应用对时间延迟很敏感，还需要以高频率交换大量的消息。&lt;/p>
&lt;h2 id="spring-mvc的websocket开发实战">Spring MVC的WebSocket开发实战&lt;/h2>
&lt;h3 id="nginx配置">Nginx配置&lt;/h3>
&lt;p>我们知道，WebSocket握手需要在HTTP请求头里增加&lt;code>Upgrade&lt;/code>和&lt;code>Connection&lt;/code>字段，以便向服务申请将连接升级为WebSocket。&lt;br>
但如果tomcat服务器使用了Nginx作为反向代理，那么默认是不会转发这两个请求头的，所以需要手动设置这两个HTTP请求头。&lt;br>
应在&lt;code>nginx.conf&lt;/code>对应域名&lt;code>server&lt;/code>配置里面的&lt;code>location&lt;/code>配置中增加：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy_set_header Upgrade &lt;span style="color:#ef6155">$http_upgrade&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header Connection &lt;span style="color:#48b685">&amp;#34;upgrade&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading">&lt;/h3>
&lt;h3 id="maven依赖">Maven依赖&lt;/h3>
&lt;p>在pom.xml文件中增加以下依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-websocket&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spring-version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="websocket相关的类">WebSocket相关的类&lt;/h3>
&lt;h4 id="实现websocketconfigurer">实现WebSocketConfigurer&lt;/h4>
&lt;p>对Spring WebSocket进行配置，可以通过xml配置文件的方式，也可以通过实现WebSocketConfigurer接口进行配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableWebSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketConfig&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> WebMvcConfigurerAdapter &lt;span style="color:#815ba4">implements&lt;/span> WebSocketConfigurer &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">registerWebSocketHandlers&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketHandlerRegistry registry&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addHandler&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span>&lt;span style="color:#48b685">&amp;#34;/webSocketServer&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//注册WebSocket处理的类的、及监听/映射路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addInterceptors&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> WebSocketHandshakeInterceptor&lt;span style="color:#5bc4bf">());&lt;/span> &lt;span style="color:#776e71">//注册WebSocket握手的拦截器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addHandler&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> &lt;span style="color:#48b685">&amp;#34;/sockjs/webSocketServer&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//注册WebSocket处理的类的、及监听/映射路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addInterceptors&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> WebSocketHandshakeInterceptor&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#776e71">//注册WebSocket握手的拦截器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">withSockJS&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//设定支持SockJS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们设置了两个监听的路径，第一个是传统的WebSocket，第二个是支持SockJS的。SockJS是一个JavaScript库，提供跨浏览器JavaScript的API，创建了一个低延迟、全双工的浏览器和web服务器之间通信通道。SockJS的API的命名方式基本上也和 WebSocket 一样，并且支持自动降级到AJAX轮询（降级顺序依次为：websocket -&amp;gt; html strea m -&amp;gt; long polling -&amp;gt; ajaxjsonp），因此可以很好地跨浏览器工作。
在配置文件里，我们设定了&lt;code>SystemWebSocketHandler&lt;/code>类（实现&lt;code>WebSocketHandler&lt;/code>接口，类似Controller）作为WebSocket各种事件的处理器，以及设定&lt;code>WebSocketHandshakeInterceptor&lt;/code>类（实现&lt;code>HandshakeInterceptor&lt;/code>接口）作为WebSocket协议握手的拦截器，这两个类时我们自己实现的，将在下文细述。&lt;/p>
&lt;h4 id="实现websockethandler接口">实现WebSocketHandler接口&lt;/h4>
&lt;p>WebSocketHandler接口为WebSocket事件处理器接口，有以下方法需要实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">WebSocketHandler&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接建立后的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionEstablished&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession var1&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//接收到WebSocket消息后的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleMessage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession var1&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> var2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket传输发生错误时的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleTransportError&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession var1&lt;span style="color:#5bc4bf">,&lt;/span> Throwable var2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接关闭后的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionClosed&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession var1&lt;span style="color:#5bc4bf">,&lt;/span> CloseStatus var2&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//是否处理WebSocket分段消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">supportsPartialMessages&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于业务逻辑而言，我们主要关注&lt;code>afterConnectionEstablished()&lt;/code>方法（进行一些初始化工作），以及&lt;code>handleMessage()&lt;/code>方法（处理页面发出的消息）。其余方法的实现内容相对固定，发生错误和连接关闭应该响应地关闭一些资源，至于分段消息，暂时用不到，可以直接返回&lt;code>false&lt;/code>。
下面给出一个简单的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 实现WebSocketHandler接口,作为WebSocket各种事件的处理器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">SystemWebSocketHandler&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> WebSocketHandler &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 维护所有已创建的WebSocket Session，key为用户ID（OpenID或管理员的名字）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 考虑到一个用户可能打开多个页面（如管理员可能在手机和PC登录，且多个人用同一个账号），这里使用Guava的Multimap来缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Multimap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 单例的对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> SystemWebSocketHandler INSTANCE &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> SystemWebSocketHandler&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> SystemWebSocketHandler &lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> INSTANCE&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocketSession中保存当前用户ID的Attribute key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String WEBSOCKET_USERID &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;WS_USERID&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 默认构造器，初始化日志对象和Session缓存Map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#06b6ef">SystemWebSocketHandler&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP &lt;span style="color:#5bc4bf">=&lt;/span> HashMultimap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">create&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立连接后，将用户ID和WebSocketSession对象的映射保存到WS_SESSION_MAP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionEstablished&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession session&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;connect to the websocket success......&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userId &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">)&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAttributes&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WEBSOCKET_USERID&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>userId&lt;span style="color:#5bc4bf">,&lt;/span> session&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 接收到WebSocket消息后的处理方法vvvvv
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 暂不处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param webSocketSession WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param webSocketMessage 页面发送的WebSocketMessage消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleMessage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession webSocketSession&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> webSocketMessage&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket传输发生错误时，关闭WebSocketSession，并从WS_SESSION_MAP中删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param exception 异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleTransportError&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession session&lt;span style="color:#5bc4bf">,&lt;/span> Throwable exception&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isOpen&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;websocket connection closed......&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Entry&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> entry &lt;span style="color:#5bc4bf">:&lt;/span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">entries&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>entry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getValue&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>entry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getKey&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> session&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket连接关闭后，从WS_SESSION_MAP中删除对应WebSocketSession
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param closeStatus 关闭状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionClosed&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession session&lt;span style="color:#5bc4bf">,&lt;/span> CloseStatus closeStatus&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">debug&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;websocket connection closed......&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Entry&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> entry &lt;span style="color:#5bc4bf">:&lt;/span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">entries&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>entry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getValue&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>session&lt;span style="color:#5bc4bf">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>entry&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getKey&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> session&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 不支持分段消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">supportsPartialMessages&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 给所有在线用户发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param message 需要发送的消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendMessageToUsers&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>TextMessage message&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession user &lt;span style="color:#5bc4bf">:&lt;/span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">values&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>user&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isOpen&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sendMessage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>message&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 给某个用户发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param userId 用户ID（OpenID或管理员的名字）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param message 需要发送的消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String userId&lt;span style="color:#5bc4bf">,&lt;/span> TextMessage message&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> users &lt;span style="color:#5bc4bf">=&lt;/span> WS_SESSION_MAP&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>userId&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WebSocketSession user &lt;span style="color:#5bc4bf">:&lt;/span> users&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>user &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> user&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isOpen&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sendMessage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>message&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，使用&lt;code>WebSocketSession.sendMessage()&lt;/code>方法可以向指定用户页面发送消息。&lt;/p>
&lt;h4 id="实现handshakeinterceptor接口">实现HandshakeInterceptor接口&lt;/h4>
&lt;p>HandshakeInterceptor接口为WebSocket握手拦截器接口，包含以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">HandshakeInterceptor&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立WebSocket连接、握手前的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">beforeHandshake&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServerHttpRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServerHttpResponse response&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketHandler wsHandler&lt;span style="color:#5bc4bf">,&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立WebSocket连接、握手后的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterHandshake&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServerHttpRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServerHttpResponse response&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketHandler wsHandler&lt;span style="color:#5bc4bf">,&lt;/span> Exception exception&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在前面的WebSocket配置类里面，这个接口的实现类用于拦截WebSocket连接握手，在握手前后都可以拦截。
我们的应用里用到这个握手拦截器，主要是因为在WebSocketHandler接口的方法中，只能拿到WebSocketSession对象，无法直接与用户请求的HttpSession建立关联。
而在握手拦截器中，通过ServerHttpRequest对象可以拿到关于当前用户、当前连接的很多相关信息，包括HttpSession及其属性；同时通过attributes参数可以设置最终生成的WebSocketSession对象的属性；从而WebSocketSession和HttpSession就可以建立起关联。
从一个简单的实现类中就可以清晰看到这一点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketHandshakeInterceptor&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> HandshakeInterceptor &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>HandshakeInterceptor&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立WebSocket连接、握手前的处理方
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 从HttpSession读取当前用户的用户ID（OpenID或管理员的名字），写入attributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param request Http请求对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param response Http响应对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param wsHandler WebSocketHandler实现类的实例，这里是SystemWebSocketHandler类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param attributes 握手生成的WebSocketSession对象的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 是否成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">beforeHandshake&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServerHttpRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServerHttpResponse response&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketHandler wsHandler&lt;span style="color:#5bc4bf">,&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>request &lt;span style="color:#815ba4">instanceof&lt;/span> ServletServerHttpRequest&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServletServerHttpRequest servletRequest &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>ServletServerHttpRequest&lt;span style="color:#5bc4bf">)&lt;/span> request&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpSession session &lt;span style="color:#5bc4bf">=&lt;/span> servletRequest&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getServletRequest&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getSession&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//使用userName区分WebSocketHandler，以便定向发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String userId &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">)&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>RegisterLoginController&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">OPENID_KEY&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//普通用户是OpenID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String adminUserId &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">)&lt;/span> session&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>AdminUserController&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">USER_NAME&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//管理员用户是用户名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> adminUserId&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//优先保存管理员的用户ID1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WEBSOCKET_USERID&lt;span style="color:#5bc4bf">,&lt;/span> adminUserId&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>WEBSOCKET_USERID&lt;span style="color:#5bc4bf">,&lt;/span> userId&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立WebSocket连接、握手后的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param request Http请求对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param response Http响应对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param wsHandler WebSocketHandler实现类的实例，这里是SystemWebSocketHandler类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param exception 抛出的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterHandshake&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ServerHttpRequest request&lt;span style="color:#5bc4bf">,&lt;/span> ServerHttpResponse response&lt;span style="color:#5bc4bf">,&lt;/span> WebSocketHandler wsHandler&lt;span style="color:#5bc4bf">,&lt;/span> Exception exception&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="业务层的封装">业务层的封装&lt;/h4>
&lt;p>实际的使用中，我们封装了一些类，包括WebSocket消息内容的实体类，以及发送消息的Service类（在Controller层触发了相应的事件时进行调用），以下代码仅供参考，请根据实际业务需求进行封装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket消息的统一封装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketMessage&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ROLE role&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//接受消息的角色，枚举，NORMAL=普通用户，ADMIN=客服/管理员
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> String id&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//用户ID（OpenID或管理员的名字）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> String event&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//事件，实际上是数字，10001=客服确认借出，10002=客服确认归还，20001=用户申请租赁，20002=用户申请归还
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> String msg&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//事件消息，具体的文字描述，英文
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">WebSocketMessage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ROLE role&lt;span style="color:#5bc4bf">,&lt;/span> String id&lt;span style="color:#5bc4bf">,&lt;/span> String event&lt;span style="color:#5bc4bf">,&lt;/span> String msg&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">role&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> role&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">id&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> id&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">event&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> event&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">msg&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> msg&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSONObject json &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JSONObject&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;role&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">role&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">id&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;event&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">event&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;msg&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">msg&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> json&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">enum&lt;/span> ROLE &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NORMAL &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;normal&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">},&lt;/span> ADMIN &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;admin&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 发送WebSocket消息的Service类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketMessageService&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> AdminUserDao adminUserDao&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>AdminUserEntity&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> adminUserList&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向普通用户发送客服确认借出消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param openId 用户OpenID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendBorrowConfirm&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String openId&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">(&lt;/span>NORMAL&lt;span style="color:#5bc4bf">,&lt;/span> openId&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;10001&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;admin_borrow_confirm&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>openId&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TextMessage&lt;span style="color:#5bc4bf">(&lt;/span>msg&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向普通用户发送客服确认归还消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param openId 用户OpenID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendReturnConfirm&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String openId&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">(&lt;/span>NORMAL&lt;span style="color:#5bc4bf">,&lt;/span> openId&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;10002&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;admin_return_confirm&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>openId&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TextMessage&lt;span style="color:#5bc4bf">(&lt;/span>msg&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向超级管理员及指定柜子对应的客服发送用户申请租赁的消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param boxId 柜子ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendBorrowApply&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> boxId&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//检查管理员列表是否已加载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> adminUserList&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adminUserList &lt;span style="color:#5bc4bf">=&lt;/span> adminUserDao&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">selectAllAdminUser&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>AdminUserEntity adminUser &lt;span style="color:#5bc4bf">:&lt;/span> adminUserList&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBoxId&lt;/span>&lt;span style="color:#5bc4bf">()==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBoxId&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>boxId&lt;span style="color:#5bc4bf">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//当前遍历到的是超级管理员或指定柜子对应的客服
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String adminName &lt;span style="color:#5bc4bf">=&lt;/span> adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getUserName&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">(&lt;/span>ADMIN&lt;span style="color:#5bc4bf">,&lt;/span> adminName&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;20001&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;user_borrow_apply&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adminName&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TextMessage&lt;span style="color:#5bc4bf">(&lt;/span>msg&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向超级管理员及指定柜子对应的客服发送用户申请归还的消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param boxId 柜子ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendReturnApply&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Integer boxId&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//检查管理员列表是否已加载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> adminUserList&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adminUserList &lt;span style="color:#5bc4bf">=&lt;/span> adminUserDao&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">selectAllAdminUser&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>AdminUserEntity adminUser &lt;span style="color:#5bc4bf">:&lt;/span> adminUserList&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBoxId&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getBoxId&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>boxId&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//当前遍历到的是超级管理员或指定柜子对应的客服
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> String adminName &lt;span style="color:#5bc4bf">=&lt;/span> adminUser&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getUserName&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage&lt;span style="color:#5bc4bf">(&lt;/span>ADMIN&lt;span style="color:#5bc4bf">,&lt;/span> adminName&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;20002&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;user_return_apply&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInstance&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adminName&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> TextMessage&lt;span style="color:#5bc4bf">(&lt;/span>msg&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="页面js">页面&amp;amp;&amp;amp;js&lt;/h3>
&lt;p>页面需要引入SockJS，js中需要初始化WebSocket并建立链接（前面在WebSocketConfig类中配置的映射路径）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">html&lt;/span> &lt;span style="color:#06b6ef">xmlns&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">xmlns:th&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.thymeleaf.org&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">meta&lt;/span> &lt;span style="color:#06b6ef">charset&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;utf-8&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">div&lt;/span> &lt;span style="color:#06b6ef">id&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;msgcount&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span> &lt;span style="color:#06b6ef">src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;../js/libs/jquery-2.0.2.min.js&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/js/libs/jquery-2.0.2.min.js}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span> &lt;span style="color:#06b6ef">src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;../js/sockjs.min.js&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/js/sockjs.min.js}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#815ba4">typeof&lt;/span> &lt;span style="color:#06b6ef">$basePath&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;undefined&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#06b6ef">$basePath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/breo/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//根据当前浏览器支持的WebSocket对象类型进行初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#39;WebSocket&amp;#39;&lt;/span> &lt;span style="color:#815ba4">in&lt;/span> window) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//浏览器内置WebSocket API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">WebSocket&lt;/span>(&lt;span style="color:#48b685">&amp;#34;ws://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#39;MozWebSocket&amp;#39;&lt;/span> &lt;span style="color:#815ba4">in&lt;/span> window) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Firefox浏览器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">MozWebSocket&lt;/span>(&lt;span style="color:#48b685">&amp;#34;ws://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他浏览器，或不支持WebSocket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">SockJS&lt;/span>(&lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;sockjs/webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接打开的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onopen&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//页面接收到WebSocket消息的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onmessage&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">msg&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#06b6ef">JSON&lt;/span>.&lt;span style="color:#06b6ef">parse&lt;/span>(&lt;span style="color:#06b6ef">evnt&lt;/span>.&lt;span style="color:#06b6ef">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">console&lt;/span>.&lt;span style="color:#06b6ef">log&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>.&lt;span style="color:#06b6ef">role&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;normal&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#06b6ef">msg&lt;/span>.&lt;span style="color:#06b6ef">event&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;10001&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">$&lt;/span>(&lt;span style="color:#48b685">&amp;#34;#msgcount&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">html&lt;/span>(&lt;span style="color:#48b685">&amp;#34;&amp;lt;font color=&amp;#39;red&amp;#39;&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">JSON&lt;/span>.&lt;span style="color:#06b6ef">stringify&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>)&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;lt;/font&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket发生错误的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onerror&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接关闭的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onclose&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>ArrayList源码阅读笔记（JDK8）</title><link>https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</link><pubDate>Tue, 11 Jul 2017 21:48:32 +0800</pubDate><guid>https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/city.png" alt="Featured image of post ArrayList源码阅读笔记（JDK8）" />&lt;h1 id="arraylist源码阅读笔记">ArrayList源码阅读笔记&lt;/h1>
&lt;h2 id="继承结构">继承结构&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/ArrayList_UML.png"
width="645"
height="380"
srcset="https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/ArrayList_UML_hu5ba80f57c145d5dbfc345eab97b6c938_20550_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/ArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/ArrayList_UML_hu5ba80f57c145d5dbfc345eab97b6c938_20550_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;h2 id="成员变量">成员变量&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">transient&lt;/span> Object&lt;span style="color:#5bc4bf">[]&lt;/span> elementData&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>存储List数据，用了transient关键字避免被持久化。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> size&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>List长度。 &lt;br>
在父类AbstractList中modCount成员变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> MAX_ARRAY_SIZE &lt;span style="color:#5bc4bf">=&lt;/span> Integer&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">MAX_VALUE&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span> 8&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有些JVM会在数组保留一些头部信息，为了防止报内存不足Error，在int最大值的基础上预留8个元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#815ba4">transient&lt;/span> &lt;span style="color:#fec418">int&lt;/span> modCount &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>表示已从结构上修改此列表的次数。从结构上修改是指更改列表的大小，或者打乱列表，从而使正在进行的迭代产生错误的结果。此字段由iterator和listiterator方法返回的迭代器和列表迭代器实现使用。如果意外更改了此字段中的值，则迭代器（或列表迭代器）将抛出&lt;code>ConcurrentModificationException&lt;/code>来响应next、remove、previous、set或add操作。子类是否使用此字段是可选的。如果子类希望提供快速失败迭代器（和列表迭代器），则它只需在其 add(int,e)和remove(int)方法（以及它所重写的、导致列表结构上修改的任何其他方法）中增加此字段，否则可以忽略此字段。对add(int, e)或remove(int)的单个调用向此字段添加的数量不得超过 1，否则迭代器（和列表迭代器）将抛出虚假的 &lt;code>ConcurrentModificationException&lt;/code>。&lt;/p>
&lt;h2 id="构造方法">构造方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ArrayList&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> initialCapacity&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>initialCapacity大于0的话elementData赋值为对应长度的Object数组；为0的话赋值为EMPTY_ELEMENTDATA（空数组）；负数的情况抛&lt;code>IllegalArgumentException&lt;/code>异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ArrayList&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认构造方法，elementData赋值为DEFAULTCAPACITY_EMPTY_ELEMENTDATA（空数组）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ArrayList&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>c先转成数组赋值给elementData，如果长度不为0且数组不为Object数组，则通过&lt;code> Arrays.copyOf()&lt;/code>转换为Object数组；如果长度为0则c先转成数组赋值给elementData，如果长度不为0且数组不为Object数组，则通过重新赋值为EMPTY_ELEMENTDATA（空数组）。&lt;/p>
&lt;h2 id="常规方法">常规方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">trimToSize&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>modCount++后，调用&lt;code>Arrays.copyOf()&lt;/code>将elementData复制到size大小的数组里并赋值给elementData。这样是因为容量常常会大于实际元素的数量。内存紧张时，可以调用该方法删除预留的位置，调整容量为元素实际数量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">ensureCapacity&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> minCapacity&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果数组为空，容量预取0，否则去默认值(DEFAULT_CAPACITY = 10)；若参数大于预设的容量，则使用该参数调用私有方法&lt;code>void ensureCapacityInternal(int minCapacity)&lt;/code>设置数组容量；后者会在当前数组长度不足时调用&lt;code>grow()&lt;/code>进行扩容。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">grow&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> minCapacity&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>容量为：当前容量增加一半、及minCapacity中的较大者。如果超过数组最大长度则调用&lt;code>hugeCapacity(int minCapacity)&lt;/code>处理，抛出错误。最后调用&lt;code>Arrays.copyOf()&lt;/code>复制旧数据到新数组并赋值给element。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//返回size属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isEmpty&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//size是否为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">contains&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//调用indexOf()是否大于等于0。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//下面详解
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>indexOf()查找元素索引，遍历数组逐个对比（如果o为null则直接判断&lt;code>== null&lt;/code>，否则调用&lt;code>o.equals()&lt;/code>进行判断），返回第一次找到的索引值，找不到则返回-1。lastIndexOf()与之类似，只是遍历的方向相反。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">clone&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>Arrays.copyOf()&lt;/code>进行浅拷贝，每个元素只拷贝引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Object&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> T&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">toArray&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>T&lt;span style="color:#5bc4bf">[]&lt;/span> a&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者转换为Object数组，调用&lt;code>Arrays.copyOf()&lt;/code>方法。&lt;br>
后者转换为指定类型的数组，返回的数组容量由参数和本数组中较大值确定；如果a参数的长度小于当前size，则调用带Class参数的&lt;code>Arrays.copyOf()&lt;/code>方法进行复制并返回；否则a的长度足够，则调用&lt;code>System.arraycopy()&lt;/code>将elementData复制到a，并将第一个实际没有数据的设为null（a[size]）。&lt;/p>
&lt;h2 id="增删改查方法">增删改查方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>rangeCheck(index);&lt;/code>检查下标是否越界后（越界则抛出&lt;code>IndexOutOfBoundsException&lt;/code>异常），直接从elementData数组根据下标拿值，速度比较快。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E element&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>rangeCheck(index);&lt;/code>检查下标是否越界后，读取索引对应的旧值，然后改为新值，并将旧的值返回；注意用到泛型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E element&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者调用&lt;code>ensureCapacityInternal(size + 1)&lt;/code>确认是否需要扩容后，直接设定数组对应下标的值。&lt;br>
后者先调用&lt;code>rangeCheckForAdd()&lt;/code>确认index参数是否越界，然后同样调用&lt;code>ensureCapacityInternal(size+1)&lt;/code>确认是否需要扩容，将index之后的元素通过&lt;code>System.arraycopy()&lt;/code>方法复制到index+1位置之后，最后将element赋值到下标为index处。&lt;br>
P.S.： System.arraycopy()的参数：src:源数组； srcPos:源数组要复制的起始位置； dest:目的数组； destPos:目的数组放置的起始位置； length:复制的长度。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者先调用&lt;code>c.toArray()&lt;/code>将参数c转换为数组，然后进行扩容的判断，接着调用&lt;code>System.arraycopy()&lt;/code>将数组的内容复制到elementData后面，并修改size的值，最后c的长度不为0则返回true，为零则返回false。&lt;br>
后者先判断index是否越界及是否需要扩容，然后计算需要移动的元素个数并调用&lt;code>System.arraycopy()&lt;/code>移动index以后的元素，接着调用&lt;code>System.arraycopy()&lt;/code>将c转换的数组复制到index后面，最后修改size的值，根据c的长度返回true/false。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object o&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeRange&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者按下标进行删除，先检查下标越界后，读取index对应的旧值，计算index下标往后的（需要移动的）元素个数，调用&lt;code>System.arraycopy()&lt;/code>进行移动，随后将原来最后一位改为null（方便GC回收），最后将旧值返回。&lt;br>
中者基本逻辑与前者类似，只是移动数组元素的范围不一样，而且需要遍历将数组尾部多个元素（toIndex - fromIndex个）赋值为null。&lt;br>
后者删除指定对象，遍历数组，找到与o相等的元素（o为null则判断&lt;code>==null&lt;/code>，否则调用&lt;code>o.equals()&lt;/code>判断相等），调用&lt;code>fastRemove()&lt;/code>删除，并返回true；如果找不到对应相等的元素，则返回false。&lt;code>private void fastRemove(int index)&lt;/code>方法的实现与&lt;code>E remove(int index);&lt;/code>基本一直，区别嘛，方法如其名，快就快在不需要进行越界判定，及不需要返回旧值，直接删除。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">clear&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>清空List，遍历数组将每个元素赋值为null，最后将size设为0.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">removeAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//batchRemove(c, false);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">retainAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//batchRemove(c, true);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param complement true时从数组保留指定集合中元素的值，为false时从数组删除指定集合中元素的值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 数组中重复的元素都会被删除(而不是仅删除一次或几次)，有任何删除操作都会返回true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">batchRemove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> complement&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">final&lt;/span> Object&lt;span style="color:#5bc4bf">[]&lt;/span> elementData &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">elementData&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> r &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">,&lt;/span> w &lt;span style="color:#5bc4bf">=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> modified &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//遍历数组，并检查这个集合是否包含对应的值，移动要保留的值到数组前面，w最后值为要保留的元素的数量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//简单点：若保留，就将相同元素移动到前段；若删除，就将不同元素移动到前段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(;&lt;/span> r &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> size&lt;span style="color:#5bc4bf">;&lt;/span> r&lt;span style="color:#5bc4bf">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>c&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">contains&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>elementData&lt;span style="color:#5bc4bf">[&lt;/span>r&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> complement&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementData&lt;span style="color:#5bc4bf">[&lt;/span>w&lt;span style="color:#5bc4bf">++]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> elementData&lt;span style="color:#5bc4bf">[&lt;/span>r&lt;span style="color:#5bc4bf">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>&lt;span style="color:#815ba4">finally&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//确保异常抛出前的部分可以完成期望的操作，而未被遍历的部分会被接到后面
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//r!=size表示可能出错了：c.contains(elementData[r])抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>r &lt;span style="color:#5bc4bf">!=&lt;/span> size&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">arraycopy&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>elementData&lt;span style="color:#5bc4bf">,&lt;/span> r&lt;span style="color:#5bc4bf">,&lt;/span>elementData&lt;span style="color:#5bc4bf">,&lt;/span> w&lt;span style="color:#5bc4bf">,&lt;/span>size &lt;span style="color:#5bc4bf">-&lt;/span> r&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w &lt;span style="color:#5bc4bf">+=&lt;/span> size &lt;span style="color:#5bc4bf">-&lt;/span> r&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//如果w==size：表示全部元素都保留了，所以也就没有删除操作发生，所以会返回false；反之，返回true，并更改数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">//而w!=size的时候，即使try块抛出异常，也能正确处理异常抛出前的操作，因为w始终为要保留的前段部分的长度，数组也不会因此乱序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>w &lt;span style="color:#5bc4bf">!=&lt;/span> size&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> i &lt;span style="color:#5bc4bf">=&lt;/span> w&lt;span style="color:#5bc4bf">;&lt;/span> i &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> size&lt;span style="color:#5bc4bf">;&lt;/span> i&lt;span style="color:#5bc4bf">++)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elementData&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> modCount &lt;span style="color:#5bc4bf">+=&lt;/span> size &lt;span style="color:#5bc4bf">-&lt;/span> w&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//改变的次数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> size &lt;span style="color:#5bc4bf">=&lt;/span> w&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//新的大小为保留的元素的个数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> modified &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> modified&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前两个方法调用后面的&lt;code>batchRemove()&lt;/code>方法（具体看上面的注释），第一个方法删除c里面的元素，第二个方法保留c里面的元素，有任何删除操作都会返回true，返回false表示没有删除任一元素。不难看出&lt;code>batchRemove()&lt;/code>方法的时间复杂度是&lt;code>O(n^2)&lt;/code>，大致逻辑是遍历数组，根据complement条件判断要保留的元素依次复制到数组的前面，w保存要保留的最大下标，如果期间发生异常则将未处理的元素都保留，遍历后将w之后的元素设置为null等待GC。&lt;/p>
&lt;h2 id="io方法">IO方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeObject&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">io&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ObjectOutputStream&lt;/span> s&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">readObject&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>java&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">io&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">ObjectInputStream&lt;/span> s&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者将List序列化到输出流，先写入size，再逐个元素写入，写入过程数组被更改会抛出ConcurrentModificationException异常。&lt;br>
后者读取输入流反序列化到List，先从输入流读取一个int，判断这个int作为size的话是否需要扩容，然后从输入流中读取Object从下标0开始逐个写入到elementData数组中（就是说读取的数量小于原来size的话，读取最后的下标之后的元素不会变动）。&lt;/p>
&lt;h2 id="迭代器方法">迭代器方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> ListIterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">listIterator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span> &lt;span style="color:#776e71">//new ListItr(index);开始位置为指定参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> ListIterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">listIterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//return new ListItr(0);开始位置为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">iterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">//return new Itr();
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>迭代器方法分别返回ListItr和Itr内部类的实例，而ListItr继承了Itr。&lt;/p>
&lt;h3 id="迭代器类itr">迭代器类Itr&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Itr&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="成员变量-1">成员变量&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> cursor&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//游标，下一个元素的索引，默认初始化为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">int&lt;/span> lastRet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//上次返回的元素的位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">int&lt;/span> expectedModCount &lt;span style="color:#5bc4bf">=&lt;/span> modCount&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//迭代过程不运行修改数组，否则就抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iterator接口方法">Iterator接口方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">hasNext&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回cursor != size;，如果游标到了size那也就是没有下一个了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先调用&lt;code>checkForComodification()&lt;/code>检查是否被修改过，然后判断如果游标已经越界则抛出&lt;code>NoSuchElementException&lt;/code>异常，否则lastRet改为游标值，游标前进，返回原来游标指向的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>lastRet &amp;lt; 0时抛&lt;code>IllegalStateException&lt;/code>异常，然后检查是否被修改过，随后调用&lt;code>ArrayList.remove(int index)&lt;/code>移除元素，游标后退，lastRet重设为-1，expectedModCount赋值为新的modCount。&lt;br>
基本上ArrayList采用size来维护自已状态，而Iterator采用cursor维护自已状态。当size出现变化时，cursor并不一定能够得到同步，除非这种变化是Iterator主动导致的，比如调用remove()方法导致ArrayList列表发生变化时，迭代器会更新cursor来同步这一变化，但其他方式导致的ArrayList变化Iterator无法感知，ArrayList也不会主动通知Iterator们。Iterator为了防止状态不一致可能引发的后果经常做checkForComodification检查，以防有变。如果有变，则以异常抛出。&lt;br>
所以在循环里删除元素的话要用迭代器的remove()方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">forEachRemaining&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Consumer&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> consumer&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JDK8开始有的方法，遍历数组，分别传入调用&lt;code>consumer.accept((E) elementData[i++]);&lt;/code>，即对每个元素执行同一方法。&lt;/p>
&lt;h4 id="其他方法">其他方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkForComodification&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>modCount != expectedModCount则抛出ConcurrentModificationException异常。&lt;/p>
&lt;h3 id="迭代器类listitr">迭代器类ListItr&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">ListItr&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> Itr &lt;span style="color:#815ba4">implements&lt;/span> ListIterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="构造器">构造器&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ListItr&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将游标设置为index。&lt;/p>
&lt;h4 id="接口方法">接口方法&lt;/h4>
&lt;p>接口&lt;code> Iterator&lt;/code>的方法在Itr中实现了，该类实现了&lt;code>ListIterator&lt;/code>接口中其他的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">hasPrevious&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cursor &lt;span style="color:#5bc4bf">!=&lt;/span> 0&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//根据游标判断是否有前一个元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">nextIndex&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cursor&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//游标即为下一个要迭代到的元素的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">previousIndex&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cursor &lt;span style="color:#5bc4bf">-&lt;/span> 1&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//游标减一即上一个元素（当前已迭代的）的下标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这三个方法比较简单就不具体讲了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">previous&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回上一个元素同时游标回退，与&lt;code>next()&lt;/code>方法类似，先检查是否被修改以及是否下标越界，然后lastRet和游标减一，返回索引减一之后对应的元素。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用指定元素替换 next 或 previous 返回的最后一个元素。先判定lastRet不小于0，否则抛出IllegalStateException异常。lastRet初始化为-1，之后只有调用ListIterator.add(E e)和remove()之后lastRet会恢复到-1。因为修改的是下标=lastRet的元素，所以不允许为-1，也就是说，只有在最后一次调用 next 或 previous 后既没有调用 ListIterator.remove 也没有调用 ListIterator.add 时才可以进行该调用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将指定的元素插入列表。在当前游标处调用&lt;code>List.add()&lt;/code>方法插入一个元素e，然后游标前进，lastRet恢复-1，同时更新expectedModCount。&lt;br>
新元素被插入到游标前：不影响对 next 的后续调用，并且对 previous 的后续调用会返回此新元素。&lt;/p>
&lt;h2 id="sublist方法与sublist内部类">subList()方法与SubList内部类&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//检查下标越界后，返回SubList的实例（用fromIndex、toIndex参数构造）作为子列表。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">subList&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//用于subList()方法的下标越界检查方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">subListRangeCheck&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> size&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//SubList类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">SubList&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractList&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> RandomAccess
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//注意在AbstractList.java源文件里也有一个SubList，然而并不是AbstractList的内部类，AbstractList.subList()方法会返回这个SubList的实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">SubList&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractList&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>SubList继承AbstractList抽象类，是List的实现类，主要用于返回ArrayList的视图，这个视图是原ArrayList对象中的一部分，确实是一部分，直接将原ArrayList对象引用到新的子视图的ArrayList，对子视图进行改变，原ArrayList对象也会随之改变。&lt;/p>
&lt;h3 id="成员变量-2">成员变量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> AbstractList&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> parent&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//保存母ArrayList的引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> parentOffset&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">//subList方法的fromIndex参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//subList方法的fromIndex参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">int&lt;/span> size&lt;span style="color:#5bc4bf">;&lt;/span>&lt;span style="color:#776e71">//subList方法的参数相减：toIndex - fromIndex
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，modCount赋值为母ArrayList的modCount。&lt;/p>
&lt;h3 id="接口方法-1">接口方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">add&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> E e&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> E &lt;span style="color:#06b6ef">remove&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeRange&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">addAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Spliterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">spliterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些方法的实现与ArrayList的实现都大同小异，差异在与下标多了偏移量parentOffset，而且最后调用parent（ArrayList）的同名方法进行处理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">subList&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回自己的类（SubList），构造方法的offset参数为offset（母ArrayList的subList方法的fromIndex参数）。&lt;/p>
&lt;h3 id="迭代器方法-1">迭代器方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">iterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> ListIterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">listIterator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者返回的是AbstractList的内部类ListItr，实现了ListIterator接口，具体不表。&lt;br>
后者返回ListIterator接口的一个匿名内部类，与ArrayList的ListItr的区别也是在于对ArrayList的elementData数组进行操作时，使用的下标加上offset（母ArrayList的subList方法的fromIndex参数）。&lt;/p>
&lt;h3 id="其他方法检查方法">其他方法（检查方法）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">rangeCheck&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">rangeCheckForAdd&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">outOfBoundsMsg&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkForComodification&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查下标越界、并行修改等，与ArrayList类似，具体不表。&lt;/p>
&lt;h2 id="jdk8新增方法">JDK8新增方法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//forEach：for循环遍历elementData，每个元素分别调用action.accept(elementData[i])方法进行处理，如果处理过程中ArrayList被并行修改了，那么抛出ConcurrentModificationException异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">forEach&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Consumer&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> action&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//spliterator：返回一个内部类 static final class ArrayListSpliterator&amp;lt;E&amp;gt; implements Spliterator&amp;lt;E&amp;gt;的实例。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//为了并行遍历数据源中的元素，Stream.isParallel()实现调用。下面专门一小节讲Spliterator接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//这个实现类在private int getFence()方法里面初始化了fence = ArrayList的size，expectedModCount = ArrayList的modCount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> Spliterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">spliterator&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//删除指定条件的元素。先遍历数组，将符合条件（filter.test(element) == true）的元素的下标设置到一个BitSet的对应下标元素中，即这个BitSet哪一位为true，对应下标在ArrayList的元素就符合filter规则，并使用removeCount记录满足规则的个数。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//遍历后如果有满足filter规则的元素，则遍历数组，将被删除的元素后面的元素往前移，最后将末尾无效数据设为null。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//若有删除的元素则返回true，否则返回false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">removeIf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Predicate&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filter&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//与forEach()类似，检查operator不为空，然后遍历数组，每个元素调用operator.apply((E) elementData[i])进行处理，最后判断是否发生了并发修改，并增加modCount。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">replaceAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>UnaryOperator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> operator&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//调用Arrays.sort(T[] a, int fromIndex, int toIndex, Comparator&amp;lt;? super T&amp;gt; c)进行排序，最后判断是否发生了并发修改，并增加modCount。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sort&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Comparator&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> E&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="spliterator接口提供的方法">Spliterator接口提供的方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">tryAdvance&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Consumer&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">super&lt;/span> T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> action&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Spliterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">trySplit&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">long&lt;/span> &lt;span style="color:#06b6ef">estimateSize&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">characteristics&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>tryAdvance()就是顺序处理每个元素，类似Iterator，如果还有元素要处理，则返回true，否则返回false&lt;/li>
&lt;li>trySplit()，这就是为Spliterator专门设计的方法，区分与普通的Iterator，该方法会把当前元素划分一部分出去创建一个新的Spliterator作为返回，两个Spliterator变会并行执行，如果元素个数小到无法划分则返回null&lt;/li>
&lt;li>estimateSize()，该方法用于估算还剩下多少个元素需要遍历&lt;/li>
&lt;li>characteristics()，其实就是表示该Spliterator有哪些特性，用于可以更好控制和优化Spliterator的使用。&lt;/li>
&lt;/ol></description></item><item><title>String源码阅读笔记（JDK8）</title><link>https://leibnizhu.github.io/p/String%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</link><pubDate>Sun, 09 Jul 2017 20:54:16 +0800</pubDate><guid>https://leibnizhu.github.io/p/String%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/</guid><description>&lt;img src="https://leibnizhu.github.io/p/String%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0JDK8/cup.png" alt="Featured image of post String源码阅读笔记（JDK8）" />&lt;h1 id="string源码阅读笔记">String源码阅读笔记&lt;/h1>
&lt;h2 id="成员变量">成员变量&lt;/h2>
&lt;p>value，存放String数据，不可变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">char&lt;/span> value&lt;span style="color:#5bc4bf">[];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hash，存放String的哈希值&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> hash&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">// Default to 0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="构造器部分">构造器部分&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>String original&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将参数的value和hash复制给当前对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> value&lt;span style="color:#5bc4bf">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>Arrays.copyOf()&lt;/code>复制到value属性中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> value&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> count&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先判断offset和count与value的长度对比是否可用，然后调用&lt;code>Arrays.copyOfRange()&lt;/code>复制到value属性中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> codePoints&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> count&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似上面，判断完之后，再遍历codePoints排除非法int，最后遍历codePoints强转char[]，赋值给value属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> length&lt;span style="color:#5bc4bf">,&lt;/span> String charsetName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查参数没有越界后，调用&lt;code>StringCoding.decode()&lt;/code>生成char[]赋值给value属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> length&lt;span style="color:#5bc4bf">,&lt;/span> Charset charset&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似上面，只是代表编码的参数改了类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[],&lt;/span> String charsetName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[],&lt;/span> Charset charset&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> length&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span> bytes&lt;span style="color:#5bc4bf">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分别调用上面两个构造方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>StringBuffer buffer&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>StringBuilder builder&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>Arrays.copyOf()&lt;/code>利用参数的value和length生成char[]赋值给value属性。两者区别在于前者多了synchronized修饰。&lt;br>
而关于&lt;code>StringCoding.decode()&lt;/code>，从源码可以看出来，默认的情况下会调用Charset.defaultCharset()获取默认编码，默认情况下获取到&lt;code>UTF-8&lt;/code>编码，如果获取失败或者获取到的并不支持的话则使用&lt;code>ISO-8859-1&lt;/code>编码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/* StringCoding类 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">decode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> ba&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> off&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> len&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String csn &lt;span style="color:#5bc4bf">=&lt;/span> Charset&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">defaultCharset&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">name&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use charset name decode() variant which provides caching.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> decode&lt;span style="color:#5bc4bf">(&lt;/span>csn&lt;span style="color:#5bc4bf">,&lt;/span> ba&lt;span style="color:#5bc4bf">,&lt;/span> off&lt;span style="color:#5bc4bf">,&lt;/span> len&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>UnsupportedEncodingException x&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> warnUnsupportedCharset&lt;span style="color:#5bc4bf">(&lt;/span>csn&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> decode&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;ISO-8859-1&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> ba&lt;span style="color:#5bc4bf">,&lt;/span> off&lt;span style="color:#5bc4bf">,&lt;/span> len&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>UnsupportedEncodingException x&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// If this code is hit during VM initialization, MessageUtils is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// the only way we will be able to get any kind of error message.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> MessageUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">err&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;ISO-8859-1 charset not available: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">+&lt;/span> x&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// If we can not find ISO-8859-1 (a required encoding) then things
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#776e71">// are seriously wrong with the installation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exit&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/* Charset类 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Charset &lt;span style="color:#06b6ef">defaultCharset&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>defaultCharset &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Charset&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String csn &lt;span style="color:#5bc4bf">=&lt;/span> AccessController&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">doPrivileged&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> GetPropertyAction&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;file.encoding&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Charset cs &lt;span style="color:#5bc4bf">=&lt;/span> lookup&lt;span style="color:#5bc4bf">(&lt;/span>csn&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>cs &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultCharset &lt;span style="color:#5bc4bf">=&lt;/span> cs&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultCharset &lt;span style="color:#5bc4bf">=&lt;/span> forName&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> defaultCharset&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有值得注意的时，String还提供了一个保护类型的构造方法&lt;code>String(char[] value, boolean share)&lt;/code>，与&lt;code>String(char[] value)&lt;/code>区别在于多了一个没用的参数，以便重载构造方法，而且实现时直接将参数的数组赋值给当前String对象的value属性，而不是复制数组，也就是说这个方法构造出来的String和参数传过来的char[]共享同一个数组，并不安全，这样的设计是出于性能和节约内存的考虑，因此这个方法是包私有的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> value&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> share&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// assert share : &amp;#34;unshared not supported&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> value&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他方法">其他方法&lt;/h2>
&lt;h3 id="静态工厂方法">静态工厂方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object obj&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用Object的toString()方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> data&lt;span style="color:#5bc4bf">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">copyValueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> data&lt;span style="color:#5bc4bf">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用String(char value[])构造器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> data&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> count&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">copyValueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> data&lt;span style="color:#5bc4bf">[],&lt;/span> &lt;span style="color:#fec418">int&lt;/span> offset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> count&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用String(char value[], int offset, int count)构造器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">boolean&lt;/span> b&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回&amp;quot;true&amp;quot;或&amp;quot;false&amp;quot;。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> c&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用String(char[] value, true)构造器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> i&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">long&lt;/span> l&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">float&lt;/span> f&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">valueOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">double&lt;/span> d&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用参数对应包装类的toString()方法。&lt;/p>
&lt;h3 id="intern方法">intern()方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">native&lt;/span> String &lt;span style="color:#06b6ef">intern&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该方法返回一个字符串对象的内部化引用。 众所周知：String类维护一个初始为空的字符串的对象池，当intern方法被调用时，如果对象池中已经包含这一个相等的字符串对象则返回对象池中的实例，否则添加字符串到对象池并返回该字符串的引用。&lt;/p>
&lt;h3 id="对的重载">对“+”的重载&lt;/h3>
&lt;p>String对“+”的支持其实就是使用了StringBuilder以及他的append()、toString()le两个方法。&lt;/p>
&lt;h3 id="常规方法">常规方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isEmpty&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断length是否为0。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">char&lt;/span> &lt;span style="color:#06b6ef">charAt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断越界，然后直接从value数组取值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">codePointAt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">codePointBefore&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">codePointCount&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> beginIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> endIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">offsetByCodePoints&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> index&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> codePointOffset&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>判断越界然后调用Character对应静态方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">getBytes&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String charsetName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">getBytes&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Charset charset&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">getBytes&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用StringCoding.encode()编码返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> beginIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> beginIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> endIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CharSequence &lt;span style="color:#06b6ef">subSequence&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> beginIndex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> endIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用String的构造方法&lt;code>String(char value[], int offset, int count)&lt;/code>，将会将原来的char[]中的值逐一复制到新的String中，两个数组并不是共享的，虽然这样做损失一些性能，但是有效地避免了内存泄露。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">concat&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String str&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先将原来数据用&lt;code>Arrays.copyOf()&lt;/code>复制到一个char数组中，然后调用&lt;code>getChars()&lt;/code>将str的值复制到char数组后面，最后调用共享char[]的构造方法将char数组构造成新的String对象并返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">matches&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String regex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用Pattern.matches()方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">contains&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CharSequence s&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用indexOf()进行判断，只要返回索引大于-1即包含。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">split&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String regex&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> limit&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">split&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String regex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>后者调用前者；如果regex长度为1而且不包含&lt;code>&amp;quot;.$|()[{^?*+\\&amp;quot;&lt;/code>，或者regex长度为2而且以&lt;code>&amp;quot;\\&amp;quot;&lt;/code>开头且第二个字符非数字字母（总而言之分割的正则其实只有一个字符），则创建一个List，遍历value，读取匹配到regex的时候，切取分隔符前面的子字符串，放入List中，最后一段也放入List，最后根据limit创建一个子List转换为String[]并返回；否则调用&lt;code>Pattern.compile(regex).split()&lt;/code>进行计算并返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">join&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CharSequence delimiter&lt;span style="color:#5bc4bf">,&lt;/span> CharSequence&lt;span style="color:#5bc4bf">...&lt;/span> elements&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">join&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CharSequence delimiter&lt;span style="color:#5bc4bf">,&lt;/span> Iterable&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> CharSequence&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> elements&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用StringJoiner的add()和toString()方法进行拼接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">toLowerCase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Locale locale&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">toLowerCase&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">toUpperCase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Locale locale&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">toUpperCase&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>涉及到多语言的实现，实现起来比较复杂，没仔细看。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">trim&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分别从头和尾开始遍历找到首次不为空字符的位置，取子字符串返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">toCharArray&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个同样长度的char数组，调用&lt;code>System.arraycopy()&lt;/code>复制并返回，避免安全性问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">format&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String format&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">...&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">format&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Locale l&lt;span style="color:#5bc4bf">,&lt;/span> String format&lt;span style="color:#5bc4bf">,&lt;/span> Object&lt;span style="color:#5bc4bf">...&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用Formatter的&lt;code>format()&lt;/code>方法进行计算并返回。&lt;/p>
&lt;h3 id="替代方法">替代方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">replace&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span> oldChar&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">char&lt;/span> newChar&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果新旧字符一样则直接返回this好了，否则先遍历，找到第一次出现oldChar的下标，如果没找到也是返回this，找到则将该下标之前的值循环复制到新数组，此下标之后的值复制到新数组的时候先判断是否oldChar，是的话复制newChar到新数组；最后用新数组构造一个String并返回。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">replaceFirst&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String regex&lt;span style="color:#5bc4bf">,&lt;/span> String replacement&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用Pattern.matcher()找到匹配之后，再调用Matcher.replaceFirst()来替换首次出现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">replaceAll&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String regex&lt;span style="color:#5bc4bf">,&lt;/span> String replacement&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用Pattern.matcher()找到匹配之后，再调用Matcher.replaceAll()来替换全部。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String &lt;span style="color:#06b6ef">replace&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CharSequence target&lt;span style="color:#5bc4bf">,&lt;/span> CharSequence replacement&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样调用Pattern.matcher().replaceAll()，支持单个字符。&lt;/p>
&lt;h3 id="比较方法">比较方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Object anObject&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先判断是否this，再判断是否String对象，再判断长度是否相等，最后逐个char进行对比。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">contentEquals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>StringBuffer sb&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>contentEquals(CharSequence cs)&lt;/code>，该方法判断如果是StringBuffer则加同步去执行&lt;code>nonSyncContentEquals(AbstractStringBuilder sb)&lt;/code>，否则（StringBuilder的情况）不加同步直接执行。 而&lt;code>nonSyncContentEquals(AbstractStringBuilder sb)&lt;/code>中具体的比较流程与equals基本一致。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">equalsIgnoreCase&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String anotherString&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>先后判断是否this、是否null、长度是否相同，然后调用&lt;code>boolean regionMatches()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">regionMatches&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">boolean&lt;/span> ignoreCase&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toffset&lt;span style="color:#5bc4bf">,&lt;/span> String other&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> ooffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> len&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比较this和other是否相等，先判断越界，再逐个字符比较，相同则继续，不同则根据ignoreCase参数，如果true则先将比较双方转成大写进行相等判断，还不相等则转成小写（针对格鲁吉亚语）进行判断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String prefix&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> toffset&lt;span style="color:#5bc4bf">),&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String prefix&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#ef6155">```&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>后者调用前者&lt;span style="color:#ef6155">，&lt;/span>从指定偏移量开始&lt;span style="color:#ef6155">，&lt;/span>逐个字符进行判断是否相等&lt;span style="color:#ef6155">，&lt;/span>判断次数为prefix的长度&lt;span style="color:#ef6155">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">```&lt;/span>java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">endsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String suffix&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用&lt;code>startsWith(suffix, value.length - suffix.value.length)&lt;/code>，判断this的后面N（suffix的长度）个字符是否与suffix相等。&lt;/p>
&lt;h3 id="哈希方法">哈希方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">hashCode&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hash属性初始化为0，如果调用hashCode()的时候发现hash为0则开始计算哈希值（懒加载）；由于String不可变，则hash计算一次即可。哈希算法核心为&lt;code>h = 31 * h + val[i];&lt;/code>，遍历所有字符，循环地加上乘以31的哈希值作为新的哈希值，相当于&lt;code>val[0]*31^(n-1) + val[1]*31^(n-2) + ... + val[n-1]&lt;/code>；而选用31，可能时出于&lt;code>i*31== (i&amp;lt;&amp;lt;5)-1&lt;/code>的考虑。&lt;/p>
&lt;h3 id="查找方法">查找方法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> ch&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> ch&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者调用后者（fromIndex=0），先判断越界，然后有两种情况就是ch对应单字节和双字节，单字节则直接从fromIndex开始遍历对比查找，双字节则调用&lt;code>int indexOfSupplementary(int ch, int fromIndex)&lt;/code>遍历查找的时候同时判断两个字节。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> ch&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> ch&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOfSupplementary&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> ch&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与indexOf()系列类似，只是遍历查找的起点和方向不同。&lt;br>
 &lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String str&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String str&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> source&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceCount&lt;span style="color:#5bc4bf">,&lt;/span> String target&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> source&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceCount&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> target&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> targetOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> targetCount&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>前三者调用最后一个方法。处理完越界和特殊情况后，开始遍历，遍历过程中每次先找到this中出现target的第一个字符（减少判断），找到后开始从当前下标开始，this的值与target的值逐个比较，判断到不相等的值或者到target的结尾则退出判断，然后如果退出判断时的下标等于开始判断下标+target长度，那么就是找到了，返回开始判断的下标，否则继续外面的循环。并没有用KMP算法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String str&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String str&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> source&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceCount&lt;span style="color:#5bc4bf">,&lt;/span> String target&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">lastIndexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> source&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> sourceCount&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">char&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> target&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> targetOffset&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> targetCount&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">int&lt;/span> fromIndex&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与indexOf()系列类似，只是查找的方向以及起始位置不一样了。&lt;/p></description></item><item><title>《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化</title><link>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94.%E7%BB%88%E7%AB%A0Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 20 Jun 2017 12:55:14 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94.%E7%BB%88%E7%AB%A0Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E4%BC%98%E5%8C%96/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%94.%E7%BB%88%E7%AB%A0Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E4%BC%98%E5%8C%96/touhou_yuyuko.png" alt="Featured image of post 《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化" />&lt;p>&lt;strong>JVM笔记系列索引&lt;/strong>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%80JVM%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/" >《深入理解Java虚拟机》 学习笔记(二)——垃圾回收&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%89%e7%b1%bb%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(三)——类文件结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e5%9b%9b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6%e4%b8%8eJVM%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%94.%e7%bb%88%e7%ab%a0Java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8/%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化&lt;/a>&lt;/p>
&lt;h2 id="java内存模型">Java内存模型&lt;/h2>
&lt;p>JVM定义了一种Java内存模型以消除各种硬件和操作系统的内存访问差异，保证Java程序的跨平台性。&lt;/p>
&lt;h3 id="主内存和工作内存">主内存和工作内存&lt;/h3>
&lt;p>所有的变量存储在主内存，每个线程有自己的工作内存，保存了被这个线程使用到的变量的主内存副本拷贝，线程对变量的所有操作都在对应工作内存进行。&lt;br>
主内存和工作内存与第一篇的内存结构不是一个层面上的概念，主内存主要对应Java堆的对象实例数据，工作内存主要对应虚拟机栈的部分区域，而且工作内存可能优先存储与寄存器和高速缓存中。&lt;/p>
&lt;h3 id="内存操作">内存操作&lt;/h3>
&lt;p>Java内存模型规定了8种内存操作：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>lock&lt;/strong>锁定，将变量表示为某线程独占；&lt;/li>
&lt;li>&lt;strong>unlock&lt;/strong>解锁，将变量的lock状态借出，执行后才能被其他线程lock；&lt;/li>
&lt;li>&lt;strong>read&lt;/strong>读取，将变量的值从主内存中读取，准备load；&lt;/li>
&lt;li>&lt;strong>load&lt;/strong>载入，必须先进行read，将read到的数据放入工作内存的变量副本；&lt;/li>
&lt;li>&lt;strong>use&lt;/strong>使用，将工作内存的变量的值传递给执行引擎；&lt;/li>
&lt;li>&lt;strong>assign&lt;/strong>赋值，接收执行引擎的值付给工作内存的变量；&lt;/li>
&lt;li>&lt;strong>store&lt;/strong>存储，将变量的值从工作内存读取，准备write；&lt;/li>
&lt;li>&lt;strong>write&lt;/strong>写入，必须先进行store，将store到的数据放入主内存对应变量。&lt;/li>
&lt;/ol>
&lt;p>此外规定了对应的一些规则，如read、load和store、write不能单独出现，assign后的变量必须同步回主内存，没有assign的变量不能同步回注内存等等。&lt;/p>
&lt;h3 id="volatile变量">volatile变量&lt;/h3>
&lt;p>volatile声明能保证变量对所有线程可见性，即一个线程修改了变量的值，其他线程立即得知新的值。但由于Java操作并非全是原子操作，所以volatile变量在并发下不能保证线程安全。例如++操作，对应字节码为4个指令，大致可分为读值/加一/写入等步骤，volatile关键值只能保证在取值放入操作栈顶的时候是最新的值，此后的操作之前可能其他线程已经修改了变量的值，就会导致线程安全问题。&lt;br>
适合使用volatile的情况有：&lt;/p>
&lt;ol>
&lt;li>运算结果不依赖变量的当前值，或者只有单一线程修改变量的值；&lt;/li>
&lt;li>变量不需要与其他状态变量共同参与不变约束。&lt;/li>
&lt;/ol>
&lt;p>volatile关键字还能禁止指令重排优化，普通变量只能保证依赖赋值结果的地方都获得正确结果，但不能保证赋值操作的顺序与代码一致。volatile关键字可以避免多线程情况下，代码执行顺序被重排导致的一些错误。&lt;br>
volatile变量的读操作性能与普通变量基本无差别，写操作可能慢一些，总体开销比锁小。&lt;br>
在Java内存模型层面上来看，volatile变量要求load操作和use操作必须连续一起出现，assign和store操作也必须连续一起出现，即每次使用volatile变量前必须从主内存刷新最新的值，每次修改volatile变量之后必须立刻同步到主内存。&lt;/p>
&lt;h3 id="long和double变量">long和double变量&lt;/h3>
&lt;p>没有被volatile修饰的64位数据（long和double）的读写操作划分位两次32位操作，不能保证其操作的原子性。但实际目前商用JVM基本都把64位数据的读写操作作为原子操作。&lt;/p>
&lt;h2 id="java线程">Java线程&lt;/h2>
&lt;h3 id="java线程实现">Java线程实现&lt;/h3>
&lt;p>一般来说线程有3种实现方法：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>使用内核线程&lt;/strong>：使用操作系统内核的轻量级进程（LWP），每个轻量级进程与一个内核线程一一对应，一对一。缺点是代价较高，在内核态和用户态之间来回切换，并消耗内核资源，操作系统支持的轻量级进程数量有限；&lt;/li>
&lt;li>&lt;strong>使用用户线程&lt;/strong>：用户线程建立在用户空间的线程库上，其建立、同步、销毁、调度完全在用户态完成，不需要内核帮助，一对多。因此快速且低消耗，支持更大的线程数量。缺点是实现复杂，很多问题需要考虑实现；&lt;/li>
&lt;li>&lt;strong>用户线程+轻量级进程&lt;/strong>：以上两者的混合，多対多。&lt;/li>
&lt;/ol>
&lt;p>JDK1.2之前使用用户线程实现，JDK1.2开始替换为基于操作系统原生线程模型实现。对Sun JDK而言，Windows和Linux版都是一对一线程模型，一条Java线程映射到一条轻量级进程，Solaris中支持一对一和多対多。&lt;/p>
&lt;h3 id="java线程调度">Java线程调度&lt;/h3>
&lt;p>线程调度方式分为协同式和抢占式。协同式(Cooperative)指线程执行时间由线程自身控制，执行完完成后主动通知系统切换线程；抢占式(Preemptive)指由系统统一分配每个线程的执行时间，线程自身不能决定线程切换。Java使用抢占式。&lt;/p>
&lt;h2 id="java线程安全">Java线程安全&lt;/h2>
&lt;h3 id="线程安全等级">线程安全等级&lt;/h3>
&lt;p>按由强至弱分为以下5种：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>不可变&lt;/strong>：基本数据类型加final修饰，对象则保证其行为不影响其状态。注意AtomicInteger和AtomicLong并非不可变，这样的设计应该是考虑到线程访问外部变量需要final，但有时候需要可变的数，于是有了这些类；&lt;/li>
&lt;li>&lt;strong>绝对线程安全&lt;/strong>：不需要任何额外的同步措施，即可实现线程安全。Java API标注线程安全的类很多并不是绝对线程安全；&lt;/li>
&lt;li>&lt;strong>相对线程安全&lt;/strong>：通常意义上的线程安全，指保证对象单独的操作是线程安全的，但不保证任何顺序连续调用都能保证线程安全/正确性；&lt;/li>
&lt;li>&lt;strong>线程兼容&lt;/strong>：通常意义上的线程不安全，指对象本身并不线程安全，但可以通过同步手段保证在并发环境下安全、准确；&lt;/li>
&lt;li>&lt;strong>相互层对立&lt;/strong>：无论是否采取同步手段，都无法在多线程环境下并发使用。极少出现，比如Thread类的suspend()和resume()方法，如果两个线程同时持有同一个线程对象，同时分别去中断及恢复线程，中断的是进行恢复操作的线程，那么就会产生死锁。&lt;/li>
&lt;/ol>
&lt;h3 id="线程安全实现方法">线程安全实现方法&lt;/h3>
&lt;p>包括以下几种：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>互斥同步&lt;/strong>：保证共享数据同一时刻制备一个线程使用。Java最基本的互斥同步手段是sychronized关键字，编译后在同步块前后形成monitorenter和monitorexit两个字节码指令，需要一个reference类型参数来指定锁定/解锁的对象；执行monitorenter指令时，先尝试获取锁，如果锁对象没被锁定或者当前线程已经拥有这个锁，那么锁的计数器加一，并进入代码块，到monitorexit指令执行时则计数器减一，到计数器为0时释放锁。也就是说sychronized对同个线程而言是可重入的，不会自己把自己死锁。但阻塞或唤醒线程开销都比较大，需要切换用户态/内核态，因此sychronized是重量级操作。还可以使用ReentrantLock实现同步，相比sychronized，有等待可中断、公平锁、绑定多条件(Condition)等功能。JDK1.6之后sychronized与ReentrantLock性能基本持平。&lt;/li>
&lt;li>&lt;strong>非阻塞同步&lt;/strong>：先进行操作，没有其他线程争用共享数据则操作成功，否则产生冲突，则采取补偿措施（比如不断重试），基于处理器的一些新指令实现，如Compare-and-Swap（比较并交换，CAS），用户程序不能直接调用，但AtomicInteger等类使用到了。&lt;/li>
&lt;li>&lt;strong>无同步方案&lt;/strong>：如可重入代码（可以在代码执行的任何时刻中断，去执行别的代码，再返回继续执行而不出现错误），线程本地存储（Thread Local Storage）。&lt;/li>
&lt;/ol>
&lt;h2 id="java锁优化">Java锁优化&lt;/h2>
&lt;p>JDK1.6开始引入了许多高效并发优化，实现了各种锁优化技术：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>自旋锁与自适应锁&lt;/strong>：自旋锁即多个线程请求锁，若持有锁的线程很快会释放锁的话，让其他线程在其他CPU内核执行忙循环（自旋），而不是来回切换挂起/恢复线程，减少开销。自适应锁就是自旋时间由前一次在同一个锁上自旋时间、以及锁的拥有者状态决定自旋时间的自旋锁。&lt;/li>
&lt;li>&lt;strong>锁消除&lt;/strong>：根据逃逸分析结果，判定代码对应堆中数据都不会逃逸的话，可以认为是线程私有的数据，就可以不加同步锁，提高效率。&lt;/li>
&lt;li>&lt;strong>锁粗化&lt;/strong>：如果一系列连续操作都对同一个对象反复加锁解锁，甚至是循环体内加锁，那么频繁进行互斥同步操作会导致不必要的性能损耗，可以将锁的范围扩大，即称为锁粗化。&lt;/li>
&lt;li>&lt;strong>轻量级锁&lt;/strong>：在无竞争的情况下使用CAS操作消除同步的互斥量&lt;/li>
&lt;li>&lt;strong>偏向锁&lt;/strong>：锁偏向第一个获取该锁的线程，如果执行过程中锁没有被其他线程获取，那么持有偏向锁的线程无需同步；如果有其他线程尝试获取该锁，那么结束偏向模式。&lt;/li>
&lt;/ol></description></item><item><title>《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化</title><link>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 09 Jun 2017 12:43:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/</guid><description>&lt;p>&lt;strong>JVM笔记系列索引&lt;/strong>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%80JVM%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/" >《深入理解Java虚拟机》 学习笔记(二)——垃圾回收&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%89%e7%b1%bb%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(三)——类文件结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e5%9b%9b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6%e4%b8%8eJVM%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%94.%e7%bb%88%e7%ab%a0Java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8/%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化&lt;/a>&lt;/p>
&lt;h2 id="类加载机制">类加载机制&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/8.png"
width="737"
height="210"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/8_hu869176d3a01388de7dd81ab41b02155c_8084_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/8_hu869176d3a01388de7dd81ab41b02155c_8084_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="350"
data-flex-basis="842px"
>
类从加载导卸载出内存的整个生命周期如上图所示。图中的7个阶段中，加载、验证、准备、初始化和卸载的顺序是确定的，而解析和使用阶段不一定，解析可能在初始化之后（动态绑定）。&lt;/p>
&lt;h3 id="类加载时机">类加载时机&lt;/h3>
&lt;p>&lt;strong>有且只有&lt;/strong>以下5种情况：&lt;/p>
&lt;ol>
&lt;li>遇到new、getstatic、putstatic、invokestatic等字节码，对应Java代码中的new对象、读取或者设置类的静态变量、调用类的静态方法；&lt;/li>
&lt;li>使用reflect包进行反射的时候；&lt;/li>
&lt;li>初始化类时，若父类未初始化，则先出发父类的初始化；&lt;/li>
&lt;li>JVM启动时，执行的主类（包含main()方法的类）；&lt;/li>
&lt;li>JDK1.7以后动态语言支持。&lt;/li>
&lt;/ol>
&lt;p>注意是有且仅有，其他情况，譬如数组定义引用到未加载的类、调用类的静态常量（存储在常量池中）等其他情况并不会触发类的初始化加载。&lt;/p>
&lt;h3 id="加载">加载&lt;/h3>
&lt;p>完成以下事情：&lt;/p>
&lt;ol>
&lt;li>通过类的全限定名获取类的二进制字节流（不一定从文件获取，也可能是从网络、zip包、动态代理、其他文件如jsp等途径生成）；&lt;/li>
&lt;li>将字节流的静态存储结构转化为方法区的运行时数据结构，具体由虚拟机自行实现定义；&lt;/li>
&lt;li>生成对应java.lang.Class对象，放在方法区。&lt;/li>
&lt;/ol>
&lt;p>数组类本身不通过类加载器创建，而是JVM直接创建的，如果数组类加载的时候，其组件类型（去掉最外面维度之后的类型）是引用类型，则递归地加载。&lt;br>
加载阶段和连接阶段的部分内容（比如一部分字节码文件格式的验证动作）时交叉进行的，但两者的开始时间肯定是保持先后顺序的。&lt;/p>
&lt;h3 id="验证">验证&lt;/h3>
&lt;p>验证步骤是为了确保Class文件的字节流中的信息符合JVM要求，且不危害JVM安全。验证过程又细分为以下4个子过程：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>文件格式验证&lt;/strong>：验证是否符合Class文件格式，如果验证到不符合Class文件格式约束，则JVM抛出java.lang.VerifyError异常或其子类；&lt;/li>
&lt;li>&lt;strong>元数据验证&lt;/strong>:进行语义分析，保证其符合Java语言规范；&lt;/li>
&lt;li>&lt;strong>字节码验证&lt;/strong>：通过数据流和控制流分析，确认语义合法且符合逻辑。JDK1.6之后的javac在Code属性的属性表里面增加了一项“StackMapTable”属性，描述了方法提中所有基本块（按控制流拆分的代码块）开始时本地变量表和操作栈应有的状态，字节码验证过程中秩序检查StackMapTable属性的记录是否合法即可；&lt;/li>
&lt;li>&lt;strong>符号引用验证&lt;/strong>：在连接的第三阶段——解析阶段中，JVM将符号引用转化为直接引用进行符号引用验证，对类自身以外的信息进行匹配行校验，比如符号引用的类是否能找到，类、方法、字段的访问性是否能被当前类访问。&lt;/li>
&lt;/ol>
&lt;h3 id="准备">准备&lt;/h3>
&lt;p>为类的静态变量分配内存，并初始化其值（初始化为零值）。如果有定义其取值，且非final变量，比如&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> String test &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>test变量不是final变量，会被初始化为零值null，在初始化阶段调用&amp;lt;clinit&amp;gt;方法时才会赋值&amp;quot;test&amp;quot;。&lt;br>
而一个final的静态变量，即常量，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> String test &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是会通过ConstantValue属性在准备阶段就初始化为&amp;quot;test&amp;quot;。&lt;/p>
&lt;h3 id="解析">解析&lt;/h3>
&lt;p>JVM将常量池的符号引用替换为直接引用的过程。JVM规范要求在调用符号引用操作的字节码指令之前必须先对其所使用的符号引用进行解析。JVM会将第一次解析结果进行缓存，避免解析动作重复进行。&lt;/p>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>初始化是类加载过程的最后一步，执行类构造器&amp;lt;clinit&amp;gt;()方法。&lt;br>
&amp;lt;clinit&amp;gt;方法由编译器自动收集类中所有静态变量的赋值动作以及静态代码块合并生成的，按源文件中出现的顺序（即静态代码块对于其后的静态变量，可以赋值，但不能访问）。&amp;lt;clinit&amp;gt;方法不需要调用父类的类构造器，JVM会保证&amp;lt;clinit&amp;gt;执行前父类的&amp;lt;clinit&amp;gt;方法已经执行，所以JVM第一个执行的&amp;lt;clinit&amp;gt;方法是Object的。JVM会保证多线程环境中&amp;lt;clinit&amp;gt;方法执行的安全性，保证只有一个线程去执行。&lt;br>
&amp;lt;clinit&amp;gt;方法不是必须的，比如没有静态变量的接口，或没有静态代码块和静态变量的类。&lt;/p>
&lt;h2 id="编译期优化">编译期优化&lt;/h2>
&lt;p>javac对代码的运行效率几乎没有任何优化措施（JDK1.3之后-O优化参数没有意义了），性能优化主要集中在运行期（后端的即时编译期），javac主要进行了一些针对Java语言编码过程的优化，如语法糖。&lt;/p>
&lt;h3 id="编译过程">编译过程&lt;/h3>
&lt;p>编译过程大概分为3个过程：
&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/9.png"
width="1306"
height="123"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/9_hub3b3d3b47598e5c2da162c1d89b967a1_11406_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/9_hub3b3d3b47598e5c2da162c1d89b967a1_11406_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1061"
data-flex-basis="2548px"
>
javac中的代码是这样的：
&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/10.png"
width="819"
height="460"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/10_hufd3f342c03009d08f18a4b1b1ada6259_23374_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8EJVM%E4%BC%98%E5%8C%96/10_hufd3f342c03009d08f18a4b1b1ada6259_23374_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>解析与填充符号表&lt;/strong>过程：首先进行词法、语法分析，将源代码的字符流转换为Token集合，然后根据Token序列构造抽象语法树AST，对应parseFiles()方法；然后填充符号表（记录符号地址和符号信息映射关系），符号表中记录的信息在编译的不同阶段都会用到，对应enterTress()方法；&lt;/li>
&lt;li>插入式注解处理器的&lt;strong>注解处理&lt;/strong>过程：处理代码中的注解，这个过程中可能影响到语法树的元素，如果影响到了，则要重新回到解析及填充符号表的过程，这样一个循环称作一个Round，直到注解处理器没有对语法树进行修改；&lt;/li>
&lt;li>&lt;strong>分析与字节码生成&lt;/strong>过程：具体又分为&lt;strong>标注检查&lt;/strong>（检查变量使用前是否已生命、变量与赋值之间类型是否匹配等问题，以及常量折叠，如&amp;quot;1&amp;quot;+&amp;ldquo;2&amp;quot;优化为&amp;quot;12&amp;rdquo;）、&lt;strong>数据及控制流分析&lt;/strong>（检查局部变量使用前是否赋值、每条路径是否都有返回值、异常是否都处理了等问题）、&lt;strong>解语法糖&lt;/strong>（由desugar()方法完成）、&lt;strong>字节码生成&lt;/strong>（收敛生成&amp;lt;clinit&amp;gt;()方法he &amp;lt;init&amp;gt;()方法，将所有生成的信息转换成字节码写入磁盘）等子过程。&lt;/li>
&lt;/ol>
&lt;h3 id="语法糖">语法糖&lt;/h3>
&lt;h4 id="泛型">泛型&lt;/h4>
&lt;p>Java的泛型是伪泛型，只在源码中存在，编译时进行类型擦除变成原生类型（Raw Type），并在调用的地方加上强转类型代码，这是为了兼容旧版本。对于重载方法，如果泛型参数的泛型类型不同而其他参数以及返回类型相同，是不允许重载的，比如以下方法1和方法2不能重载；而如果泛型参数的泛型类型不同，且返回类型不同，则可以重载，比如方法1和方法3（JVM本来就允许）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//方法1和方法2不能重载，方法1和方法3可以重载
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//方法1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">test&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Integer&lt;span style="color:#5bc4bf">&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//方法2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">test&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//方法3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">test&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="自动装箱拆箱遍历循环变长参数">自动装箱/拆箱、遍历循环、变长参数&lt;/h4>
&lt;p>遍历循环（增强for）的实现是编译时还原为迭代其的实现，因此需要实现Iterable接口。&lt;/p>
&lt;h4 id="条件编译">条件编译&lt;/h4>
&lt;p>java的条件编译通过条件为常量的if语句实现。如下面代码中，编译后的字节码不会包含调用B()方法的指令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> B&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行期优化">运行期优化&lt;/h2>
&lt;h3 id="解释器与编译器">解释器与编译器&lt;/h3>
&lt;p>许多主流商用JVM包括HotSpot采用解释器与编译器并存的结构，启动的时候使用解释器，保证启动速度，随着运行时间推移，编译器发挥作用，编译为本地代码，提高执行效率。在JVM中这种模式被称为混合模式，可以用&lt;code>-Xint&lt;/code>强制JVM运行于解释模式，或用&lt;code>-Xcomp&lt;/code>强制JVM运行于编译模式。HotSpot包含两个及时编译器Client Compiler和Server Compiler，一般简称为C1和C2。&lt;/p>
&lt;h3 id="热点探测">热点探测&lt;/h3>
&lt;p>运行过程中被即时编译器编译的&lt;strong>热点代码&lt;/strong>包括被多次调用的 &lt;strong>方法&lt;/strong> 或 &lt;strong>循环体&lt;/strong>，对于后者编译器还是会以整个方法作为编译对象。&lt;br>
判断方法或循环体是否热点代码的行为被称为&lt;strong>热点探测&lt;/strong>，目前主要的热点探测方法有两种：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>基于采样的热点探测&lt;/strong>。JVM周期性的检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那么就是热点方法。缺点是容易收到线程阻塞或其他外界因素影响，优点是简单高效；&lt;/li>
&lt;li>&lt;strong>基于计数器的热点探测&lt;/strong>。为每个方法甚至代码块建立计数器，统计执行次数，超过一定阈值就认为是热点方法。缺点是不能获取导方法的调用关系，优点是精确且严谨。&lt;/li>
&lt;/ol>
&lt;p>HotSpot使用第二种，准备了&lt;strong>方法调用计数器&lt;/strong>和&lt;strong>回边计数器&lt;/strong>。前者统计方法被调用的次数，默认的阈值：Client模式1500次，Server模式10000次，可以通过&lt;code>-XX:CompileThreshold&lt;/code>来设定；后者统计循环体被执行的次数，字节码遇到控制流向后跳转的指令称为回边(Back Edge)，通过&lt;code>-XX:BackEdgeThreshold&lt;/code>来手动设置阈值。&lt;br>
对于方法调用计数器，一个方法执行时先判断存不存在JIT编译过的版本，存在的话执行编译后版本，不存在的话计数器加一，再判断是否超过阈值，超过的话向即时编译器提交编译申请。其统计的并不是方法被调用的绝对次数，而是一段时间内的调用次数，如果超过一定时间计数器仍不足阈值，则计数值会减少一半，这被成为&lt;strong>热度衰减&lt;/strong>(Counter Decay)，这段时间被称为半衰期。热度衰减的动作时在GC时顺便进行的。&lt;br>
回边计数器没有计数热度衰减的过程，记录循环体被调用的绝对次数。&lt;br>
默认配置下，编译是在后台的编译线程进行的，除非用&lt;code>-XX:-BackgroundCompilation&lt;/code>来禁止后台编译，这样提交编译请求的线程会一直等待编译完成。&lt;/p>
&lt;h3 id="编译优化技术">编译优化技术&lt;/h3>
&lt;p>JVM几乎所有的优化措施都集中在及时编译器中。&lt;/p>
&lt;h4 id="方法内联">方法内联&lt;/h4>
&lt;p>方法内联（Method Inlining）指的是将调用的方法代码替换掉调用者的调用语句。目的：&lt;/p>
&lt;ol>
&lt;li>取出调用方法的成本，如建立栈帧；&lt;/li>
&lt;li>为其他优化建立良好基础，比如内联可以发现更多的无用代码。&lt;/li>
&lt;/ol>
&lt;p>考虑到多态，方法内联的实现并不简单，在编译器无法得出调用的方法是哪个版本的结论（父类还是子类），需要在运行期确定。&lt;br>
JVM引入了类型继承关系分析（Class Hierarchy Analysis，CHA）技术，用于确定目前加载的类中某个接口是否有多于一种的实现、某类是否存在子类、子类是否抽象等信息。进行内联时：&lt;/p>
&lt;ol>
&lt;li>如果目标方法是非虚方法（私有方法、实力构造器、父类方法、静态方法等），那么直接进行内联；&lt;/li>
&lt;li>对于虚方法，向CHA查询该方法是否有多个版本可选，如果只有一个版本，则直接进行内联，此时属于激进优化，需要预留逃生门（守护内联），此后如果JVM没有加载到改变方法接受者的继承关系的类，则可以继续使用内联优化的版本，否则抛弃已编译的代码、退回到解释状态进行或重新编译；&lt;/li>
&lt;li>如果虚方法有多个版本，则尝试内联缓存（Inline Cache）。发生方法调用前，内联缓存状态为空；第一次调用后，缓存记录下方法接受者的版本信息，每次进行方法调用的时候都比较接受者版本，如果方法接受者版本一样，则继续调用内联缓存进行内联，否则取消内联。&lt;/li>
&lt;/ol>
&lt;h4 id="冗余访问消除">冗余访问消除&lt;/h4>
&lt;p>冗余访问消除（Redundant Loads Elimination）指的是如果能保证一个方法的两次调用之间的代码不会引起其返回值的更改，那么这第二次调用的结果可以直接用第一次调用结果去赋值，比如一下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">foo1&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y&lt;span style="color:#5bc4bf">=&lt;/span>b&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他调用，不会影响b.value的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> z&lt;span style="color:#5bc4bf">=&lt;/span>b&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上代码可以优化为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">foo1&lt;/span>&lt;span style="color:#5bc4bf">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y&lt;span style="color:#5bc4bf">=&lt;/span>b&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他调用，不会影响b.value的返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> z&lt;span style="color:#5bc4bf">=&lt;/span>y&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="复写传播">复写传播&lt;/h4>
&lt;p>复写传播（Copy Propagation）指的是去掉重复的变量。&lt;/p>
&lt;h4 id="无用代码消除">无用代码消除&lt;/h4>
&lt;p>无用代码消除（Dead Code Elimination），无用代码指的是永远不会izhixing的代码，或者完全没有意义的代码。&lt;/p>
&lt;h4 id="公共子表达式消除">公共子表达式消除&lt;/h4>
&lt;p>Common Subexpression Elimination定义：一个表达式E已经计算过，且计算后到现在E的变量全部没有变化，那么E这次出现成为了公共子表达式，无需重复计算，直接用前面计算结果替换即可。如果消除优化仅限于程序基本块内，则成为局部公共子表达式消除，如果覆盖范围涵盖多个基本块，则成为全局公共子表达式消除。&lt;/p>
&lt;h4 id="数组边界检查消除">数组边界检查消除&lt;/h4>
&lt;p>Java访问数组元素时，会对下标进行上下界范围检查，不满足上下界时会抛出ArrayIndexOutOfBoundsException异常。&lt;br>
编译器根据数据流分析确定数组长度，并判断下标有无越界；在循环中进行数组访问时，也是可以通过数据流分析判定循环变量的取值是否越界，如果能保证循环体中不越界的话循环体中访问数组的语句可以消除边界检查。&lt;br>
还有一种思路时隐式异常处理，将空指针检查和除数为零检查消除，注册一个Segment Fault信号的异常处理器，放在异常处理里面，在这个异常处理器里面再转换为对应的异常并抛出。&lt;br>
还有一些其他的消除操作，比如自动装箱消除、安全点消除、消除反射等等。&lt;/p>
&lt;h4 id="逃逸分析">逃逸分析&lt;/h4>
&lt;p>逃逸分析不能直接优化代码，而是为其他优化手段提供优化的依据。逃逸分析指的是分析对象动态作用域：一个对象在方法中被定义后，被外部方法引用，则称为&lt;strong>方法逃逸&lt;/strong>，被外部线程引用访问到的话，被称为&lt;strong>线程逃逸&lt;/strong>。如果能证明一个对象不会逃逸到方法或线程外，则可以进行以下优化：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>栈上分配&lt;/strong>（Stack Allocation）：若确认对象没有方法逃逸，可以将其在栈上分配内存，则其占用内存会随着栈帧出栈而被销毁，减少GC压力，而一般应用中不逃逸的局部对象占很大比例；&lt;/li>
&lt;li>&lt;strong>同步消除&lt;/strong>（Synchronization Elimination）：若确认对象没有线程逃逸，可以对该变量实时的同步措施消除；&lt;/li>
&lt;li>&lt;strong>标量替换&lt;/strong>（Scalar Replacement）：&lt;strong>标量&lt;/strong>指一个数据无法再分解为更小的数据来表示，如基础数据类型，反之称之为&lt;strong>聚合量&lt;/strong>（Aggregate），如对象。若确认一个对象没有逃逸，则可以不创建对象，改为直接创建它会被使用到的成员变量来代替，同时可以保存在栈上，提高读写效率，并为进一步优化创造条件。&lt;/li>
&lt;/ol></description></item><item><title>《深入理解Java虚拟机》 学习笔记(三)——类文件结构</title><link>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link><pubDate>Tue, 06 Jun 2017 12:46:22 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/classfile.png" alt="Featured image of post 《深入理解Java虚拟机》 学习笔记(三)——类文件结构" />&lt;p>&lt;strong>JVM笔记系列索引&lt;/strong>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%80JVM%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/" >《深入理解Java虚拟机》 学习笔记(二)——垃圾回收&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%89%e7%b1%bb%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(三)——类文件结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e5%9b%9b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6%e4%b8%8eJVM%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%94.%e7%bb%88%e7%ab%a0Java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8/%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化&lt;/a>&lt;/p>
&lt;h2 id="jvm多语言支持">JVM多语言支持&lt;/h2>
&lt;p>Java规范分为Java语言规范（The Java Language Specification）和Java虚拟机规范（The Java Virtual Machine Specification），因此JVM支持多种语言，只要该语言编译后的类文件符合JVM规范。比如我们常用的Scala、Kotlin、Clojure、Groovy等等。&lt;/p>
&lt;h2 id="类文件结构">类文件结构&lt;/h2>
&lt;p>基础原则：多字节的数据，高位在前。JVM加载Class文件的时候进行动态连接。&lt;br>
Class文件结构类似C的结构体，包含无符号数（u1/u2/u4/u8表示1/2/4/8字节的无符号数）和表（由多个无符号数或表组成的结构体，class文件本身就是一个大的表），有多个同类的无符号数或者表并数量不确定的时候，一般先用一个无符号数记录数量，后面接上一系列连续的这种无符号数或者表。Class文件没有分隔符号，所以整个数据结构都是被严格规定的。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/7.png"
width="656"
height="141"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/7_huf22e46ef28e575f35893ae1dc5b63fdf_20734_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/7_huf22e46ef28e575f35893ae1dc5b63fdf_20734_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="465"
data-flex-basis="1116px"
>&lt;/p>
&lt;h3 id="魔数与class文件版本">魔数与Class文件版本&lt;/h3>
&lt;p>Class文件头4个字节是固定的0xCAFEBABE（咖啡宝贝），显然与Java语言命名的历史相关。&lt;br>
紧接着4个字节存储Class文件版本号，5-6字节是子版本号，7-8字节是主版本号（比如1.7.0是0x0033）。JVM读取Class文件的时候，搞版本JDK可以兼容旧版本Class文件，就是通过这4个字节进行判定的。&lt;/p>
&lt;h3 id="常量池">常量池&lt;/h3>
&lt;p>一般来说常量池占Class文件空间最大，由于长度不定，所以入口有u2类型的常量池容量计数器（8-9位），计数从1开始（Class文件中其他容量计数器都是从0开始的）。&lt;br>
常量池存储两类常量：字面量（类似Java语言中的常量）和符号引用，后者包括类和接口全名、字段名称和描述符、方法名称和描述符。JVM运行时从常量池获取符号引用再在类创建时解析到具体内存地址，没有C语言的“连接”步骤。&lt;br>
常量池每一个常量都是一个表。，一共有14种表，表的开头都是一个u1类型的标志位代表当前常量的类型（浮点整形之类），后面的结构与具体的常量类型有关，各自不同。&lt;br>
使用&lt;code>javap -verbose 类名&lt;/code>可以解析类的结构，输出结构大概这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> javap -verbose com.turingdi.breorent.user.controller.RentAndReturnController
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Classfile /home/leibniz/workspace/BreoRent/target/classes/com/turingdi/breorent/user/controller/RentAndReturnController.class
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Last modified 2017-6-6; size &lt;span style="color:#f99b15">9126&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MD5 checksum 26ed5594f39cfc9d6b109637ad76bf12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Compiled from &lt;span style="color:#48b685">&amp;#34;RentAndReturnController.java&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public class com.turingdi.breorent.user.controller.RentAndReturnController
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minor version: &lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> major version: &lt;span style="color:#f99b15">52&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flags: ACC_PUBLIC, ACC_SUPER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Constant pool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#1 = Methodref #111.#203 // java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#2 = Class #204 // org/springframework/web/servlet/ModelAndView&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#3 = Methodref #2.#203 // org/springframework/web/servlet/ModelAndView.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#4 = Class #205 // com/turingdi/breorent/common/wechatApi/process/WechatJdk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#5 = Methodref #4.#206 // com/turingdi/breorent/common/wechatApi/process/WechatJdk.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:(Ljavax/servlet/http/HttpServletRequest;)V&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#6 = Methodref #4.#207 // com/turingdi/breorent/common/wechatApi/process/WechatJdk.getMap:()Ljava/util/Map;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#7 = String #208 // appId&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#8 = String #209 // wechat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#9 = String #210 // APP_ID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>……
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常见的两种常量举例：&lt;/p>
&lt;ol>
&lt;li>CONSTANT_Class_info，类常量，标志为0x07，紧接着是1个u2类型的类名索引，指的是类名（字符串常量）在常量池中的索引（如上面所说，从1开始数）。&lt;/li>
&lt;li>CONSTANT_Utf8_info，字符串变量，标志为0x01，紧接着是1个u2类型的字符串长度，然后是字符串内容的bytes，u1类型，数量等于前面u2定义的。&lt;/li>
&lt;/ol>
&lt;p>从上面可以推导：类名（全限定名）是字符串常量，长度用u2类型表示，也就是最大长度是65535，换言之就是Java类全名最长65535，超过的无法编译。&lt;/p>
&lt;h3 id="访问标志">访问标志&lt;/h3>
&lt;p>常量池结束之后，有两个字节为访问标志，代表当前Class文件是否public、是否类/接口/枚举、是否抽象、是否注解等等。&lt;/p>
&lt;h3 id="类索引父类索引及接口索引集合">类索引、父类索引及接口索引集合&lt;/h3>
&lt;p>&lt;strong>类索引&lt;/strong>和&lt;strong>父类索引&lt;/strong>分别为u2类型数据，&lt;strong>接口索引集合&lt;/strong>结合为u2类型数据的集合（只能有一个父类，可以实现多个接口），分别用于记录当前类、父类、实现的接口的类描述符（CONSTANT_Class_info）在常量池中的索引。&lt;br>
类索引和父类索引紧接在访问标志后面，再后面是接口索引集合，入口是一个数量计数器，0表示没有实现任何接口，再后面就是具体的接口类描述符索引。&lt;/p>
&lt;h3 id="字段表集合">字段表集合&lt;/h3>
&lt;p>描述类或接口中定义的字段，包括静态和非静态的。结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">类型&lt;/th>
&lt;th style="text-align:center">名称&lt;/th>
&lt;th style="text-align:center">数量&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">access_flags&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">访问标志，public/private/final/static/enum等描述符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">name_index&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">字段简单名称在常量池中的索引，即变量名或方法名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">descriptor_index&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">字段和方法的描述符在常量池的索引，描述字段类型或方法参数列表/返回类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">attibutes_count&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">属性表计数器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">attribute_info&lt;/td>
&lt;td style="text-align:center">attributes&lt;/td>
&lt;td style="text-align:center">attibutes_count&lt;/td>
&lt;td style="text-align:center">属性额外描述，比如描述变量初始化值在常量池中的索引&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>描述符描述方法的时候，先是参数列表，然后是返回值类型。而方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">int&lt;/span> test&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对应的描述符是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">(&lt;/span>I&lt;span style="color:#5bc4bf">)&lt;/span>Ljava&lt;span style="color:#5bc4bf">/&lt;/span>lang&lt;span style="color:#5bc4bf">/&lt;/span>String&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中L是表示对象类型。&lt;br>
此外，字段表集合不会列出从父类或接口中继承的字段，但可能会有代码中不存在的字段，比如内部类对外部类实例的引用之类。&lt;/p>
&lt;h3 id="方法表集合">方法表集合&lt;/h3>
&lt;p>方法表集合的入口同样也是一个u2类型的计数器，紧接着是各个具体的方法。方法表的结构与字段表基本一样，不列出来了。区别：&lt;/p>
&lt;ol>
&lt;li>首先是access_flags的取值范围不同，比如没有ACC_TRANSIENT、有ACC_SYNCHRONIZED等值；&lt;/li>
&lt;li>name_index表示方法名索引，descriptor_index表示方法描述符索引，跟字段表一样；&lt;/li>
&lt;li>而编译后的方法代码，放在属性表里面名为“Code”的属性中；&lt;/li>
&lt;li>没有Override的父类方法，不会出现在子类的方法表集合中；&lt;/li>
&lt;li>同样可能出现代码中原本没有的方法，比如&amp;lt;clinit&amp;gt;（类构造器）、&amp;lt;init&amp;gt;（实例对象构造器）。&lt;/li>
&lt;/ol>
&lt;p>两个方法名字相同，参数列表相同，返回值类型不同，是允许共存在一个Class文件中的，但Java语言不允许这样。&lt;/p>
&lt;h3 id="属性表集合">属性表集合&lt;/h3>
&lt;p>Class文件、字段表、方法表都可以有自己的属性表，Java7里面定义了21种属性。&lt;/p>
&lt;h4 id="code属性">Code属性&lt;/h4>
&lt;p>并非所有方法表都有Code属性，比如接口和抽象类的方法就没有。结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">类型&lt;/th>
&lt;th style="text-align:center">名称&lt;/th>
&lt;th style="text-align:center">数量&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">attribute_name_index&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">属性名的索引，对Code属性而言恒为&amp;quot;Code&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u4&lt;/td>
&lt;td style="text-align:center">attribute_length&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">属性值长度，相当于整个属性表长度长度减6(u2+u4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">max_stack&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">操作数栈深度最大值。JVM运行时根据此值分配栈桢的操作栈深度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">max_locals&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">局部变量表所需存储空间，单位是Slot，double和long占用2个Slot、其他基本类型1Slot，Slot空间可以重用(变量作用域问题)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u4&lt;/td>
&lt;td style="text-align:center">code_length&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">编译后的字节码长度，理论上最长2^32-1，实际上JVM规定一个方法不允许超过65535条字节码指令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u1&lt;/td>
&lt;td style="text-align:center">code&lt;/td>
&lt;td style="text-align:center">code_length&lt;/td>
&lt;td style="text-align:center">代码编译后的字节码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">exception_table_length&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">异常表长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">exception_info&lt;/td>
&lt;td style="text-align:center">exception_table&lt;/td>
&lt;td style="text-align:center">exception_table_length&lt;/td>
&lt;td style="text-align:center">异常表，记录字节码在start_pc到end_pc行之间如果出现类型为catch_type或其子类的异常则跳转到handler_pc行继续处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">u2&lt;/td>
&lt;td style="text-align:center">attibutes_count&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">属性表计数器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">attribute_info&lt;/td>
&lt;td style="text-align:center">attributes&lt;/td>
&lt;td style="text-align:center">attibutes_count&lt;/td>
&lt;td style="text-align:center">属性额外描述，比如描述变量初始化值在常量池中的索引&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>字节码值得注意的一个地方是，javac编译时将this关键字作为一个普通方法参数由JVM调用时自动传入。&lt;/p>
&lt;h4 id="exceptions属性">Exceptions属性&lt;/h4>
&lt;p>描述方法可能抛出的受检异常。&lt;/p>
&lt;h4 id="linenumbertable属性">LineNumberTable属性&lt;/h4>
&lt;p>描述Java远吗行号与字节码行号之间映射关系，也就是为什么抛异常的时候可以显示源码哪一行抛出的。&lt;/p>
&lt;h4 id="localvariabletable属性">LocalVariableTable属性&lt;/h4>
&lt;p>描述栈桢中局部变量表与Java源码中变量的关系，以保证编译后的代码被其他代码调用时，IDE可以显示参数名（否则被arg0、arg1之类的变量名代替）&lt;/p>
&lt;h4 id="sourcefile属性">SourceFile属性&lt;/h4>
&lt;p>描述生成当前Class文件的源文件名称，也是抛异常时可以显示源文件名字的原因。但内部类不会生成这个属性。&lt;/p>
&lt;h4 id="constantvalue属性">ConstantValue属性&lt;/h4>
&lt;p>static关键字修饰的变量可以使用这个属性。对于Sun javac编译器，final static的变量采用ConstantValue属性初始化，其他static变量在&amp;lt;clinit&amp;gt;（类构造器）中初始化。&lt;/p>
&lt;h4 id="innerclasses属性">InnerClasses属性&lt;/h4>
&lt;p>记录内部类和宿主类的关联。内部类和宿主类的Class文件都会有这个属性。&lt;/p>
&lt;h4 id="signature属性">Signature属性&lt;/h4>
&lt;p>记录泛型签名信息。Java的泛型是使用擦除式实现的伪泛型，编译后擦除泛型，这个属性为了弥补此缺陷，方便反射API可以拿到泛型类型。&lt;/p>
&lt;h2 id="字节码指令">字节码指令&lt;/h2>
&lt;p>字节码指令由一个字节的&lt;strong>操作码&lt;/strong>（代表具体操作）及跟随其后的0个或多个&lt;strong>操作数&lt;/strong>（操作所需的参数）组成。JVM大多数指令不含操作数只有操作码。&lt;br>
Class文件放弃了操作数对齐，因此省略很多填充和分割符，因此体积可以尽量小；缺点是损失一些解析字节码的性能。&lt;br>
JVM的指令大多数包含了操作的数据类型信息，但因为只有一个字节，也就是说最多只有256种指令，所以不是所有命令对所有数据类型都有独立的指令（非完全独立），同时提供一些指令将指令不支持类型的操作数转换为可支持的类型。&lt;br>
JVM的浮点数运算，舍入模式是最低有效位向下（0）取整。操作溢出时用有符号的无穷大表示（INF），如果操作结果没有明确数学意义则得到NaN（非数字，比如0/0，∞×0之类）&lt;/p></description></item><item><title>《深入理解Java虚拟机》 学习笔记(二)——垃圾回收</title><link>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Sun, 04 Jun 2017 13:57:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/2.png" alt="Featured image of post 《深入理解Java虚拟机》 学习笔记(二)——垃圾回收" />&lt;p>&lt;strong>JVM笔记系列索引&lt;/strong>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%80JVM%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/" >《深入理解Java虚拟机》 学习笔记(二)——垃圾回收&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%89%e7%b1%bb%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(三)——类文件结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e5%9b%9b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6%e4%b8%8eJVM%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%94.%e7%bb%88%e7%ab%a0Java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8/%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化&lt;/a>&lt;/p>
&lt;h2 id="判断对象可回收">判断对象可回收&lt;/h2>
&lt;p>有以下方法：&lt;/p>
&lt;h3 id="引用计数法">引用计数法&lt;/h3>
&lt;p>维护引用计数的Map，对象被引用时计数加1，引用失效时计数减1，简单粗暴。&lt;br>
实现简单，判断效率高。但主流JVM没有用这个方法的，因为无法解决循环引用的问题。&lt;/p>
&lt;h3 id="可达性分析算法">可达性分析算法&lt;/h3>
&lt;p>JVM主流实现时可达性分析。&lt;br>
通过一系列GC Root的对象作为起点，开始向下搜索，搜索经过的路径为引用链，当一个对象到GC Root没有任何引用链项链，则引用不可达，可以GC掉。&lt;br>
GC Root通常包括以下几种：&lt;/p>
&lt;ol>
&lt;li>虚拟机栈（栈帧中的本地变量表）中引用的对象；&lt;/li>
&lt;li>方法区中类静态属性引用的对象；&lt;/li>
&lt;li>方法区中常量引用的对象；&lt;/li>
&lt;li>本地方法栈中JNI（即一般说的Native方法）引用的对象；&lt;/li>
&lt;li>…………&lt;/li>
&lt;/ol>
&lt;h2 id="引用分类">引用分类&lt;/h2>
&lt;p>引用分为&lt;strong>强引用&lt;/strong>（平常用的引用，只要还存在有效，就不会被GC），&lt;strong>软引用&lt;/strong>（SoftReference类，将要发生内存溢出前GC回收），&lt;strong>弱引用&lt;/strong>（WeakReference类，生存到下一次GC，只被弱引用关联的对象会被回收！），&lt;strong>虚引用&lt;/strong>（PhantomReference类，不影响实例生存时间，无法取得实例，唯一作用是被GC时收到一个系统通知）。&lt;/p>
&lt;h2 id="finalize方法">finalize()方法&lt;/h2>
&lt;p>可达性分析中发现不可达的对象，会被标记，如果没有覆盖finalize()方法，或者其finalize()方法已经被JVM调用过，则不会执行finalize()方法。&lt;br>
否则需要执行finalize()方法，此对象放入F-Queue队列中，由JVM的低优先级Finalizer线程去执行。&lt;br>
稍后，GC会对F-Queue的对象进行第二次标记，如果对象在finalize()方法中拯救了自己（重新被引用），则将会被移出要回收的集合。&lt;br>
一般不覆盖finalize()方法，该方法设计之初是为了迎合C++语法的析构函数，应该用try-finally取代之。&lt;/p>
&lt;h2 id="方法区永生代的gc">方法区/永生代的GC&lt;/h2>
&lt;p>永生代也会进行GC，主要收集废弃的常量和无用的类。&lt;br>
其中无用的类的判定比较严格，要求：&lt;/p>
&lt;ol>
&lt;li>该类所有实例已被回收；&lt;/li>
&lt;li>加载该类的ClassLoader已被回收；&lt;/li>
&lt;li>该类的Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。&lt;/li>
&lt;/ol>
&lt;p>然而满足了以上条件的类，也不一定会被回收，仅仅是可以回收。&lt;/p>
&lt;h2 id="垃圾收集算法">垃圾收集算法&lt;/h2>
&lt;p>包括以下：&lt;/p>
&lt;h3 id="标记-清除算法mark-sweep">标记-清除算法(Mark-Sweep)&lt;/h3>
&lt;p>先标记出所有需要回收的对象，然后统一回收被标记需要回收的对象。&lt;br>
&lt;strong>缺点&lt;/strong>：标记和清除的效率都不高，且清除后产生大量不连续的内存碎片。&lt;/p>
&lt;h3 id="复制算法copying">复制算法(Copying)&lt;/h3>
&lt;p>内存划分成等大小的两块，只有一块在使用，GC时将存活对象复制到另一块区域中，清除另一半。&lt;br>
&lt;strong>缺点&lt;/strong>：有一半内存浪费，复制操作效率低，不适合老年代。&lt;br>
实际使用中并不是一半一半的内存分配，因为大部分对象生命周期很短，所以划分成一块很大的&lt;strong>Eden区&lt;/strong>和两块小的&lt;strong>Survivor区&lt;/strong>，一般默认8:1:1的比例。每次使用一块Eden和一块Survivor区，GC时讲Eden和Survivor中存活的对象复制到另一块Survivor区中。当Survivor区不够大时，使用&lt;strong>老年代&lt;/strong>进行&lt;strong>分配担保&lt;/strong>，存活对象放入老年代。&lt;/p>
&lt;h3 id="标记-整理算法mark-compact">标记-整理算法(Mark-Compact)&lt;/h3>
&lt;p>类似标记-清除算法，标记之后存活的对象向一端移动，最后清理掉边界以外的内存，保证内存的规整。&lt;/p>
&lt;h2 id="hotspot的算法实现">HotSpot的算法实现&lt;/h2>
&lt;p>以下是HotSpot中垃圾回收的几个关键点技术实现方法。&lt;/p>
&lt;h3 id="枚举gc-root">枚举GC Root&lt;/h3>
&lt;p>可达性分析要求在一个能保证一致性的快照中进行工作，即GC时必须停止所有线程，即Stop The World~~（JOJO里面Dio的世界 ザ・ワールド？）~~。&lt;br>
在HotSpot里面，通过一个叫OopMap的数据结构来维护哪些地方存放着对象引用，记录栈上本地变量与堆中对象的引用关系，方便枚举GC Root。&lt;/p>
&lt;h3 id="安全点">安全点&lt;/h3>
&lt;p>并不是所有指令都会生成/改变OopMap，这样效率太低。线程必须到达安全点（SafePoint）才会生成OopMap，然后开始GC。安全点的选定是以“有让程序长时间执行的特征”的原则进行的（如方法调用，循环跳转，异常跳转等）。&lt;br>
考虑多线程，必须所有线程都跑到安全点才能开始GC。方法有二：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>抢先式中断&lt;/strong>：GC时先中断所有线程，对于还没跑到安全点的线程，让其恢复并等它跑到安全点上再停。——商业JVM几乎没有这样实现的；&lt;/li>
&lt;li>&lt;strong>主动式中断&lt;/strong>：GC需要中断线程时，设置一个标志，各个线程执行时，跑到安全点的时候轮询这个标志，发现标志为真的时候自己中断挂起。&lt;/li>
&lt;/ol>
&lt;h3 id="安全区域">安全区域&lt;/h3>
&lt;p>线程执行的时候，可能很久都不会跑到安全点（比如执行了Thread.Sleep()的情况），导致GC不能马上执行。因此引入安全区域的概念（Safe Region），表示这段代码片段中引用关系不会发生变化。&lt;br>
线程执行到安全区域的时候，标识自己进入了安全区域；则发动GC的时候，可以忽略标识为安全区域的线程；而线程在离开安全区域的时候，需要检查是否已完成GC Root枚举（或者是整个GC过程），没完成的话要GC发出等待离开的信号。&lt;/p>
&lt;h2 id="实际的垃圾收集器">实际的垃圾收集器&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/2.png"
width="547"
height="374"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/2_huccc5a32b9972667086692466cd3686f0_65721_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/2_huccc5a32b9972667086692466cd3686f0_65721_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>
上图给出了HotSpot的7个垃圾收集器，中间有连线的标识可以搭配使用。&lt;/p>
&lt;h3 id="serial收集器">Serial收集器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/3.png"
width="512"
height="302"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/3_hu802ad8072fdb069c6bb8342d0d54f6b2_35081_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/3_hu802ad8072fdb069c6bb8342d0d54f6b2_35081_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>
收集时，暂停所有其他工作线程（Stop The World），开一个线程进行GC。对新生代采用复制算法，对老年代采取标记-整理算法。&lt;br>
JVM在client模式下默认新生代垃圾收集器还在用Serial。&lt;br>
优点：简单高效。&lt;br>
缺点：GC时的停顿时间长。&lt;/p>
&lt;h3 id="serial-old收集器">Serial Old收集器&lt;/h3>
&lt;p>Serial收集器的老年代版本，单线程，标记-整理算法。&lt;/p>
&lt;h3 id="parnew收集器">ParNew收集器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/4.png"
width="512"
height="296"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/4_hub1fff94d353711782a444916ee6aa317_39140_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/4_hub1fff94d353711782a444916ee6aa317_39140_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="415px"
>
Serial收集器的多线程版本，可以配合CMS收集器工作，不能配合Parallel Scavenge收集器工作。使用&lt;code>-XX+UseParNewGC&lt;/code>指定使用之。&lt;br>
澄清垃圾收集器的两个概念：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>并行Parallel&lt;/strong>：多条垃圾回收线程并行工作，用户线程在等待；&lt;/li>
&lt;li>&lt;strong>并发Concurrent&lt;/strong>：垃圾收集线程和用户线程同事执行（CMS）。&lt;/li>
&lt;/ol>
&lt;h3 id="parallel-scavenge收集器">Parallel Scavenge收集器&lt;/h3>
&lt;p>新生代收集器，多线程、复制算法，与ParNew收集器的区别在于，关注点在于吞吐量（Thoughput，=运行用户代码时间/(运行用户代码时间+GC时间)），适合在后台运算而不需要提案多交互的任务。&lt;br>
用&lt;code>-XX:MaxGCPauseMillis&lt;/code>参数指定保证GC消耗时间的最大值（毫秒），减少GC时间是以牺牲吞吐量及新生代空间来获取的。&lt;br>
用&lt;code>-XX:GCTimeRatio&lt;/code>参数指定GC占总时间的比例，0-100，默认99，即允许1/(1+99)=1%的GC时间。&lt;br>
使用&lt;code>-XX:UseAdaptiveSizePolicy&lt;/code>参数之后，JVM根据当前系统情况动态调整新生代大小、Eden与Survivor比例等参数以保证最佳的吞吐量和设定的最长GC时间。&lt;/p>
&lt;h3 id="parallel-old收集器">Parallel Old收集器&lt;/h3>
&lt;p>Parallel Scavenge收集器的老年代版本，多线程，标记-整理算法，JDK1.6开始提供。&lt;/p>
&lt;h3 id="cms收集器">CMS收集器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/5.png"
width="512"
height="254"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/5_hue412b55637f9a09397c4378c2dc2ec00_38212_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/5_hue412b55637f9a09397c4378c2dc2ec00_38212_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="483px"
>
老年代收集，设计目标是获取最短回收停顿时间，基于标记-清除算法设计，包括以下步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>初始标记&lt;/strong>：标记GC Root可以直接关联到的对象，速度很快，需要Stop The World；&lt;/li>
&lt;li>&lt;strong>并发标记&lt;/strong>：可达性分析枚举，耗时较长；&lt;/li>
&lt;li>&lt;strong>重新标记&lt;/strong>：修正并发标记期间因用户程序继续运行而导致的引用变动，需要Stop The World；&lt;/li>
&lt;li>&lt;strong>并发清除&lt;/strong>：耗时较长。&lt;/li>
&lt;/ol>
&lt;p>CMS收集器缺点：&lt;/p>
&lt;ol>
&lt;li>对CPU资源敏感，并发阶段总吞吐量降低，CPU数量少的时候对用户程序影响大；&lt;/li>
&lt;li>无法处理浮动垃圾（Floating Garbage），即并发清理阶段新产生的垃圾，要等到下一次GC；因此需要预留内存空间给用户线程使用，不能等内存快满才进行收集；当
CMS运行期间预留的内存不够，会出现“Concurrent Mode Failure”失败，JVM会临时启用Serial Old收集器重新进行老年代垃圾收集，导致停顿时间变长。可以通过&lt;code>-XX:CMSInitiatingOccupancyFraction&lt;/code>参数调整老年代内存占用比例触发GC的阈值。&lt;/li>
&lt;li>收集后产生内存碎片。&lt;/li>
&lt;/ol>
&lt;h3 id="g1收集器">G1收集器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/6.png"
width="789"
height="150"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/6_hu7afd55c2bc04e9e99a239ca7f26e06a6_30498_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/6_hu7afd55c2bc04e9e99a239ca7f26e06a6_30498_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="526"
data-flex-basis="1262px"
>
面向服务端，全称Garbage-First，停顿时间可控、可预测，不会产生内存碎片。&lt;br>
G1收集器将整个Java堆划分成多个大小相等的独立区域（Region），跟踪各个Region里面垃圾堆积的价值（根据回收所获得的空间大小及回收耗费时间的经验值），维护优先列表，每次收集的时候，根据允许的收集时间，优先回收价值更大的Region。&lt;br>
此外每个Region维护一个Remembered Set来避免全堆扫描，引用型数据进行写操作的时候，会产生中断写操作，检查引用的对象是否处于不同的Region，如果是，则记录到被引用对象所属的Remember Set中；那么在GC时，GC Root的枚举范围加入Remembered Set，保证不进行全堆扫描也不会有遗漏。&lt;br>
G1收集器的回收步骤包括：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>初始标记&lt;/strong>：与CMS一样；&lt;/li>
&lt;li>&lt;strong>并发标记&lt;/strong>：与CMS一样，包含Remembered Set；&lt;/li>
&lt;li>&lt;strong>最终标记&lt;/strong>：并发标记期间对象变化记录到Remembered Set Logs中，合并到Remembered Set；&lt;/li>
&lt;li>&lt;strong>筛选回收&lt;/strong>：先根据回收价值和回收成本进行排序，再根据用户期望GC停顿时间制定回收计划。&lt;/li>
&lt;/ol>
&lt;h2 id="内存分配回收策略">内存分配、回收策略&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>优先在Eden分配&lt;/strong>：大多数情况下，对象在新生代Eden区分配，当Eden区空间不够时，发起Minor GC；&lt;/li>
&lt;li>&lt;strong>大对象直接进入老年代&lt;/strong>：提供&lt;code>-XX:PretenureSizeThreshold&lt;/code>参数，大于此值的对象直接在老年代分配，避免在Eden区和Survivor区之间大量内存复制；&lt;/li>
&lt;li>&lt;strong>长期存活的对象进入老年代&lt;/strong>：JVM为对象定义年龄计数器，经过Minor GC依然存活且被Survivor区容纳的，移动到Survivor区，年龄加1，每经历一次Minor GC不被清理则年龄加1，增加到一定年龄则移动到老年区（默认15岁，通过&lt;code>-XX:MaxTenuringThreshold&lt;/code>设置）；&lt;/li>
&lt;li>&lt;strong>动态对象年龄判定&lt;/strong>：若Survivor区中同年龄所有对象大小总和大于Survivor空间一半，则年龄大于等于该年龄的对象可以直接进入老年代；&lt;/li>
&lt;li>&lt;strong>空间分配担保&lt;/strong>：Minor GC之前，JVM检查老年代最大可用连续空间大于新生代所有对象总空间，成立的话Minor GC确认是安全的；否则检查老年代最大可用连续空间大于历次晋升到老年代对象的平均大小，大于的话进行Minor GC；小于的话进行Full GC。&lt;/li>
&lt;/ol></description></item><item><title>《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构</title><link>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</link><pubDate>Sat, 27 May 2017 21:31:01 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/java.png" alt="Featured image of post 《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构" />&lt;p>最近一个月把经典Java书籍《深入理解Java虚拟机》读了一遍，受益匪浅，接下来几篇博客里将会总结一些学习笔记，或许会跟很多现有的博文重复，但主要是为了自己总结一下。&lt;br>
&lt;strong>JVM笔记系列索引&lt;/strong>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%80JVM%e5%86%85%e5%ad%98%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(一)——JVM内存结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%8c%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/" >《深入理解Java虚拟机》 学习笔记(二)——垃圾回收&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%b8%89%e7%b1%bb%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84/" >《深入理解Java虚拟机》 学习笔记(三)——类文件结构&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e5%9b%9b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e6%9c%ba%e5%88%b6%e4%b8%8eJVM%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(四)——类加载机制与JVM优化&lt;/a>&lt;br>
&lt;a class="link" href="https://leibnizhu.github.io/p/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3Java%e8%99%9a%e6%8b%9f%e6%9c%ba-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e4%ba%94.%e7%bb%88%e7%ab%a0Java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8/%e4%bc%98%e5%8c%96/" >《深入理解Java虚拟机》 学习笔记(五.终章)——Java内存模型与线程安全/优化&lt;/a>&lt;/p>
&lt;h2 id="jvm内存结构">JVM内存结构&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/1.png"
width="698"
height="334"
srcset="https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/1_hu6033c8087bc94d9bfc87edb69e8b52d6_73796_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/1_hu6033c8087bc94d9bfc87edb69e8b52d6_73796_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="501px"
>
JVM内存结构不光是只有堆内存和栈内存，实际情况要复杂很多，主要包含以下结构。&lt;/p>
&lt;h3 id="程序计数器">程序计数器&lt;/h3>
&lt;p>每个线程都有独立的程序计数器，各线程的互不影响，用于存储正在执行的虚拟机指令地址（对于Native方法则为空undefined）.&lt;/p>
&lt;h3 id="jvm栈">JVM栈&lt;/h3>
&lt;p>JVM栈是线程私有的，每个方法执行的时候都会建立栈帧，栈帧包含以下内容：&lt;/p>
&lt;ol>
&lt;li>局部变量表：存放编译期可知的基本数据类型数据、对象引用和returnAddress，亦即运行期不会改变局部变量表大小;&lt;/li>
&lt;li>操作数栈；&lt;/li>
&lt;li>动态链接；&lt;/li>
&lt;li>方法出口，等等。&lt;/li>
&lt;/ol>
&lt;p>该区域可能抛出以下异常：&lt;/p>
&lt;ol>
&lt;li>当线程请求的栈深度超过最大值，会抛出StackOverflowError异常；&lt;/li>
&lt;li>JVM栈动态扩展时无法申请导足够内存，抛出OutOfMemoryError异常。&lt;/li>
&lt;/ol>
&lt;h3 id="本地方法栈">本地方法栈&lt;/h3>
&lt;p>类似JVM栈，区别只在于本地方法栈用于执行本地(Native)方法。&lt;/p>
&lt;h3 id="java堆">Java堆&lt;/h3>
&lt;p>所有线程共享的内存区域，用于存放对象实例（但现在不一定全部对象都在堆里了，栈上分配/标量替换等技术）。在GC的概念中还可以分为Eden区、FromSurvivor区及ToSurvivor区。也可能会划分出线程私有的分配缓冲区TLAB。&lt;/p>
&lt;h3 id="方法区">方法区&lt;/h3>
&lt;p>线程共享，用于存放已加载的类、常量、静态变量、JIT编译后的代码等数据。&lt;br>
对于HotSpot虚拟机用户而言，经常将方法区称为永生代（Permanent Generation），是因为HotSpot虚拟机用永生代实现方法区，用GC管理方法区&lt;/p>
&lt;h4 id="运行时常量池">运行时常量池&lt;/h4>
&lt;p>运行时常量池是方法区的一部分，类文件被加载后，常量部分就会被放到运行时常量池里。运行期期间也可以将新的常量放入常量池，比如String.intern()方法。&lt;/p>
&lt;h3 id="直接内存">直接内存&lt;/h3>
&lt;p>NIO里面引入直接内存的API，可以使用本地方法分配堆外内存，在某些情况下可以提高IO性能。&lt;/p>
&lt;h2 id="创建对象过程">创建对象过程&lt;/h2>
&lt;ol>
&lt;li>遇到new关键字的时候，检查对应类是否能在常量池定位到类的符号引用，并检查是否已加载、解析、初始化。没有的话线加载类；&lt;/li>
&lt;li>分配内存。加载类之后一个对象所需的内存大小就确定了；使用Serial、ParNew等收集器时，堆内存是整齐的，使用&lt;strong>指针碰撞&lt;/strong>划分内存，即在空闲内存的分界点开始分配指定大小的内存空间；如果用CMS等给予Mark-Sweep算法的收集器时，使用&lt;strong>空闲列表&lt;/strong>划分内存，即JVM维护了一个记录可用内存的表，从改变中找一块足够大小的内存空间用于分配。&lt;/li>
&lt;li>考虑到多线程同时创建对象的情况，会使用到前面说的TLAB，每个线程在自己的TLAB上分配内存，TLAB用完并重新分配新TLAB的时候才需要同步锁定。&lt;/li>
&lt;li>申请内存后，进行初始化零值（可以在TLAB分配时进行）；&lt;/li>
&lt;li>设置对象的对象头（Object Header）；&lt;/li>
&lt;li>执行&amp;lt;init&amp;gt;方法。&lt;/li>
&lt;/ol></description></item><item><title>调整VirtualBox CentOS虚拟机磁盘大小</title><link>https://leibnizhu.github.io/p/%E8%B0%83%E6%95%B4VirtualBox-CentOS%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E5%A4%A7%E5%B0%8F/</link><pubDate>Wed, 10 May 2017 12:54:24 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E8%B0%83%E6%95%B4VirtualBox-CentOS%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E5%A4%A7%E5%B0%8F/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E8%B0%83%E6%95%B4VirtualBox-CentOS%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E5%A4%A7%E5%B0%8F/vbox.png" alt="Featured image of post 调整VirtualBox CentOS虚拟机磁盘大小" />&lt;h2 id="背景">背景&lt;/h2>
&lt;p>昨天发现本地HDP集群的HBase连不上了，解决了这个问题后，又发现HBase同步脚本一直执行失败，进YARN看了下，几天前开始堆积了很多ACCEPT了的任务，但没一个在执行，先用&lt;code>hadoop job kill &lt;/code>干掉了旧的任务，重新执行脚本，还是不行，日志上面却没报错。&lt;br>
于是进Ambari一看，HDFS的DataNode全都满了……看来要扩容了。&lt;br>
集群是部署在几台VirtualBox的CentOS虚拟机上的（起始我一直想转移到Docker上，但一直没时间+懒）。网上关于VirtualBox虚拟机磁盘扩容的文章很多，试了下，很多是行不通的，而且不太完整，于是把今天的经验记下来吧。&lt;/p>
&lt;h2 id="具体步骤">具体步骤&lt;/h2>
&lt;h3 id="磁盘映像扩容">磁盘映像扩容&lt;/h3>
&lt;p>下面的命令以名为CentOS05的虚拟机为例进行。&lt;br>
关闭虚拟机。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vboxmanage controlvm CentOS05 poweroff
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为原来的磁盘是vmdk的不能直接扩展容量，需要先转换成vdi(这个步骤相当缓慢，视乎电脑配置和原磁盘映像大小，请耐心等待)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /path/to/虚拟机vmdk磁盘映像存储位置
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vboxmanage clonehd CentOS05-disk1.vmdk CentOS05-disk1.vdi --format VDI
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再扩容，注意默认单位是MB：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vboxmanage modifyhd CentOS05-disk1.vdi --resize &lt;span style="color:#f99b15">122880&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改虚拟机挂载磁盘">修改虚拟机挂载磁盘&lt;/h3>
&lt;p>查看虚拟机原来配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>VBoxManage showvminfo CentOS05
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意类似以下的信息，包括名称（IDE），端口号，设备ID（如IDE(1,0)的端口号是1，设备号0），下面要用到：&lt;/p>
&lt;blockquote>
&lt;p>Storage Controller Name (0): IDE
Storage Controller Type (0): PIIX4
Storage Controller Instance Number (0): 0
Storage Controller Max Port Count (0): 2
Storage Controller Port Count (0): 2
Storage Controller Bootable (0): on
IDE (0, 0): /home/turing/VirtualBox VMs/CentOS03/CentOS03-disk1.vdmk (UUID: 2e2d32dc-e66b-42c2-8c9c-4cbb7abb6182)
IDE (1, 0): Empty&lt;/p>
&lt;/blockquote>
&lt;p>修改虚拟机挂载的磁盘：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>VBoxManage storageattach CentOS05 --storagectl &lt;span style="color:#48b685">&amp;#39;IDE&amp;#39;&lt;/span> --port &lt;span style="color:#f99b15">0&lt;/span> --device &lt;span style="color:#f99b15">0&lt;/span> --type hdd --medium CentOS05-disk1.vdi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数说明：&lt;/p>
&lt;blockquote>
&lt;p>storagectl：存储控制器的名称。必须。
port：介质将被连接／断开／修改的端口号。必须。
device：介质将被连接／断开／修改的设备号。必须。
type：定义 介质将被连接／断开／修改的驱动器类型。
medium：允许指定DVD／软盘驱动器是完全断开的（none）或仅是需要被连接的空的DVD／软盘驱动器（emptydrive）。如果指定了uuid，filename或host:&lt;drive>，将连接到存储控制器的指定端口和设备号。&lt;/p>
&lt;/blockquote>
&lt;p>再次查看配置确认修改成功：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>VBoxManage showvminfo CentOS05
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改centos分区配置">修改CentOS分区配置&lt;/h3>
&lt;p>因为在系统启动后根目录的卸载之类的动作旧就不能执行了，所以只能在LiveCD里面改，建议使用gparted图形化工具修改分区大小，比较简单，此处不表。&lt;br>
修改好启动虚拟机：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vboxmanage startvm CentOS05 --type headless
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ssh CentOS05
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看分区情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>fdisk -l /dev/sda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Disk /dev/sda: 128.8 GB, 128849018880 bytes
255 heads, 63 sectors/track, 15665 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x000636d5
Device Boot Start End Blocks Id System
/dev/sda1 * 1 64 512000 83 Linux
Partition 1 does not end on cylinder boundary.
/dev/sda2 64 15666 125316096 8e Linux LVM&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>df -h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Filesystem Size Used Avail Use% Mounted on
/dev/mapper/vg_centos03-lv_root
50G 44G 3.1G 94% /
tmpfs 1.9G 0 1.9G 0% /dev/shm
/dev/sda1 477M 30M 422M 7% /boot
/dev/mapper/vg_centos03-lv_home
6.4G 82M 6.0G 2% /home&lt;/p>
&lt;/blockquote>
&lt;p>发现fdisk正确识别分区容量，但df还是旧容量。仔细观察df的输出，原来LVM管理的，需要执行修改逻辑卷的命令。先看情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pvdisplay -v -m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Using physical volume(s) on command line.
Wiping cache of LVM-capable devices
Finding all volume groups.
&amp;mdash; Physical volume &amp;mdash;
PV Name /dev/sda2
VG Name vg_centos03
PV Size 119.51 GiB / not usable 2.00 MiB
Allocatable yes
PE Size 4.00 MiB
Total PE 30594
Free PE 15360
Allocated PE 15234
PV UUID Eq5aod-THPs-vdcM-T40A-fCQW-dqQ1-NERrdH
&amp;mdash; Physical Segments &amp;mdash;
Physical extent 0 to 12799:
Logical volume /dev/vg_centos03/lv_root
Logical extents 0 to 12799
Physical extent 12800 to 14477:
Logical volume /dev/vg_centos03/lv_home
Logical extents 0 to 1677
Physical extent 14478 to 15233:
Logical volume /dev/vg_centos03/lv_swap
Logical extents 0 to 755
Physical extent 15234 to 30593:
FREE&lt;/p>
&lt;/blockquote>
&lt;p>结合&lt;code>df -h&lt;/code>的输出，可知我们要改的是就是vg_centos03/lv_root逻辑卷，修改容量为110G：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>lvresize -L 110G -r vg_centos05/lv_root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再次查看容量发现OK。&lt;br>
进入Ambari，重启服务，也看到空间警告消除了。&lt;/p></description></item><item><title>About</title><link>https://leibnizhu.github.io/About/</link><pubDate>Thu, 27 Apr 2017 11:47:21 +0800</pubDate><guid>https://leibnizhu.github.io/About/</guid><description>&lt;h2 id="关于我">关于我&lt;/h2>
&lt;p>Leibniz，这个名字的出典，无需多解释。&lt;br>
学过通信和电子，干过射频和EMC，现在是码畜——我到底经历了什么……&lt;br>
主力语言：&lt;/p>
&lt;blockquote>
&lt;p>Java，Scala，粤语&lt;/p>
&lt;/blockquote>
&lt;p>这些也干：&lt;/p>
&lt;blockquote>
&lt;p>js，测试，运维，布网，水电装修，手机维修&lt;/p>
&lt;/blockquote>
&lt;p>玩过：&lt;/p>
&lt;blockquote>
&lt;p>HiFi，摄影，户外徒步，山地车（林道/AM），小攀，单片机，FPGA，路由
以上现在都不玩了&lt;/p>
&lt;/blockquote>
&lt;p>现在还在玩的：&lt;/p>
&lt;blockquote>
&lt;p>跑步，折叠车（通勤）&lt;/p>
&lt;/blockquote>
&lt;p>跑步记录可见： &lt;a class="link" href="https://leibnizhu.github.io/running" target="_blank" rel="noopener"
>Leibniz&amp;rsquo;s Workouts Map&lt;/a>&lt;/p>
&lt;h2 id="脚印">脚印&lt;/h2>
&lt;p>&lt;strong>Email&lt;/strong>：(&lt;a class="link" href="mailto:leibnizhu@gmail.com" >leibnizhu@gmail.com&lt;/a>)&lt;br>
&lt;strong>博客&lt;/strong>：&lt;a class="link" href="leibnizhu.github.io" >Heaven&amp;rsquo;s Door&lt;/a>&lt;br>
&lt;strong>出没于&lt;/strong>：广州&lt;br>
&lt;strong>GitHub&lt;/strong>：&lt;a class="link" href="https://github.com/Leibnizhu" target="_blank" rel="noopener"
>Leibnizhu·Github&lt;/a>&lt;br>
&lt;strong>GitLab&lt;/strong>：基本只放私有项目&lt;/p></description></item><item><title>Spark快速统计树状关系各层数量的一种算法</title><link>https://leibnizhu.github.io/p/Spark%E5%BF%AB%E9%80%9F%E7%BB%9F%E8%AE%A1%E6%A0%91%E7%8A%B6%E5%85%B3%E7%B3%BB%E5%90%84%E5%B1%82%E6%95%B0%E9%87%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/</link><pubDate>Wed, 26 Apr 2017 15:29:19 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spark%E5%BF%AB%E9%80%9F%E7%BB%9F%E8%AE%A1%E6%A0%91%E7%8A%B6%E5%85%B3%E7%B3%BB%E5%90%84%E5%B1%82%E6%95%B0%E9%87%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/</guid><description>&lt;h2 id="需求">需求&lt;/h2>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Spark%E5%BF%AB%E9%80%9F%E7%BB%9F%E8%AE%A1%E6%A0%91%E7%8A%B6%E5%85%B3%E7%B3%BB%E5%90%84%E5%B1%82%E6%95%B0%E9%87%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/1.png"
width="132"
height="253"
srcset="https://leibnizhu.github.io/p/Spark%E5%BF%AB%E9%80%9F%E7%BB%9F%E8%AE%A1%E6%A0%91%E7%8A%B6%E5%85%B3%E7%B3%BB%E5%90%84%E5%B1%82%E6%95%B0%E9%87%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/1_hubd9923802d0015358925e3115284715b_2858_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spark%E5%BF%AB%E9%80%9F%E7%BB%9F%E8%AE%A1%E6%A0%91%E7%8A%B6%E5%85%B3%E7%B3%BB%E5%90%84%E5%B1%82%E6%95%B0%E9%87%8F%E7%9A%84%E4%B8%80%E7%A7%8D%E7%AE%97%E6%B3%95/1_hubd9923802d0015358925e3115284715b_2858_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="125px"
>&lt;br>
对于类似上图所示的树状结构数据，统计每个节点的总子孙数、每个节点在各层的子孙数。&lt;br>
比如B的总子孙数就是7（D/E/F/G/H/I/J），F的一级子孙数为2（G/H），F的二级和三级子孙数都为1（分别对应I和J）。&lt;br>
注：此处用字母代替节点ID，是为了与级别区分，方便描述和理解，实际的节点ID并非如此。&lt;/p>
&lt;h3 id="数据结构">数据结构&lt;/h3>
&lt;p>树状关系在采集初期，是通过Netty搭建的微服务保存在HBase中，再通过Spark定期计算，保存到关系型数据库MySQL中。在MySQL中的表结构及保存的数据如下（经过精简，只保留与本文相关的字段）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">ID&lt;/th>
&lt;th style="text-align:center">父节点ID&lt;/th>
&lt;th style="text-align:center">父链&lt;/th>
&lt;th style="text-align:center">等级&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">null&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">-A-&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">-A-&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">-A-B-&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">-A-B-&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">F&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">-A-B-&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">G&lt;/td>
&lt;td style="text-align:center">F&lt;/td>
&lt;td style="text-align:center">-A-B-F-&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">H&lt;/td>
&lt;td style="text-align:center">F&lt;/td>
&lt;td style="text-align:center">-A-B-F-&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">I&lt;/td>
&lt;td style="text-align:center">G&lt;/td>
&lt;td style="text-align:center">-A-B-F-G-&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">J&lt;/td>
&lt;td style="text-align:center">I&lt;/td>
&lt;td style="text-align:center">-A-B-F-G-I-&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>ID、父节点ID、等级这几个字段比较好理解，父链稍加思考也可以看出来是从根节点一直到当前节点的链，以减号分割，父链字段前后都有减号，方便like查询的精准性。&lt;/p>
&lt;h3 id="难点">难点&lt;/h3>
&lt;p>可以看出来，单纯计算我们需要的指标并不困难，比如总子孙数，根据父链中包含当前节点这个条件去查询、再count就能拿到；而各级子孙数也是，父链条件结合等级的条件就能查出来。&lt;br>
但这些查询都需要遍历整个树，而每个节点会产生一次查询，相当于复杂度是O(N^2)；而且每次需要查询MySQL，计算速度被IO开销限制，Spark批量计算的优势丝毫无存，可以预见计算是相当缓慢的。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>父链这个字段是为了将数据保存到MySQL，方便数据分析员进行查询而作出的妥协，而我们可以从父链下手，减少计算时间复杂度。&lt;/p>
&lt;h4 id="总子孙数">总子孙数&lt;/h4>
&lt;p>上面的分析已经提到，总子孙数，根据父链中包含当前节点这个条件去查询、再count就能拿到，而考虑到树中没有环路，也就是说一个节点在树中只出现一次，那么在父链中也只会出现一次；也就是说，在整棵树里，一个节点的ID在所有父链中出现多少次（每次对应一个子节点的父链），就有多少个子孙节点。&lt;br>
在SQL中查询父链包含某节点ID用的是like操作，查询速度很慢，我们在Spark中可以进行优化：&lt;/p>
&lt;ol>
&lt;li>每个节点的父链依据减号进行split，一个节点对应多个父祖节点（父链上所有节点）；&lt;/li>
&lt;li>所有节点父链split的结果进行Word-Count，一个节点ID在父链split结果中出现多少次，意味着它有多少个总子孙数。&lt;/li>
&lt;/ol>
&lt;p>以开始的图为例，所有父链拆分后拿到的结果是：&lt;code>(A,A,A,B,A,B,A,B,A,B,F,A,B,F,A,B,F,G,A,B,F,G,I)&lt;/code>，进行Word-Count的结果（Spark中可以直接用countByValue方法）是&lt;code>((A,9),(B,7),(F,4),(G,2),(I,1))&lt;/code>。这里已经出来每个节点的总子孙数了，结果中不存在的节点就是总子孙数为0。&lt;/p>
&lt;h4 id="各层子孙数">各层子孙数&lt;/h4>
&lt;p>从总子孙数的计算中进行扩展就可以计算各层的子孙数了。&lt;/p>
&lt;ol>
&lt;li>在父链split的时候加上当前节点的等级构成RDD，以节点D为例，D的父链为-A-B-，级别为3，split后就是&lt;code>(A,3),(B,3)&lt;/code>;&lt;/li>
&lt;li>当计算N级子孙数的时候，构造一个(节点ID，节点等级+N)的RDD；&lt;/li>
&lt;li>两个RDD在join之后（以节点ID为key），过滤出两个RDD的value（对应父链中节点所在等级，和需要计算的等级）相等的数据；&lt;/li>
&lt;li>过滤后map掉无用信息，再count就是所要求的等级上的子孙数。&lt;/li>
&lt;/ol>
&lt;p>以开始的图为例，计算2级子孙数，所有父链拆分后拿到的结果是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>(A,2),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,2),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,3),(B,3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,3),(B,3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,3),(B,3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,4),(B,4),(F,4),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,4),(B,4),(F,4),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,5),(B,5),(F,5),(G,5),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(A,6),(B,6),(F,6),(G,6),(I,6)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>构造(节点ID，节点等级+2)的RDD：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>(A,3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(B,4),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(C,4),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(D,5),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(E,5),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(F,5),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(G,6),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(H,6),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(I,7),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(J,8)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>两个RDD在join之后（join的结果太多，不列出了），过滤出两边等级相等的数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>(A,3,3),(A,3,3),(A,3,3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(B,4,4),(B,4,4),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(F,5,5),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(G,6,6)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>map掉无用的等级，再count得到：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>(A,3),(B,2),(F,1),(G,1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即只有这些节点有二级子孙，二级子孙个数也拿到了。&lt;/p>
&lt;h3 id="spark代码scala">Spark代码(scala)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//全部MySQL数据读到RDD中，格式为(用户ID,(*,*,*,*,等级,父节点ID,父链,*))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> rsRDD &lt;span style="color:#815ba4">=&lt;/span> sc&lt;span style="color:#5bc4bf">.&lt;/span>makeRDD&lt;span style="color:#5bc4bf">(&lt;/span>readAllMySQLData&lt;span style="color:#5bc4bf">()).&lt;/span>cache&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//统计总子孙数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> totalList &lt;span style="color:#815ba4">=&lt;/span> rsRDD&lt;span style="color:#5bc4bf">.&lt;/span>flatMap&lt;span style="color:#5bc4bf">(&lt;/span>r &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> r&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_7&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;-&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)).&lt;/span>filter&lt;span style="color:#5bc4bf">(&lt;/span>p &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> p &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> p &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>countByValue&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//统计二级子孙数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//切分父链
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> secondList &lt;span style="color:#815ba4">=&lt;/span> rsRDD&lt;span style="color:#5bc4bf">.&lt;/span>flatMap&lt;span style="color:#5bc4bf">(&lt;/span>r &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> values &lt;span style="color:#815ba4">=&lt;/span> r&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_7&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;-&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values&lt;span style="color:#5bc4bf">.&lt;/span>filter&lt;span style="color:#5bc4bf">(&lt;/span>p &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> p&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>length &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>userid &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>parseInt&lt;span style="color:#5bc4bf">(&lt;/span>userid&lt;span style="color:#5bc4bf">),&lt;/span> r&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_5&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//构造(节点ID，节点等级+2)的RDD
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> secondUser &lt;span style="color:#815ba4">=&lt;/span> rsRDD&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>p &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>p&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_5 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//join之后，过滤出两边等级相等的数据，map掉无用信息，再count
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> secondShare &lt;span style="color:#815ba4">=&lt;/span> secondUser&lt;span style="color:#5bc4bf">.&lt;/span>join&lt;span style="color:#5bc4bf">(&lt;/span>secondList&lt;span style="color:#5bc4bf">).&lt;/span>filter&lt;span style="color:#5bc4bf">(&lt;/span>p &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_1 &lt;span style="color:#5bc4bf">==&lt;/span> p&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">).&lt;/span>countByValue&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docker中Gitlab的持续集成安装与配置</title><link>https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Apr 2017 15:02:26 +0800</pubDate><guid>https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/docker-gitlab.png" alt="Featured image of post Docker中Gitlab的持续集成安装与配置" />&lt;h2 id="安装gitlab-ci-runner">安装Gitlab-CI-Runner&lt;/h2>
&lt;h3 id="下载">下载&lt;/h3>
&lt;p>根据&lt;a class="link" href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener"
>官方的说法&lt;/a>，Gitlab-CI-Runner9.0以后的版本需要GitLab9.0以上版本支持，我们目前部署的GitLab是8.x，所以需要下载旧版。&lt;br>
最新版：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>旧版（如v1.11.0）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v1.11.0/binaries/gitlab-ci-multi-runner-linux-amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置">安装配置&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo chmod +x /usr/local/bin/gitlab-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo useradd --comment &lt;span style="color:#48b685">&amp;#39;GitLab Runner&amp;#39;&lt;/span> --create-home gitlab-runner --shell /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gitlab-runner register
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面最后一句命令的时候，会要求输入网址和秘钥，此时打开Gitlab页面，进项目，右上角配置按钮-Runners，再按此时页面上给出的来填。&lt;br>
还会要求输入名称和标签之类的信息，到最后会提示输入运行环境之类，我们Gitlab是在docker上，但Runner和Gitlab在同一个docker容器中的，就是在Gitlab调用的角度上来看，Runner并不是在docker中，所以运行环境那里选shell就行。&lt;/p>
&lt;h3 id="运行">运行&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo gitlab-runner install --user&lt;span style="color:#5bc4bf">=&lt;/span>gitlab-runner --working-directory&lt;span style="color:#5bc4bf">=&lt;/span>/home/gitlab-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gitlab-runner start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置项目的ci脚本">配置项目的CI脚本&lt;/h2>
&lt;p>在项目根目录创建文件.gitlab-ci.yml，写入CI执行的脚本，具体参考&lt;a class="link" href="http://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;br>
此处以最简单的maven打包部署tomcat为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">stage&lt;/span>: &lt;span style="color:#f99b15">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">only&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">mvn clean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">mvn package&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">cp target/FissionSales.war /var/opt/gitlab/webapps/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处限定了dev分支的提交才会触发CI任务，打包后复制到指定文件夹里。&lt;br>
此外，我们将打包成功的war包复制到&lt;code>/var/opt/gitlab/webapps/&lt;/code>中，这样做是因为，Gitlab在docker中，而Tomcat在宿主机里，因为权限方面的问题，我只好让Gitlab的CI任务将war包放在docker的volume（已经配置了&lt;code>/var/opt/gitlab/&lt;/code>的volume）中，然后在宿主机中通过定时任务，检查war包的版本，检查到新版本时复制到宿主机的Tomcat中进行部署，具体的检查脚本如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#ef6155">a&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>sudo stat -c %Y /var/lib/docker/volumes/gitlab-data/_data/webapps/***.war&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">b&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>date +%s&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">b&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>$&lt;span style="color:#5bc4bf">[&lt;/span>b-a&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ef6155">$b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> &lt;span style="color:#ef6155">$b&lt;/span> -le &lt;span style="color:#f99b15">60&lt;/span> &lt;span style="color:#5bc4bf">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo cp /var/lib/docker/volumes/gitlab-data/_data/webapps/***.war /enviroment/apache-tomcat-8.0.33/webapps/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;No new war package...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个脚本通过crontab定时每分钟执行，所以检查war包的修改时间与当前时间相差小于60秒就会复制war包到tomcat的webapps中。&lt;/p>
&lt;h2 id="配置pipeline邮件通知">配置Pipeline邮件通知&lt;/h2>
&lt;p>Gitlab默认CI Pipeline任务成功失败都会发邮件通知，这样或许会困扰到大家，所以修改Gitlab的源码，只让部署不成功的时候才发邮件通知。&lt;br>
进入docker，编辑&lt;code>/opt/gitlab/embedded/service/gitlab-rails/app/services/notification_service.rb&lt;/code>，在&lt;code>pipeline_finished&lt;/code>方法的开头添加&lt;code>return if pipeline.status == &amp;quot;success&amp;quot; &lt;/code>，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">pipeline_finished&lt;/span>(pipeline, recipients &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> pipeline&lt;span style="color:#5bc4bf">.&lt;/span>status &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#34;success&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email_template &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;pipeline_&lt;/span>&lt;span style="color:#f99b15">#{&lt;/span>pipeline&lt;span style="color:#5bc4bf">.&lt;/span>status&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">_email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………………………&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>HBase外网同步脚本</title><link>https://leibnizhu.github.io/p/HBase%E5%A4%96%E7%BD%91%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC/</link><pubDate>Sat, 22 Apr 2017 19:34:10 +0800</pubDate><guid>https://leibnizhu.github.io/p/HBase%E5%A4%96%E7%BD%91%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;p>我们用多台云服务器搭建了HDP的hadoop集群，为了方便测试，在本地用virtualbox虚拟机搭建了一个架构完全一样的集群。为了测试程序，训练模型，本地的集群的数据也需要与云服务器上集群的一样。&lt;br>
MySQL数据库可以通过主从备份实时同步，而HBase数据在配置同步的过程中就遇到了问题，常规的方法无法完成同步。&lt;/p>
&lt;h2 id="常规方法">常规方法&lt;/h2>
&lt;p>HBase可以设置备份，然而只能在同一个内网，而我们不想搭建vpn。&lt;br>
然后是借助sqoop之类的工具，我们尝试对zookeeper等相关使用的端口开启内网映射，然而还是无法从外网访问，检查了iptables，没发现问题，原因未知。&lt;/p>
&lt;h2 id="最终方案">最终方案&lt;/h2>
&lt;p>最后采用了最暴力的方案，就是使用HBase自带的export和import功能，把云端HBase整个表导出到文件再导入到本地集群HBase，缺点是慢，因为是通过mapReduce操作完成的，数据量大的时候尤其慢。而且不知为何，无法直接导出到本地文件系统，只能通过HDFS文件系统中转，也就是说，整个同步流程是：&lt;/p>
&lt;ol>
&lt;li>云端HBase数据库表export到云端HDFS&lt;/li>
&lt;li>云端HDFS的导出文件导出到云端Linux文件系统&lt;/li>
&lt;li>本地集群通过scp下载云端的导出文件（因为安全问题，这里还分了两部，先scp下载到我的电脑，再scp上传到本地集群）&lt;/li>
&lt;li>本地集群HDFS导入下载到的备份文件&lt;/li>
&lt;li>本地集群HBase数据库import备份文件&lt;/li>
&lt;/ol>
&lt;p>整个过程比较麻烦，所以我写了个脚本，通过crontab每15分钟定时执行，脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssh 服务器名 &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#f99b15">1&lt;/span> &lt;span style="color:#48b685">&amp;lt;&amp;lt; eeooff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> set HADOOP_USER_NAME=hdfs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> rm -rf /root/share
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> hadoop fs -rm -r -f -skipTrash /backup/表名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> whoami
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> /usr/hdp/current/hbase-client/bin/hbase org.apache.hadoop.hbase.mapreduce.Driver export &amp;#39;表名&amp;#39; /backup/表名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> hadoop fs -get /backup/表名 ~/bakcup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> exit
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> eeooff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rm -rf /home/***/tmp/backup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scp -r 服务器名:/root/backup/ /home/***/tmp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scp -r /home/***/tmp/backup 本地集群主机名:/home/hdfs/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssh 本地集群主机名 &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#f99b15">1&lt;/span> &lt;span style="color:#48b685">&amp;lt;&amp;lt; eeooff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> set HADOOP_USER_NAME=hdfs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> su - hdfs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> hadoop fs -rm -r -f -skipTrash /backup/表名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> hadoop fs -put /home/hdfs/backup /test
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> /usr/hdp/current/hbase-client/bin/hbase org.apache.hadoop.hbase.mapreduce.Driver import &amp;#39;SHARE_CHAIN&amp;#39; /backup/表名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> eeooff&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala实现64位的MurmurHash函数</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%8E%B064%E4%BD%8D%E7%9A%84MurmurHash%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 19 Jan 2017 11:20:52 +0800</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%8E%B064%E4%BD%8D%E7%9A%84MurmurHash%E5%87%BD%E6%95%B0/</guid><description>&lt;h2 id="简介">简介&lt;/h2>
&lt;p>最近使用Spark的GraphX进行一些图计算，GraphX要求每个节点都有唯一的ID；但我们的数据并没有包含唯一的ID，所以需要使用Hash函数将每条数据的信息进行摘要生成唯一ID。&lt;br>
Hash中，String自己的hashCode()自然是很烂的(字符串每个字符乘以质数再与之前hash相加，如此迭代)，MD5/SHA1之类的算法开销又比较大，Spark图运算的时候节点较多，hash的开销还是蛮可观的。&lt;br>
经过搜索，发现了MurmurHash算法，具体参考 &lt;a class="link" href="https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C" target="_blank" rel="noopener"
>维基百科&lt;/a> ，总而言之就是高效低碰撞，hadoop/memcached之类都在用。&lt;br>
Scala API自身是有MurmurHash算法的实现的（&lt;a class="link" href="http://www.scala-lang.org/api/current/scala/util/hashing/MurmurHash3$.html" target="_blank" rel="noopener"
>scala.util.hashing.MurmurHash3&lt;/a>），但返回值是int，32位。对于海量数据而言，显然不够用，我们需要64位的。&lt;br>
于是就写了个scala实现的64位MurmurHash函数，详见下文（没有测试过具体的碰撞性能）。&lt;/p>
&lt;h2 id="scala实现">scala实现&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MurmurHash64&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> stringHash&lt;span style="color:#5bc4bf">(&lt;/span>str&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Long&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> data &lt;span style="color:#815ba4">=&lt;/span> str&lt;span style="color:#5bc4bf">.&lt;/span>getBytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> length &lt;span style="color:#815ba4">=&lt;/span> data&lt;span style="color:#5bc4bf">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> seed &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">0xe17a1465&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> m &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">0xc6a4a7935bd1e995&lt;/span>L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> r &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">47&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> h &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>seed &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xffffffff&lt;/span>L&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">^&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">*&lt;/span> m&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> length8 &lt;span style="color:#815ba4">=&lt;/span> length &lt;span style="color:#5bc4bf">/&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>i &lt;span style="color:#815ba4">&amp;lt;-&lt;/span> &lt;span style="color:#f99b15">0&lt;/span> until length8&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> i8 &lt;span style="color:#815ba4">=&lt;/span> i &lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> k &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">16&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">24&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">32&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">40&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">48&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">56&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">^=&lt;/span> k &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">48&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> h &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> h &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>js跨域获取Cookie的一种新方法</title><link>https://leibnizhu.github.io/p/js%E8%B7%A8%E5%9F%9F%E8%8E%B7%E5%8F%96Cookie%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 12 Jan 2017 14:01:25 +0800</pubDate><guid>https://leibnizhu.github.io/p/js%E8%B7%A8%E5%9F%9F%E8%8E%B7%E5%8F%96Cookie%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>同一个项目分配了多个域名，在其中一个域名（下称域名A）的一级域名上放了Cookie。&lt;br>
使用其他域名(下面统称域名B*)去访问某些页面时，需要使用js读取域名A下的那个Cookie。&lt;/p>
&lt;h2 id="已有的解决方案">已有的解决方案&lt;/h2>
&lt;p>网上已经有一些解决方案，如：&lt;a class="link" href="https://m.th7.cn/show/22/201503/88209.htm" target="_blank" rel="noopener"
>JS跨域（ajax跨域、iframe跨域）解决方法及原理详解（jsonp）&lt;/a>、&lt;a class="link" href="http://www.cnblogs.com/chris-shao/archive/2012/12/27/2835986.html" target="_blank" rel="noopener"
>JS 获取跨域的cookie&lt;/a>。&lt;br>
其中document.domain的方法已确认不可用于我的需求，iframe跨域可以实现，但是跨域后的页面在iframe中，此时js变量的作用域只在iframe中，需要通过一个中间元素的值或者属性来写入需要传递的值，比较麻烦；document.name的方法虽然可以跨域，但同时也跨页面了，处理起来要小心点。&lt;/p>
&lt;h2 id="本文的解决方案">本文的解决方案&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>在域名B*的页面上，js的确不能直接获取到域名A的cookie，但显然，域名B*的页面如果发请求到域名A，会带上域名A的Cookie。&lt;br>
针对这一点，只要我们在域名A上面部署一个微服务，域名B*的页面发AJAX请求到这个服务，返回域名A的Cookie中我们感兴趣字段的值。域名B*的页面就能接收到域名A的Cookie，可以各种利用了。&lt;/p>
&lt;h3 id="netty实现">Netty实现&lt;/h3>
&lt;p>域名A的服务器端选用Netty实现。实现代码很简单，这里只给出核心Handler部分代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">RPCMissionHandler&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> SimpleChannelInboundHandler&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>FullHttpRequest&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> Logger&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLogger&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>RPCMissionHandler&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead0&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> FullHttpRequest req&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(!&lt;/span>req&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">decoderResult&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">isSuccess&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendError&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> BAD_REQUEST&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>req&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">method&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> GET&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendError&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> METHOD_NOT_ALLOWED&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String uri &lt;span style="color:#5bc4bf">=&lt;/span> req&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">uri&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String paramUri &lt;span style="color:#5bc4bf">=&lt;/span> uri&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">substring&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>uri&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">indexOf&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;?&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> 1&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>NameValuePair&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> params &lt;span style="color:#5bc4bf">=&lt;/span> URLEncodedUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">parse&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>paramUri&lt;span style="color:#5bc4bf">,&lt;/span> Charset&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">forName&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>uri&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">startsWith&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/getid&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String refererDomain &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>NameValuePair pair &lt;span style="color:#5bc4bf">:&lt;/span> params&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;domain&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pair&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getName&lt;/span>&lt;span style="color:#5bc4bf">())){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refererDomain &lt;span style="color:#5bc4bf">=&lt;/span> pair&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getValue&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>refererDomain &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>req&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Cookie&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> cookies &lt;span style="color:#5bc4bf">=&lt;/span> CookieDecoder&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">decode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>req&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Cookie cookie &lt;span style="color:#5bc4bf">:&lt;/span> cookies&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;ID&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">equals&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">name&lt;/span>&lt;span style="color:#5bc4bf">()))&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Request ID = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithString&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> cookie&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> &lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> refererDomain&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithString&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> refererDomain&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithImage&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">responseWithString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> String data&lt;span style="color:#5bc4bf">,&lt;/span> String referer&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FullHttpResponse resp &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse&lt;span style="color:#5bc4bf">(&lt;/span>HttpVersion&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> OK&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*配置不缓存*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Cache-Control&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Pragma&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;no-cache&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Expires&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;Wed, 31 Dec 1969 23:59:59 GMT&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*配置跨域允许*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-origin&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> referer&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;GET, POST&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*响应类型*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/html;charset=UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ByteBuf buf &lt;span style="color:#5bc4bf">=&lt;/span> Unpooled&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copiedBuffer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> StringBuffer&lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">),&lt;/span> CharsetUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF_8&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">content&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">writeBytes&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>buf&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">release&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>resp&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">addListener&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelFutureListener&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CLOSE&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendError&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> HttpResponseStatus status&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FullHttpResponse resp &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse&lt;span style="color:#5bc4bf">(&lt;/span>HttpVersion&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> status&lt;span style="color:#5bc4bf">,&lt;/span> Unpooled&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">copiedBuffer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Failure:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> status&lt;span style="color:#5bc4bf">,&lt;/span> CharsetUtil&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">UTF_8&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>CONTENT_TYPE&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/plain; charset=UTF-8&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>resp&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">addListener&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelFutureListener&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">CLOSE&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelReadComplete&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Unpooled&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">EMPTY_BUFFER&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channelReadComplete&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">exceptionCaught&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> Throwable cause&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;抛出异常&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> cause&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">exceptionCaught&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ctx&lt;span style="color:#5bc4bf">,&lt;/span> cause&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>唯一需要注意的是，在请求的时候，通过&lt;code>domain&lt;/code>参数带上了域名B*，然后在响应的时候，配置跨域相关的一些HTTP响应头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-origin&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> referer&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;GET, POST&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resp&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">headers&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">set&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中referer就是域名B*。&lt;/p>
&lt;h3 id="页面js调用">页面js调用&lt;/h3>
&lt;p>js发AJAX请求这块就更简单了。唯一注意的是，我们这个Cookie字段可能在页面加载后一段时间才能获取到，所以这里设置了重试机制，获取不到ID的时候等待1秒后重新发送一次请求，一共最多请求5次。&lt;br>
这里发送AJAX请求也涉及到一些跨域的配置，详见注释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#06b6ef">$&lt;/span>(window).&lt;span style="color:#06b6ef">load&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">setTimeout&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){&lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#f99b15">5&lt;/span>);}, &lt;span style="color:#f99b15">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">function&lt;/span> &lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#06b6ef">times&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">$&lt;/span>.&lt;span style="color:#06b6ef">ajax&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">url&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#39;http://A.com/getid?domain=&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>document.&lt;span style="color:#06b6ef">domain&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#39;get&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">crossDomain&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>, &lt;span style="color:#776e71">/*允许跨域*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">xhrFields&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> { &lt;span style="color:#06b6ef">withCredentials&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">true&lt;/span> }, &lt;span style="color:#776e71">/*允许跨域*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">function&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>){&lt;span style="color:#06b6ef">alert&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>);},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">success&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">data&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">ID&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#06b6ef">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#5bc4bf">--&lt;/span>&lt;span style="color:#06b6ef">times&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">setTimeout&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){&lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#06b6ef">times&lt;/span>);}, &lt;span style="color:#f99b15">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>HashMap源码阅读笔记</title><link>https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 24 Dec 2016 16:48:04 +0800</pubDate><guid>https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="put方法">put方法：&lt;/h2>
&lt;p>put方法调用私有方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>putVal&lt;span style="color:#5bc4bf">(&lt;/span>hash&lt;span style="color:#5bc4bf">(&lt;/span>key&lt;span style="color:#5bc4bf">),&lt;/span>key&lt;span style="color:#5bc4bf">,&lt;/span>value&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="先去计算hash">先去计算hash。&lt;/h3>
&lt;p>key非空的时候返回：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>h&lt;span style="color:#5bc4bf">=&lt;/span>key&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hashCode&lt;/span>&lt;span style="color:#5bc4bf">())^(&lt;/span>h&lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span>16&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即高16位不变，低16位与高16位做异或运算，因为目前的table长度n为2的幂，而计算下标的时候，是这样实现的(使用&amp;amp;位操作，而非%求余)：(n - 1) &amp;amp; hash 。设计者认为这方法很容易发生碰撞。在n - 1为15(0x1111)时，其实散列真正生效的只是低4bit的有效位，当然容易碰撞了。因此，综合考虑了速度、作用、质量，把高16bit和低16bit异或了一下。设计者还解释到因为现在大多数的hashCode的分布已经很不错了，就算是发生了碰撞也用O(logn)的tree去做了。仅仅异或一下，既减少了系统的开销，也不会造成的因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。&lt;/p>
&lt;h3 id="然后进入putval">然后进入putVal()。&lt;/h3>
&lt;p>首先判断table是否为空（null或长度为0），为空的话进行resize()。&lt;/p>
&lt;h3 id="resize">resize()&lt;/h3>
&lt;p>如果原来table大小已经超过上限，则不resize，直接返回原来table；
原来table大小不为0且未超上限则容量增倍，threshold（扩容阈值）也增倍；
原来table大小为0，则大小设为DEFAULT_INITIAL_CAPACITY=16，threshold设为DEFAULT_LOAD_FACTOR*DEFAULT_INITIAL_CAPACITY=12。
然后按新的table大小，new一个Node数组。此时如果旧的table不为空，则需要进行原有数据的转移。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>oldTab&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>intj&lt;span style="color:#5bc4bf">=&lt;/span>0&lt;span style="color:#5bc4bf">;&lt;/span>j&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>oldCap&lt;span style="color:#5bc4bf">;++&lt;/span>j&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>e&lt;span style="color:#5bc4bf">=&lt;/span>oldTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">])!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oldTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">]=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">==&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> newTab&lt;span style="color:#5bc4bf">[&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hash&lt;/span>&lt;span style="color:#5bc4bf">&amp;amp;(&lt;/span>newCap&lt;span style="color:#5bc4bf">-&lt;/span>1&lt;span style="color:#5bc4bf">)]=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elseif&lt;span style="color:#5bc4bf">(&lt;/span>e &lt;span style="color:#815ba4">instanceof&lt;/span> TreeNode&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">((&lt;/span>TreeNode&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;)&lt;/span>e&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">split&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>newTab&lt;span style="color:#5bc4bf">,&lt;/span>j&lt;span style="color:#5bc4bf">,&lt;/span>oldCap&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#776e71">//preserveorder
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>loHead&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>loTail&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>hiHead&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>hiTail&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>next&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">do&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hash&lt;/span>&lt;span style="color:#5bc4bf">&amp;amp;&lt;/span>oldCap&lt;span style="color:#5bc4bf">)==&lt;/span>0&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>loTail&lt;span style="color:#5bc4bf">==&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loHead&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loTail&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>&lt;span style="color:#815ba4">else&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hiTail&lt;span style="color:#5bc4bf">==&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hiHead&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hiTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hiTail&lt;span style="color:#5bc4bf">=&lt;/span>e&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>&lt;span style="color:#815ba4">while&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>e&lt;span style="color:#5bc4bf">=&lt;/span>next&lt;span style="color:#5bc4bf">)!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>loTail&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> newTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">]=&lt;/span>loHead&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>hiTail&lt;span style="color:#5bc4bf">!=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hiTail&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">next&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> newTab&lt;span style="color:#5bc4bf">[&lt;/span>j&lt;span style="color:#5bc4bf">+&lt;/span>oldCap&lt;span style="color:#5bc4bf">]=&lt;/span>hiHead&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>大致意思就是遍历旧表的元素：
1.如果旧表元素的next为空（没有发生冲突而放入链表），则计算hash放进新表对应位置：newTab[旧表元素.hash&amp;amp;(newCap-1)]=旧表元素（newCap为新的table长度）;
2.若旧表元素为TreeNode实例，即该节点使用了红黑树进行存储的（JDK8开始引入），则执行split方法去处理；
3.否则遍历旧表元素的对应链表，重新计算位置。
resize的时候，因为我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂（oldCap）的位置，例如我们从16扩展为32时，具体的变化如下所示：
&lt;img src="https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1.png"
width="727"
height="67"
srcset="https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1_hu30e718e41d0f537c7be0bcca5730372d_7396_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/1_hu30e718e41d0f537c7be0bcca5730372d_7396_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1085"
data-flex-basis="2604px"
>
因此元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色，0或1)。
因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了（通过&lt;code>(e.hash&amp;amp;oldCap)==0&lt;/code>进行判断），是0的话索引没变，是1的话索引变成“原索引+oldCap”。可以看看下图为16扩充为32的resize示意图：
&lt;img src="https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2.png"
width="621"
height="353"
srcset="https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2_hu9b25c08baa945f3801d9bb9649882515_11884_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/2_hu9b25c08baa945f3801d9bb9649882515_11884_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>
既省去了重新计算hash值的时间，而且由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。
上面代码中else{//preserveorder之后的部分即完成了上述过程，将一个节点上的链表拆分成用loHead,loTail和hiHead,hiTail
描述的两个链表，分别对应新表中位置不变的节点，和移动oldCap之后的节点。&lt;/p>
&lt;h3 id="新建节点或更新value">新建节点或更新value&lt;/h3>
&lt;p>然后判断当前hash值对应table的节点是否为空，为空的话直接新建节点即可：new Node&amp;lt;&amp;gt;(hash,key,value,null);最后一个参数是next，因为table原节点为空，为链表第一个元素，所以next设为null即可；
如果hash值对应table节点不为空，则判断原节点和当前插入的数据key及value是否都一致，如果一致，证明是同一个节点，无需重新插入；
否则进入table节点的链表，遍历，如果找到与待插入节点一样的节点，则直接退出，否则一直找到链表末端节点还没找到相同的，则增加新节点插入当前数据，如果当前链表长度大于TREEIFY_THRESHOLD-1，还需要进行treeifyBin()操作，将链表转换为红黑树，提高查询效率（O(n)变为O(logn)，JDK8之后引入的优化）。
如果以上操作中找到待插入节点的key在map中已存在，则用新数据覆盖之，最后size++, 判断table尺寸，看是否需要进行resize()。&lt;/p>
&lt;h2 id="get方法">get方法：&lt;/h2>
&lt;p>get时调用&lt;code>getNode(int hash, Object key)&lt;/code>方法。
首先table为null或长度为0或对应hash位置的元素为null均返回null。
否则先判断hash位置上的元素key和get方法的key相同，如果相同则直接返回hash位置的元素；否则判断hash位置节点是否为TreeNode，若是则调用getTreeNode方法进行处理并返回；对于非TreeNode节点，且hash位置节点的key不等于get方法dekey的话，则遍历hash位置节点的链表，直到找到key相同的节点并返回节点的value。&lt;/p></description></item><item><title>HtmlUnit爬虫使用代理时对HTTP请求头Proxy-Connection字段的探究</title><link>https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/</link><pubDate>Sun, 04 Dec 2016 09:39:02 +0800</pubDate><guid>https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>最近给以前写的一个刷流量的爬虫/工具增加动态切换代理的功能。&lt;/p>
&lt;p>这个工具基于Java开发，使用了HtmlUnit库模拟浏览器进行访问，并加载页面中所有的JS以触发第三方监控。其实可以抓第三方监控的请求，然后再直接模拟这些请求，但这样就缺乏通用性，即不同的网站需要单独针对抓请求分析，所以选择了直接模拟浏览器加载JS的方法。&lt;/p>
&lt;p>而最近新需求要求增加使用代理模拟多地访问的功能，所以：&lt;/p>
&lt;ol>
&lt;li>先是写了个简单的Python爬虫爬各种免费代理的网站，一一验证可用性并放入数据库中备用；&lt;/li>
&lt;li>而后发现这样抓到的代理很少，一直维持50个左右可用的，而且经常返回403错误，不能满足刷流量工具的需求，所以购买了某收费代理；&lt;/li>
&lt;li>在使用收费代理的过程中，发现通过很多宣称高可靠的代理进行访问时依然返回403错误码，结果是大量代理不可用。&lt;/li>
&lt;/ol>
&lt;h2 id="问题分析">问题分析&lt;/h2>
&lt;p>首先，Python抓回来的代理是经过Python的Requests库检验的，确认可以通过其进行网页访问才放入数据库的；而购买的代理宣称高可靠的也是有自己的检测的，而且可以看到他们的检验时间跟我的使用时间一般只相差几分钟，应该不会有大量代理在这几分钟之内失效。&lt;/p>
&lt;p>所以怀疑是HtmlUnit的问题。HtmlUnit库可以选择使用不同的浏览器类型/版本（根据官网文档，这些不同的浏览器的区别是JS的解析方法和User-Agent、HTTP请求头），我们首先尝试了所有HtmlUnit支持的浏览器类型/版本，发现还是有大量的代理在使用时返回403错误码。&lt;/p>
&lt;p>再思考为什么会返回403，要么就是请求头有问题，要么我们的IP被封了。但我们的IP应该没干过什么坏事，不会轻易被列入黑名单吧，所以还是往请求头的方向去想，毕竟爬虫的话出问题也经常是因为请求头有问题，异于常规的访问。所以我们尝试了很多User-Agent，发现还是不行。&lt;/p>
&lt;p>最后考虑到抓包分析。直接用WireShark进行抓包，筛选HTTP包，分别截取Python的Requests库和Java的HtmlUnit去使用同一个代理访问同一个网页的请求包，如下。
Python的Requests库使用代理访问产生的HTTP请求包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Hypertext Transfer Protocol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Expert Info &lt;span style="color:#5bc4bf">(&lt;/span>Chat/Sequence&lt;span style="color:#5bc4bf">)&lt;/span>: GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Severity level: Chat&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Group: Sequence&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Method: GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request URI: http://www.***.com/test/index.htm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Version: HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Host: www.***.com&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Connection: keep-alive&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Encoding: gzip, deflate&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: */*&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User-Agent: python-requests/2.12.2&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Full request URI: http://www.***.com/test/index.htm&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>HTTP request 1/1&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而HtmlUnit产生的包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Hypertext Transfer Protocol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Expert Info &lt;span style="color:#5bc4bf">(&lt;/span>Chat/Sequence&lt;span style="color:#5bc4bf">)&lt;/span>: GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Severity level: Chat&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Group: Sequence&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Method: GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request URI: http://www.***.com/test/index.htm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Version: HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Host: www.***.com&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User-Agent: Mozilla/5.0 &lt;span style="color:#5bc4bf">(&lt;/span>Windows NT 10.0; WOW64&lt;span style="color:#5bc4bf">)&lt;/span> AppleWebKit/537.36 &lt;span style="color:#5bc4bf">(&lt;/span>KHTML, like Gecko&lt;span style="color:#5bc4bf">)&lt;/span> Chrome/54.0.2840.99 Safari/537.36&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: */*&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Language: en-US&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Encoding: gzip, deflate&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Proxy-Connection: keep-alive&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Full request URI: http://www.***.com/test/index.htm&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>HTTP request 1/1&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Requests使用的User-Agent是python-requests，竟然也没被拦截，而HtmlUnit使用真实浏览器的User-Agent却返回403，看来跟User-Agent无关；事实上，我们尝试将HtmlUnit的User-Agent设置为与Requests一样，再去访问，一样得到403。&lt;/p>
&lt;p>然后仔细看HTTP请求头，不难发现，唯一的区别在于python-requests使用了一个Connection的字段，这个大家都比较熟悉，是要求远程服务器启用长连接的；而HtmlUnit没有Connection字段，取而代之的是Proxy-Connection字段，明显与代理有关。那么问题出在这个HTTP请求头字段上面？？？&lt;/p>
&lt;h2 id="proxy-connection是什么">Proxy-Connection是什么&lt;/h2>
&lt;p>通过Google我们发现Proxy-Connection是为了兼容不同HTTP协议版本而产生的一个字段，可以参考这篇文章：&lt;br>
&lt;a class="link" href="https://imququ.com/post/the-proxy-connection-header-in-http-request.html" target="_blank" rel="noopener"
>Http 请求头中的 Proxy-Connection&lt;/a>&lt;br>
大概意思就是如果使用代理服务的时候，还是发送Connection字段，那么一些旧的代理服务器不能处理这个字段而直接转发给目标服务器，最后目标服务器可能同意开启长连接，而代理服务器却没有正确地响应建立长连接，最后导致不能正常访问；所以才在使用代理的时候，使用Proxy-Connection替代Connection，让远程服务器区分对待。&lt;/p>
&lt;p>总而言之，使用代理服务器的时候，请求头使用Proxy-Connection字段是符合HTTP协议的。也就是说其实HtmlUnit的处理是正确的，而Requests的处理反而是不符合HTTP协议的？&lt;/p>
&lt;h2 id="htmlunit中去除proxy-connection字段">HtmlUnit中去除Proxy-Connection字段&lt;/h2>
&lt;p>不管谁对谁错，就目前状况而言，似乎使用了Proxy-Connection就是会让代理服务器返回403，或许是因为这些代理服务器不希望开启长连接？（毕竟很多代理服务器隔一小段时间就要切换端口之类的，比较被人长时间占用），所以我们的目标变成使用HtmlUnit发送请求的时候去除HTTP请求头的Proxy-Connection字段。&lt;/p>
&lt;h3 id="removerequestheader">removeRequestHeader()&lt;/h3>
&lt;p>HtmlUnit的核心类WebClient有方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>removeRequestHeader&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以删除请求头的字段。不过经过尝试，调用了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>removeRequestHeader&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，发出的请求还是带有Proxy-Connection字段。&lt;/p>
&lt;h3 id="webrequestremoveadditionalheader">WebRequest.removeAdditionalHeader()&lt;/h3>
&lt;p>于是尝试别的方法，在访问页面的时候再删除请求头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>WebRequest request &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebRequest&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;**********&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">removeAdditionalHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setAdditionalHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;Keep-Alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HtmlPage page1 &lt;span style="color:#5bc4bf">=&lt;/span> webClient&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然不行。&lt;/p>
&lt;h3 id="查看源码">查看源码&lt;/h3>
&lt;p>查看了HtmlUnit源码（在此不贴出来了），发现我们调用其方法处理Header，所处理的只不过是一个额外的Map，不管增加和删除都是在这个Map里面处理的，最后的Header是这个额外的Map和预定义的一些Header结合在一起。但是在源码中也没有发现Proxy-Connection字段的处理（如判断当前使用代理，则用Proxy-Connection字段取代Connection字段等逻辑）。&lt;/p>
&lt;p>仔细观察，其实HtmlUnit底层是调用了JDK的&lt;strong>sun.net.www.protocol.http.HttpURLConnection&lt;/strong> 进行访问的，我们再看HttpURLConnection的源码，发现有两处：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeRequests&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">usingProxy&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">tunnelState&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> HttpURLConnection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TunnelState&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TUNNELING&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendCONNECTRequest&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getHttpKeepAliveSet&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原来是在这里面处理的！！！！&lt;/p>
&lt;h3 id="编译rtjar">编译rt.jar&lt;/h3>
&lt;p>&lt;strong>sun.net.www.protocol.http.HttpURLConnection&lt;/strong> 是在JRE的rt.jar中的核心类，不能随便修改。
所以我们提取出HttpURLConnection，反编译，注释掉Proxy-Connection相关语句，重新编译，替换rt.jar中的响应class文件：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1.png"
width="1052"
height="532"
srcset="https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1_hu2ce3ac896160117c1db594cb915b315b_46628_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1_hu2ce3ac896160117c1db594cb915b315b_46628_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;br>
重新测试，发现发出的请求还是带有Proxy-Connection字段！！！！&lt;/p>
&lt;h2 id="python验证">Python验证&lt;/h2>
&lt;p>从另一个角度来验证：对于HtmlUnit使用会返回403的代理，在Python的Requests中使用，并在HTTP请求头加上Proxy-Connection字段。Python代码比较简单，执行时输入需要验证的IP和端口就行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#coding:utf-8 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip &lt;span style="color:#5bc4bf">=&lt;/span> sys&lt;span style="color:#5bc4bf">.&lt;/span>argv[&lt;span style="color:#f99b15">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port &lt;span style="color:#5bc4bf">=&lt;/span> sys&lt;span style="color:#5bc4bf">.&lt;/span>argv[&lt;span style="color:#f99b15">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>header &lt;span style="color:#5bc4bf">=&lt;/span>{&lt;span style="color:#48b685">&amp;#39;Proxy-Connection&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;Keep-Alive&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxies&lt;span style="color:#5bc4bf">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#39;http&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;http://&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">%&lt;/span>(ip,port),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#39;https&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;http://&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">%&lt;/span>(ip,port)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#5bc4bf">=&lt;/span> requests&lt;span style="color:#5bc4bf">.&lt;/span>get(&lt;span style="color:#48b685">&amp;#39;http://www.***.com/test/index.htm&amp;#39;&lt;/span>,proxies&lt;span style="color:#5bc4bf">=&lt;/span>proxies,headers&lt;span style="color:#5bc4bf">=&lt;/span>header)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#5bc4bf">.&lt;/span>encoding&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;utf-8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print r&lt;span style="color:#5bc4bf">.&lt;/span>text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">~&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>果然，控制台输出“Access not allowed!”。将“headers=header”去掉之后就能正常输出页面内容。&lt;br>
因此可以确认是Proxy-Connection字段导致的问题。&lt;/p>
&lt;h2 id="目前结论">目前结论&lt;/h2>
&lt;ol>
&lt;li>对于某些代理服务器，使用时请求头不能有Proxy-Connection字段；&lt;/li>
&lt;li>在家里跑这个工具，却基本没有返回403错误…………看来还有可能是办公室IP被列入黑名单了……&lt;/li>
&lt;li>对于Java开发，要选择不适用sun的HttpUrlConnection的html测试工具/模拟浏览器了；看了Selenium的源码，没有用这个类，准备试下。&lt;/li>
&lt;/ol></description></item><item><title>Spring Boot快速入门（四）——日志系统</title><link>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%9B%9B%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 26 Nov 2016 16:00:08 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%9B%9B%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h2 id="日志系统">日志系统&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Spring Boot默认使用的Apache的Common Logging日志系统，但同时也提供了Java Util Logging, Log4J, Log4J2和Logback等日志系统的支持（无需额外增加依赖）。&lt;/p>
&lt;h3 id="日志格式">日志格式&lt;/h3>
&lt;p>Spring Boot默认输出的日志各列含义如下：&lt;/p>
&lt;ul>
&lt;li>日期和时间 - 精确到毫秒，且易于排序。&lt;/li>
&lt;li>日志级别 - ERROR, WARN, INFO, DEBUG 或 TRACE。&lt;/li>
&lt;li>Process ID。&lt;/li>
&lt;li>一个用于区分实际日志信息开头的&amp;mdash;分隔符。&lt;/li>
&lt;li>线程名 - 包括在方括号中（控制台输出可能会被截断）。&lt;/li>
&lt;li>日志名 - 通常是源class的类名（缩写）。&lt;/li>
&lt;li>日志信息。&lt;/li>
&lt;/ul>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>2014-03-05 10:57:51.112 INFO &lt;span style="color:#f99b15">45469&lt;/span> --- &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/7.0.52
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-03-05 10:57:51.253 INFO &lt;span style="color:#f99b15">45469&lt;/span> --- &lt;span style="color:#5bc4bf">[&lt;/span>ost-startStop-1&lt;span style="color:#5bc4bf">]&lt;/span> o.a.c.c.C.&lt;span style="color:#5bc4bf">[&lt;/span>Tomcat&lt;span style="color:#5bc4bf">]&lt;/span>.&lt;span style="color:#5bc4bf">[&lt;/span>localhost&lt;span style="color:#5bc4bf">]&lt;/span>.&lt;span style="color:#5bc4bf">[&lt;/span>/&lt;span style="color:#5bc4bf">]&lt;/span> : Initializing Spring embedded WebApplicationContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-03-05 10:57:51.253 INFO &lt;span style="color:#f99b15">45469&lt;/span> --- &lt;span style="color:#5bc4bf">[&lt;/span>ost-startStop-1&lt;span style="color:#5bc4bf">]&lt;/span> o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in &lt;span style="color:#f99b15">1358&lt;/span> ms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-03-05 10:57:51.698 INFO &lt;span style="color:#f99b15">45469&lt;/span> --- &lt;span style="color:#5bc4bf">[&lt;/span>ost-startStop-1&lt;span style="color:#5bc4bf">]&lt;/span> o.s.b.c.e.ServletRegistrationBean : Mapping servlet: &lt;span style="color:#48b685">&amp;#39;dispatcherServlet&amp;#39;&lt;/span> to &lt;span style="color:#5bc4bf">[&lt;/span>/&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2014-03-05 10:57:51.702 INFO &lt;span style="color:#f99b15">45469&lt;/span> --- &lt;span style="color:#5bc4bf">[&lt;/span>ost-startStop-1&lt;span style="color:#5bc4bf">]&lt;/span> o.s.b.c.embedded.FilterRegistrationBean : Mapping filter: &lt;span style="color:#48b685">&amp;#39;hiddenHttpMethodFilter&amp;#39;&lt;/span> to: &lt;span style="color:#5bc4bf">[&lt;/span>/*&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以在resources/application.properties中使用logging.pattern.console和logging.pattern.file属性进行配置。&lt;/p>
&lt;h3 id="日志配置">日志配置&lt;/h3>
&lt;p>可以在&lt;strong>resources/application.properties&lt;/strong> 中进行配置，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>###日志配置###
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#日志输出级别
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logging.level.root=INFO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logging.level.com.turingdi.dmp=DEBUG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#检查终端是否支持ANSI，是的话就采用彩色输出
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spring.output.ansi.enabled=DETECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#设置文件，可以是绝对路径，也可以是相对路径
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#logging.file=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#设置目录，会在该目录下创建spring.log文件，并写入日志内容
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#logging.path=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#定义输出到控制台的样式（不支持JDK Logger）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36}[%line]=&amp;gt; %msg%n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#定义输出到文件的样式（不支持JDK Logger）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>#logging.pattern.file=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="日志api调用">日志API调用&lt;/h3>
&lt;p>类似Log4j：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.apache.commons.logging.Log&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.apache.commons.logging.LogFactory&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">TemplateController&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Log log &lt;span style="color:#5bc4bf">=&lt;/span> LogFactory&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getLog&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>TemplateController&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">index&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ModelMap map&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;hahahaha&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//还有warn\error\debug等方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#ef6155">……&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他相关网站">其他相关网站&lt;/h2>
&lt;p>Spring Boot相关博客：&lt;br>
&lt;a class="link" href="http://blog.didispace.com/categories/Spring-Boot/" target="_blank" rel="noopener"
>http://blog.didispace.com/categories/Spring-Boot/&lt;/a>&lt;br>
Thymeleaf相关博客：&lt;br>
&lt;a class="link" href="http://www.cnblogs.com/vinphy/p/4674247.html" target="_blank" rel="noopener"
>http://www.cnblogs.com/vinphy/p/4674247.html&lt;/a>&lt;br>
&lt;a class="link" href="http://www.jianshu.com/p/ed9d47f92e37" target="_blank" rel="noopener"
>http://www.jianshu.com/p/ed9d47f92e37&lt;/a>&lt;/p></description></item><item><title>Spring Boot快速入门（三）——使用Thymeleaf模板引擎</title><link>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link><pubDate>Sat, 26 Nov 2016 15:59:27 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid><description>&lt;h1 id="使用thymeleaf模板引擎">使用Thymeleaf模板引擎&lt;/h1>
&lt;h2 id="thymeleaf简介">Thymeleaf简介&lt;/h2>
&lt;p>Thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可。&lt;br>
Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，&lt;strong>因此也可以用作静态建模&lt;/strong> 。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。&lt;br>
Thymeleaf主要通过HTML的标签属性渲染标签内容，浏览器在解析html时，当检查到Thymeleaf的属性时候会忽略，所以Thymeleaf的模板可以通过浏览器直接打开展现，这样非常&lt;strong>有利于前后端的分离&lt;/strong> 。&lt;/p>
&lt;h2 id="添加依赖">添加依赖&lt;/h2>
&lt;p>添加模板引擎的依赖，可以在IntelliJ IDEA创建Spring Boot项目的时候选择对应的依赖，也可以在后期手动修改pom.xml文件增加依赖。&lt;/p>
&lt;h3 id="intellij-idea创建spring-boot项目时增加">IntelliJ IDEA创建Spring Boot项目时增加&lt;/h3>
&lt;p>在选择依赖的界面，点击左边的“Template Engine”，在中间选择所需的模板引擎即可。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6.png"
width="870"
height="550"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6_hu6ca57f4e7f7f9ec40effa8d83a30b110_15376_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/6_hu6ca57f4e7f7f9ec40effa8d83a30b110_15376_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="379px"
>&lt;/p>
&lt;h3 id="手动修改pomxml">手动修改pom.xml&lt;/h3>
&lt;p>以Thymeleaf为例，修改pom.xml增加以下依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-thymeleaf&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可在resources/application.properties中对Thymeleaf进行配置。&lt;/p>
&lt;h2 id="目录结构">目录结构&lt;/h2>
&lt;p>Thymeleaf默认将模板放在resources/templates目录下（可以通过application.properties文件进行配置，但建议保持默认值方便管理）；同时，Spring Boot默认将静态资源放在resources/static（从根路径访问），于是，经典的目录结构是这样的：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/7.png"
width="225"
height="108"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/7_hu6e9db1b1b3690689af597cb77aa047bb_2524_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/7_hu6e9db1b1b3690689af597cb77aa047bb_2524_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="208"
data-flex-basis="500px"
>&lt;br>
其中640-100.jpg的访问路径为http://127.0.0.1:8080/640-100.jpg。&lt;/p>
&lt;h2 id="模板demo">模板Demo&lt;/h2>
&lt;p>在resources/templates目录下新建temp.html，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">head&lt;/span> &lt;span style="color:#06b6ef">lang&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">meta&lt;/span> &lt;span style="color:#06b6ef">charset&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">title&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">h1&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${host}&amp;#34;&lt;/span>&amp;gt;Hello World&amp;lt;/&lt;span style="color:#5bc4bf">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中h1的&lt;strong>th:text=&amp;quot;${host}&amp;quot;&lt;/strong> 即为Thymeleaf的属性，表示获取ModelMap中的host属性赋值给h1的文本；而这个文件直接用浏览器访问的时候h1元素则显示“Hello World”。
再编写一个Controller：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/template&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">TemplateController&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">index&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ModelMap map&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 加入一个属性，用来在模板中读取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> map&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addAttribute&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;host&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;http://www.turingdi.com&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// return模板文件的名称，对应resources/templates/temp.html
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;temp&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意这里使用了@Controller注解而不是之前的@RestController，若使用后者，index()方法返回的”temp”会直接以JSON格式返回，页面显示“temp”。实际上我们使用@Controller注解并加入了Thymeleaf模板引擎后，index()方法返回的”temp”会被Thymeleaf模板引擎理解为src/main/resources/templates/temp.html文件，然后解析该文档并响应返回。在浏览器中接收到的html源码如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/8.png"
width="254"
height="177"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/8_hu4db642ab36ed21f35da9bfe856fdc56e_4180_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/8_hu4db642ab36ed21f35da9bfe856fdc56e_4180_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;br>
而这个模板文件直接用浏览器打开的效果：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/9.png"
width="712"
height="120"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/9_hu2d2846de01e8e749313ea5e3dade173a_4806_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%89%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/9_hu2d2846de01e8e749313ea5e3dade173a_4806_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="593"
data-flex-basis="1424px"
>&lt;br>
可以看到，前端开发人员可以直接修改html并直接观察修改后的效果，修改时并不影响Thymeleaf的代码，因此可以方便前后端协同开发。&lt;/p>
&lt;h2 id="thymeleaf简单表达式">Thymeleaf简单表达式&lt;/h2>
&lt;h3 id="变量表达式-">变量表达式 ${……}&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">input&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">name&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;userName&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">value&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;James Carrot&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:value&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${user.name}&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码为引用user对象的name属性值。&lt;/p>
&lt;h3 id="选择星号表达式-">选择/星号表达式 *{……}&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">div&lt;/span> &lt;span style="color:#06b6ef">th:object&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${session.user}&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;Nationality:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">span&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;*{nationality}&amp;#34;&lt;/span>&amp;gt;Saturn&amp;lt;/&lt;span style="color:#5bc4bf">span&lt;/span>&amp;gt;.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择表达式一般跟在th:object后，直接取object中的属性。&lt;/p>
&lt;h3 id="文字国际化表达式-">文字国际化表达式 #{……}&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">p&lt;/span> &lt;span style="color:#06b6ef">th:utext&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;#{home.welcome}&amp;#34;&lt;/span>&amp;gt;Welcome to our grocery store!&amp;lt;/&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="url表达式-">URL表达式 @{……}&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">a&lt;/span> &lt;span style="color:#06b6ef">href&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;details.html&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:href&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/order/details(orderId=${o.id})}&amp;#34;&lt;/span>&amp;gt;view&amp;lt;/&lt;span style="color:#5bc4bf">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>@{……}支持决定路径和相对路径。其中相对路径又支持跨上下文调用url和协议的引用。
当URL为后台传出的参数时，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">img&lt;/span> &lt;span style="color:#06b6ef">src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;../../static/assets/images/qr-code.jpg&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{${path}}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">alt&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;二维码&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="thymeleaf常用标签">Thymeleaf常用标签&lt;/h2>
&lt;h3 id="简单数据转换数字日期">简单数据转换（数字，日期）&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">dt&lt;/span>&amp;gt;价格&amp;lt;/&lt;span style="color:#5bc4bf">dt&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">dd&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${#numbers.formatDecimal(product.price, 1, 2)}&amp;#34;&lt;/span>&amp;gt;180&amp;lt;/&lt;span style="color:#5bc4bf">dd&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">dt&lt;/span>&amp;gt;进货日期&amp;lt;/&lt;span style="color:#5bc4bf">dt&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">dd&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${#dates.format(product.availableFrom, &amp;#39;yyyy-MM-dd&amp;#39;)}&amp;#34;&lt;/span>&amp;gt;2014-12-01&amp;lt;/&lt;span style="color:#5bc4bf">dd&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="字符串拼接">字符串拼接&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">dd&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${&amp;#39;$&amp;#39;+product.price}&amp;#34;&lt;/span>&amp;gt;235&amp;lt;/&lt;span style="color:#5bc4bf">dd&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="表单">表单&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">form&lt;/span> &lt;span style="color:#06b6ef">th:action&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/bb}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:object&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${user}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">method&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;post&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:method&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;post&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">input&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:field&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;*{name}&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">input&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:field&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;*{msg}&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">input&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;submit&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">form&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="循环">循环&lt;/h3>
&lt;p>渲染列表数据是一种非常常见的场景，例如现在有n条记录需要渲染成一个表格&amp;lt;table&amp;gt;，该数据集合必须是可以遍历的，使用th:each标签：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;NAME&amp;lt;/&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;PRICE&amp;lt;/&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;IN STOCK&amp;lt;/&lt;span style="color:#5bc4bf">th&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">tr&lt;/span> &lt;span style="color:#06b6ef">th:each&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;prod : ${prods}&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">td&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${prod.name}&amp;#34;&lt;/span>&amp;gt;Onions&amp;lt;/&lt;span style="color:#5bc4bf">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">td&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${prod.price}&amp;#34;&lt;/span>&amp;gt;2.41&amp;lt;/&lt;span style="color:#5bc4bf">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">td&lt;/span> &lt;span style="color:#06b6ef">th:text&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${prod.inStock}? #{true} : #{false}&amp;#34;&lt;/span>&amp;gt;yes&amp;lt;/&lt;span style="color:#5bc4bf">td&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">tr&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">table&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="条件判断ifunless">条件判断If/Unless&lt;/h3>
&lt;p>Thymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，&lt;code>&amp;lt;a&amp;gt;&lt;/code>标签只有在th:if中条件成立时才显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">a&lt;/span> &lt;span style="color:#06b6ef">th:href&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/login}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:unless&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">${session.user&lt;/span> &lt;span style="color:#ef6155">!=&lt;/span> &lt;span style="color:#06b6ef">null&lt;/span>&lt;span style="color:#ef6155">}&lt;/span>&amp;gt;Login&amp;lt;/&lt;span style="color:#5bc4bf">a&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。&lt;/p>
&lt;h3 id="switch">Switch&lt;/h3>
&lt;p>Thymeleaf同样支持多路选择Switch结构，默认属性default可以用*表示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">div&lt;/span> &lt;span style="color:#06b6ef">th:switch&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;${user.role}&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">p&lt;/span> &lt;span style="color:#06b6ef">th:case&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#39;admin&amp;#39;&amp;#34;&lt;/span>&amp;gt;User is an administrator&amp;lt;/&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">p&lt;/span> &lt;span style="color:#06b6ef">th:case&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;#{roles.manager}&amp;#34;&lt;/span>&amp;gt;User is a manager&amp;lt;/&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">p&lt;/span> &lt;span style="color:#06b6ef">th:case&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;*&amp;#34;&lt;/span>&amp;gt;User is some other thing&amp;lt;/&lt;span style="color:#5bc4bf">p&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#5bc4bf">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="thymeleaf配置">Thymeleaf配置&lt;/h2>
&lt;p>可在&lt;strong>resources/application.properties&lt;/strong> 中对Thymeleaf进行配置，配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Enable template caching.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.cache&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Check that the templates location exists.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.check-template-location&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Content-Type value.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.content-type&lt;span style="color:#5bc4bf">=&lt;/span>text/html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Enable MVC Thymeleaf view resolution.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.enabled&lt;span style="color:#5bc4bf">=&lt;/span>true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Template encoding.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.encoding&lt;span style="color:#5bc4bf">=&lt;/span>UTF-8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Comma-separated list of view names that should be excluded from resolution.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.excluded-view-names&lt;span style="color:#5bc4bf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.mode&lt;span style="color:#5bc4bf">=&lt;/span>HTML5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Prefix that gets prepended to view names when building a URL.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.prefix&lt;span style="color:#5bc4bf">=&lt;/span>classpath:/templates/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71"># Suffix that gets appended to view names when building a URL.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spring.thymeleaf.suffix&lt;span style="color:#5bc4bf">=&lt;/span>.html spring.thymeleaf.template-resolver-order&lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#776e71"># Order of the template resolver in the chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Spring Boot快速入门（二）——REST风格API的Controller编写与项目启动</title><link>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8CREST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84Controller%E7%BC%96%E5%86%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/</link><pubDate>Sat, 26 Nov 2016 15:59:05 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8CREST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84Controller%E7%BC%96%E5%86%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/</guid><description>&lt;h2 id="使用spring-boot">使用Spring Boot&lt;/h2>
&lt;h2 id="编写demo的rest风格controller">编写Demo的REST风格Controller&lt;/h2>
&lt;h4 id="前言">前言&lt;/h4>
&lt;p>在DMP项目中，我们创建了demo分支，其中的com.turingdi.dmp.demo包中存放着这个demo。
这个demo实现一个简单的REST风格的API：&lt;/p>
&lt;ul>
&lt;li>在根页面显示“Hello World”&lt;/li>
&lt;li>POST请求访问/demo/user可插入一条用户（用name参数指定名字），返回该用户信息的JSON（包含后台生成的用户ID）；&lt;/li>
&lt;li>GET请求访问/demo/user/可查询到所有用户的信息；&lt;/li>
&lt;li>GET请求访问/demo/user/&amp;lt;用户ID&amp;gt;可查询到对应用户的信息JSON；&lt;/li>
&lt;li>不使用上述HTTP方法访问的会返回错误。&lt;/li>
&lt;/ul>
&lt;h4 id="编写controller代码">编写Controller代码&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">com.turingdi.dmp.demo&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">io.swagger.annotations.ApiImplicitParam&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">io.swagger.annotations.ApiOperation&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.springframework.web.bind.annotation.*&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.ArrayList&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.HashMap&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.List&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.Map&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.concurrent.atomic.AtomicInteger&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.concurrent.atomic.AtomicLong&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Created by leibniz on 16-11-23
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;/demo&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">UserController&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> AtomicInteger counter &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> AtomicInteger&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Integer&lt;span style="color:#5bc4bf">,&lt;/span> User&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> users &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ApiOperation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;获取用户详细信息&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> notes&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;根据url的id来获取用户详细信息&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ApiImplicitParam&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;用户ID&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> required &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> paramType&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;path&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> dataType &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Integer&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/user/{id}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> method &lt;span style="color:#5bc4bf">=&lt;/span> RequestMethod&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">GET&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> User &lt;span style="color:#06b6ef">greeting&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#5bc4bf">@PathVariable&lt;/span> &lt;span style="color:#fec418">int&lt;/span> id&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> users&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>id&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ApiOperation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;获取用户列表&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> notes&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;获取所有用户&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/user&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> method &lt;span style="color:#5bc4bf">=&lt;/span> RequestMethod&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">GET&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>User&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getUserList&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ArrayList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;(&lt;/span>users&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">values&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ApiOperation&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;创建用户&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> notes&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;根据用户名创建用户&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ApiImplicitParam&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;用户名&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> required &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> dataType &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;String&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> paramType&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;body&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/user&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> method &lt;span style="color:#5bc4bf">=&lt;/span> RequestMethod&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">POST&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> User &lt;span style="color:#06b6ef">newUser&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#5bc4bf">@RequestBody&lt;/span> String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User result &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> User&lt;span style="color:#5bc4bf">(&lt;/span>counter&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">incrementAndGet&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>result&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getId&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span> result&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> result&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">home&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中@RestController指定在Controller上，这样就不需要在每个@RequestMapping方法上加 @ResponseBody，默认返回json格式。
该Controller逻辑比较简单：&lt;/p>
&lt;ul>
&lt;li>访问根路径返回&amp;quot;Hello World!&amp;quot;；&lt;/li>
&lt;li>POST请求访问/user时，生成一个自增的ID，用于生成Greeting对象，保存在一个Map中并返回该对象；Spring Boot回自动将该对象转换成JSON格式再返回；&lt;/li>
&lt;li>GET请求访问/user/用户ID时，从访问路径获取用户ID，然后从Map中获取对应Greeting对象并返回，同样地Spring Boot会将其转换为JSON格式返回。&lt;/li>
&lt;/ul>
&lt;p>注：&lt;/p>
&lt;ul>
&lt;li>一个典型的REST风格API是这样的：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8CREST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84Controller%E7%BC%96%E5%86%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/5.png"
width="600"
height="275"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8CREST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84Controller%E7%BC%96%E5%86%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/5_hu0178227fe69055d2799dbbfe731954f3_7830_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BA%8CREST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84Controller%E7%BC%96%E5%86%99%E4%B8%8E%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/5_hu0178227fe69055d2799dbbfe731954f3_7830_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>&lt;/li>
&lt;li>可以使用Swagger2快速构建RESTful API文档，并支持在线发送请求调试API：http://blog.didispace.com/springbootswagger2/。&lt;/li>
&lt;/ul>
&lt;h3 id="启动项目">启动项目&lt;/h3>
&lt;h4 id="直接运行入口类">直接运行入口类&lt;/h4>
&lt;p>在IDE中配置、直接运行入口类com.turingdi.dmp.DMPStarter。&lt;/p>
&lt;h4 id="打包jar运行">打包jar运行&lt;/h4>
&lt;p>使用mvn package命令进行打包，并使用以下命令执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar target/***.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们的入口类加上了7.@SpringBootApplication注解，并在Maven中配置了spring-boot-maven-plugin插件，因此在打jar包的时候会自动设置jar包中的META-INF/MAINFEST.MF中配置好jar包的入口类，无需我们在pom.xml文件中额外配置。&lt;/p>
&lt;h4 id="使用spring-boot的maven插件运行">使用Spring Boot的Maven插件运行&lt;/h4>
&lt;p>执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> mvn spring-boot:run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可。这也是spring-boot-maven-plugin插件起到的作用。&lt;/p>
&lt;h4 id="热交换">热交换&lt;/h4>
&lt;p>由于Spring Boot在打包的时候将内置tomcat一并打包，所以我们无法直接更新项目文件让tomcat重新加载。Spring Boot提供了Spring Loaded实现热交换。
在pom.xml中增加以下依赖即可:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-devtools&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;optional&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/optional&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后项目运行时，更新源代码之后，重新编译（如IDEA中按快捷键Ctrl+F9）即可在控制台看到Spring Boot重新加载了新编译后的文件。&lt;/p></description></item><item><title>Spring Boot快速入门（一）——介绍与基础Demo</title><link>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/</link><pubDate>Sat, 26 Nov 2016 15:58:33 +0800</pubDate><guid>https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/</guid><description>&lt;p>因为团队新项目需要，最近研究了一下Spring Boot + RESTful API + Thymeleaf，总结了一份文档，也放到博客里贡献。&lt;/p>
&lt;h2 id="spring-boot概述">Spring Boot概述&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Spring Boot简化了基于Spring的应用开发，你只需要&amp;quot;run&amp;quot;就能创建一个独立的，产品级别的Spring应用。我们为Spring平台及第三方库提供开箱即用的设置，这样你就可以有条不紊地开始。多数Spring Boot应用只需要很少的Spring配置。&lt;br>
你可以使用Spring Boot创建Java应用，并使用java -jar启动它或采用传统的war部署方式。我们也提供了一个运行&amp;quot;spring脚本&amp;quot;的命令行工具。&lt;/p>
&lt;h3 id="特性">特性&lt;/h3>
&lt;p>Spring Boot主要的目标是：&lt;/p>
&lt;ul>
&lt;li>为所有Spring开发提供一个从根本上更快，且随处可得的入门体验。&lt;/li>
&lt;li>开箱即用，但通过不采用默认设置可以快速摆脱这种方式。&lt;/li>
&lt;li>提供一系列大型项目常用的非功能性特征，比如：内嵌服务器，安全，指标，健康检测，外部化配置。&lt;/li>
&lt;li>绝对没有代码生成，也不需要XML配置。&lt;/li>
&lt;/ul>
&lt;h3 id="文档api">文档/API&lt;/h3>
&lt;p>目前Spring Boot最新的Release版本为1.4.2。&lt;br>
官方文档：&lt;br>
&lt;a class="link" href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener"
>http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/&lt;/a>&lt;br>
民间翻译的中文文档：&lt;br>
&lt;a class="link" href="http://udn.yyuap.com/doc/Spring-Boot-Reference-Guide/I.%20Spring%20Boot%20Documentation/index.html" target="_blank" rel="noopener"
>http://udn.yyuap.com/doc/Spring-Boot-Reference-Guide/I.%20Spring%20Boot%20Documentation/index.html&lt;/a>&lt;br>
官方API：&lt;br>
&lt;a class="link" href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/api/" target="_blank" rel="noopener"
>http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/api/&lt;/a>&lt;/p>
&lt;h2 id="使用spring-boot">使用Spring Boot&lt;/h2>
&lt;p>本文的Demo可从git@turing:DMPWeb.git的demo分支（未公开于互联网）下载。&lt;/p>
&lt;h3 id="创建spring-boot项目">创建Spring Boot项目&lt;/h3>
&lt;h4 id="intellij-idea">IntelliJ IDEA&lt;/h4>
&lt;ol>
&lt;li>点击菜单File &amp;ndash;&amp;gt; New &amp;ndash;&amp;gt; Project；&lt;/li>
&lt;li>弹出的窗口中，左边栏选择Spring Initializr，右边选择JDK版本（通过配置也可以运行在JDK6上，但建议JDK7以上，最好JDK8）和初始化服务的URL（按默认的https://start.spring.io 即可），点击Next；&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/1.png"
width="848"
height="459"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/1_hu0b48701cd1b6921db30afb81bdf723c4_12286_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/1_hu0b48701cd1b6921db30afb81bdf723c4_12286_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/li>
&lt;li>配置项目的基本信息，与平常Maven配置差不多，点击Next：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/2.png"
width="753"
height="466"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/2_hu34e27ea67223343566e19c08959b60db_8752_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/2_hu34e27ea67223343566e19c08959b60db_8752_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="387px"
>&lt;/li>
&lt;li>选择项目需要的依赖，Web项目可选择Web下的Web（会带上内置Tomcat和Spring MVC的依赖），不选也可以，后期手动修改pom.xml增加依赖是等效的：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/3.png"
width="859"
height="550"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/3_huf3803f6499283b9112a736322a8fc28f_16516_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/3_huf3803f6499283b9112a736322a8fc28f_16516_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="374px"
>&lt;/li>
&lt;li>点击Next，等待IDEA下载并初始化项目。&lt;/li>
&lt;/ol>
&lt;p>注：其实IDEA这种创建Spring Boot的方法，相当于自己去访问https://start.spring.io ，按页面提示选择了版本、项目信息和插件依赖之后，下载zip，解压导入到IDEA项目中。只不过IDEA帮你完成了下载和解压导入项目这一步而已。&lt;/p>
&lt;h4 id="通用的项目创建方法">通用的项目创建方法&lt;/h4>
&lt;p>任意一个IDE（在此省略截图），选择新建Maven项目，普通项目即可，填写项目基本信息后，修改pom.xml文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;project&lt;/span> &lt;span style="color:#06b6ef">xmlns=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">xmlns:xsi=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#06b6ef">xsi:schemaLocation=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;modelVersion&amp;gt;&lt;/span>4.0.0&lt;span style="color:#5bc4bf">&amp;lt;/modelVersion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>com.turingdi&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>dmpweb&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>0.0.1-SNAPSHOT&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;packaging&amp;gt;&lt;/span>jar&lt;span style="color:#5bc4bf">&amp;lt;/packaging&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>DMPWeb&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;description&amp;gt;&lt;/span>Data Manage Platform&lt;span style="color:#5bc4bf">&amp;lt;/description&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.4.2.RELEASE&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;relativePath/&amp;gt;&lt;/span> &lt;span style="color:#776e71">&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;java.version&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/java.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 核心模块，包括自动配置支持、日志和YAML等--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 测试模块，包括JUnit、Hamcrest、Mockito等--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-test&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Web模块，包括Spring MVC、内置Tomcat等--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>. &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-maven-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后compile等待下载依赖即可。
为提高Maven依赖下载速度，请配置本地Nexus镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>public&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>public&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>http://172.16.99.235:8081/nexus/content/groups/public/&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;snapshots&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;enabled&amp;gt;&lt;/span>true&lt;span style="color:#5bc4bf">&amp;lt;/enabled&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;updatePolicy&amp;gt;&lt;/span>always&lt;span style="color:#5bc4bf">&amp;lt;/updatePolicy&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/snapshots&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编写项目入口类">编写项目入口类&lt;/h3>
&lt;h4 id="入口类的位置">入口类的位置&lt;/h4>
&lt;p>Spring Boot官方文档建议将入口类（包含main方法的类）放在项目根包下，如com.turingdi.dmp.DMPStarter，下图是一个典型的Spring Boot项目结构，注意DMPStarter类在项目中的位置：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/4.png"
width="212"
height="181"
srcset="https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/4_hu20da724b6f0aad69332271d617a30a02_2688_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Spring-Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%9F%BA%E7%A1%80Demo/4_hu20da724b6f0aad69332271d617a30a02_2688_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;br>
这样做的好处是使用@ComponentScan注解时可以使用默认value、无需额外指定扫描根包名的参数；而Spring Boot还提供了一个注解，包含了无参数的@ComponentScan注解及几个常用的注解，亦即在这样的项目结构下，入口类只需要一个注解即可。&lt;/p>
&lt;h4 id="写入口类代码">写入口类代码&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">com.turingdi.dmp&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.springframework.boot.SpringApplication&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.springframework.boot.autoconfigure.*&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.springframework.context.annotation.*&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@SpringBootApplication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">DMPStarter&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">main&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String&lt;span style="color:#5bc4bf">[]&lt;/span> args&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpringApplication&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>DMPStarter&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">class&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> args&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中@SpringBootApplication注解等价于以默认属性使用@Configuration，@EnableAutoConfiguration和@ComponentScan，作用分别为①@Configuration：当前类可以使用 Spring IoC 容器作为 bean 定义的来源；②@EnableAutoConfiguration：根据项目依赖的jar包自动配置；③@ComponentScan：注解自动收集所有Spring组件。&lt;br>
main()方法中调用SpringApplication的run()静态方法来启动Spring Boot，具体的工作为：&lt;/p>
&lt;ol>
&lt;li>根据classspath创建合适的ApplicationContext；&lt;/li>
&lt;li>注册CommandLinePropertySource生成命令行参数；&lt;/li>
&lt;li>刷新application context，载入所有bean；&lt;/li>
&lt;li>运行CommandLineRunner bean。&lt;/li>
&lt;/ol>
&lt;p>参数中选择启动的带@SpringBootApplication注解的类，一般按上面的常规写法就可以，暂时无需深入理解。&lt;/p></description></item><item><title>Redis性能调优——Pipeline、主从复制、Lua脚本等</title><link>https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/</link><pubDate>Sat, 26 Nov 2016 14:01:02 +0800</pubDate><guid>https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/</guid><description>&lt;p>这篇也是组内分享的文档，整理了之前两篇Netty+Redis的文章，加入了一些Redis调优相关的命令和内容。&lt;/p>
&lt;h2 id="redis性能瓶颈">Redis性能瓶颈&lt;/h2>
&lt;h3 id="tcp连接">TCP连接&lt;/h3>
&lt;p>Redis协议基于TCP/IP协议，受限于TCP连接建立的速度（三次握手等），及网络中数据传输的速度。&lt;/p>
&lt;h3 id="数据包大小">数据包大小&lt;/h3>
&lt;p>Redis官方的一项测试显示，对于1k~10k以下的数据，Redis的吞吐量变化并不明显，吞吐量曲线在1k~10k左右出现拐点，如下图。&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/1.png"
width="662"
height="461"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/1_huae3739b158ac574ede9203810d0e3c4f_14804_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/1_huae3739b158ac574ede9203810d0e3c4f_14804_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;h3 id="单线程">单线程&lt;/h3>
&lt;p>Redis服务器为C语言编写，使用异步非阻塞IO，目前坚持使用单线程（可能出于线程锁的效率考虑）。对于高并发访问+多核CPU场景而言，并不能充分使用CPU资源，可能发生某核心占用率很高，其他核心空闲，但Redis请求阻塞在队列中的情况。&lt;br>
搭建Redis集群可以解决该问题，但集群节点间访问引起的网络IO延时又带来新的问题。&lt;/p>
&lt;h2 id="redis性能监控测试">Redis性能监控/测试&lt;/h2>
&lt;h3 id="info命令">info命令&lt;/h3>
&lt;p>redis-cli中输入info可以显示当前Redis服务器的全部状态信息。这些信息按照内容被分成了很多部分，可以用额外的参数来单独获取，如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">参数名&lt;/th>
&lt;th style="text-align:left">说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">server&lt;/td>
&lt;td style="text-align:left">获取 server 信息，包括 version, OS, port 等信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">clients&lt;/td>
&lt;td style="text-align:left">获取 clients 信息，如客户端连接数等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">memory&lt;/td>
&lt;td style="text-align:left">获取 server 的内存信息，包括当前内存消耗、内存使用峰值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">persistence&lt;/td>
&lt;td style="text-align:left">获取 server 的持久化配置信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">stats&lt;/td>
&lt;td style="text-align:left">获取 server 的一些基本统计信息，如处理过的连接数量等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">replication&lt;/td>
&lt;td style="text-align:left">获取 server 的主从配置信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">cpu&lt;/td>
&lt;td style="text-align:left">获取 server 的 CPU 使用信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">keyspace&lt;/td>
&lt;td style="text-align:left">获取 server 中各个 DB 的 key 的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">cluster&lt;/td>
&lt;td style="text-align:left">获取集群节点信息，仅在开启集群后可见&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">commandstats&lt;/td>
&lt;td style="text-align:left">获取每种命令的统计信息，非常有用&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="slowlog命令">slowlog命令&lt;/h3>
&lt;p>redis.conf中配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> slowlog-log-slower-than &lt;span style="color:#f99b15">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slowlog-max-len &lt;span style="color:#f99b15">128&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>意为：如果一条命令的响应时间超过了 10000us (即 10ms) ，那么将会作为 &amp;ldquo;slow command&amp;rdquo; 被记录，并且将只保留最新的128条记录。&lt;br>
在redis-cli中使用slowlog get N可以显示最新产生的N条慢操作：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/2.png"
width="278"
height="91"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/2_hue73097dbe905c3b1c2195a46cef04135_3972_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/2_hue73097dbe905c3b1c2195a46cef04135_3972_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="305"
data-flex-basis="733px"
>&lt;br>
每条语句有四个描述字段，分别表示慢日志序号（最新的记录被展示在最前面）、这条记录被记录时的时间戳、这条命令的响应时间（单位：us 微秒）、这条命令的内容。&lt;br>
可以根据slowlog的记录优化对应的语句。&lt;/p>
&lt;h3 id="bigkeys命令">bigkeys命令&lt;/h3>
&lt;p>使用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>redis-cli -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; --bigkeys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这条命令会从指定的 Redis DB 中持续采样，实时输出当时得到的 value 占用空间最大的 key 值，并在最后给出各种数据结构的 biggest key 的总结报告，如下图：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/3.png"
width="673"
height="646"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/3_hub089a628b13afa38bffb2e2c4121c535_64570_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/3_hub089a628b13afa38bffb2e2c4121c535_64570_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;h3 id="latency命令">latency命令&lt;/h3>
&lt;p>使用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>redis-cli -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; --latency-history
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-cli -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; --latency
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>区别仅在于：前者每隔15秒生成一条记录（这15秒内的测试结果），后者持续更新测试结果，如下图：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/4.png"
width="652"
height="133"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/4_hu8eb1b28e9fc83dee92cfb5f4d9720d49_15842_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/4_hu8eb1b28e9fc83dee92cfb5f4d9720d49_15842_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="490"
data-flex-basis="1176px"
>&lt;/p>
&lt;h3 id="redis-benchmark测试">redis-benchmark测试&lt;/h3>
&lt;p>使用方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>redis-benchmark -h &amp;lt;host&amp;gt; -p &amp;lt;port&amp;gt; -c &amp;lt;并发数&amp;gt; -n &amp;lt;请求次数&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行后，redis-benchmark会对各个命令分别进行测试，测试结果较长，在此截取部分如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/5.png"
width="348"
height="214"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/5_hu3a941fce91b3a5aed7470d18b62238b8_6920_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/5_hu3a941fce91b3a5aed7470d18b62238b8_6920_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;h3 id="第三方统计分析工具redis-stat">第三方统计分析工具redis-stat&lt;/h3>
&lt;p>redis-stat采用ruby开发，利用redis-cli info 提供的原始数据，给用户提供基于文本列表或web图表方式展现的各种关键数据。
redis-stat 开源网址: &lt;a class="link" href="https://github.com/junegunn/redis-stat" target="_blank" rel="noopener"
>https://github.com/junegunn/redis-stat&lt;/a>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/6.png"
width="687"
height="366"
srcset="https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/6_hu80e03b156dadeb75c088820daa26894d_25906_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Redis%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98Pipeline%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6Lua%E8%84%9A%E6%9C%AC%E7%AD%89/6_hu80e03b156dadeb75c088820daa26894d_25906_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;h2 id="redis性能调优">Redis性能调优&lt;/h2>
&lt;h3 id="使用pipeline">使用Pipeline&lt;/h3>
&lt;p>对于Redis读写，有很大一部分的耗时是在网络IO上，尤其是Redis(集群)与应用不在一台服务器上时；此时，对于一些连续的操作，尽量使用pipeline批处理。若批量的命令使用到的key要求在执行过程中不被其他请求修改，则需要用redis事务，效率还是比pipeline低。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Jedis jedis &lt;span style="color:#5bc4bf">=&lt;/span> RedisUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getSingleJedis&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//获取Jedis连接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>Pipeline pl &lt;span style="color:#5bc4bf">=&lt;/span> jedis&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">pipelined&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>&lt;span style="color:#776e71">//获取Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>Response&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> resp1 &lt;span style="color:#5bc4bf">=&lt;/span> pl&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">“&lt;/span>key1&lt;span style="color:#ef6155">”&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//Pipeline压入命令并保存Response引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>Response&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> resp2 &lt;span style="color:#5bc4bf">=&lt;/span> pl&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">“&lt;/span>key2&lt;span style="color:#ef6155">”&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pl&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sync&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>&lt;span style="color:#776e71">//Pipeline执行批处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">“&lt;/span>key1&lt;span style="color:#ef6155">’&lt;/span>s value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#ef6155">”&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> resp1&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>&lt;span style="color:#776e71">//从Response获取执行结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">“&lt;/span>key2&lt;span style="color:#ef6155">’&lt;/span>s value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#ef6155">”&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> resp2&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RedisUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>pl&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//关闭Pipeline
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>RedisUtils&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>jedis&lt;span style="color:#5bc4bf">);&lt;/span>&lt;span style="color:#776e71">//关闭Jedis连接
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要注意的是Pipeline一次传输的key或数据也不宜过多，参考本文1.2小节。&lt;/p>
&lt;h3 id="使用lua脚本">使用Lua脚本&lt;/h3>
&lt;p>灵活利用Lua脚本，可减少Redis的网络IO。Redis支持在服务器上运行Lua脚本完成一些简单运算。Redis尽管对Lua脚本有很多限制，但的确能提高效率，对于一些Redis原生API不能满足的批量操作，比如读取多个key再进行简单计算，如果将这些key的值分别读取到本地，再进行计算，会发生多次网络IO，那么可以用上面的pipeline，而效率更高的方法是将这些计算写成Lua脚本。&lt;br>
我们的RTB目前使用Lua脚本的流程如下：&lt;/p>
&lt;ol>
&lt;li>配置一个监听Servlet上下文初始化的Listener（com.turingdi.rtb.service. PropertiesLoadListener），执行读取配置文件、Redis连接等初始化操作；&lt;/li>
&lt;li>/该Listener初始化Redis时，将指定的多个Lua脚本文件读入内存（com.turingdi.rtb.utils.RedisUtils的loadScripts()）；&lt;/li>
&lt;li>使用Redis的SCRIPTLOAD命令，将Lua脚本加载到Redis服务器，返回一个SHA码，保存到RedisUtils类中；&lt;/li>
&lt;li>竞价过程中需要调用Lua脚本时，调用Redis的EVALSHA命令，使用初始化时拿到的SHA进行Lua脚本调用，返回计算结果。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">--计算QPS，QPS这个key只保留1s，不存在的时候设置为1并设置生命周期为1，存在的时候直接加1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">local&lt;/span> isExist &lt;span style="color:#5bc4bf">=&lt;/span> redis.call(&lt;span style="color:#48b685">&amp;#39;EXISTS&amp;#39;&lt;/span>, &lt;span style="color:#48b685">&amp;#39;QPS&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> isExist &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#f99b15">0&lt;/span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redis.call(&lt;span style="color:#48b685">&amp;#39;INCR&amp;#39;&lt;/span>, &lt;span style="color:#48b685">&amp;#39;QPS&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redis.call(&lt;span style="color:#48b685">&amp;#39;EXPIRE&amp;#39;&lt;/span>, &lt;span style="color:#48b685">&amp;#39;QPS&amp;#39;&lt;/span>, &lt;span style="color:#48b685">&amp;#39;1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redis.call(&lt;span style="color:#48b685">&amp;#39;INCR&amp;#39;&lt;/span>, &lt;span style="color:#48b685">&amp;#39;QPS&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">--处理请求数和响应数的统计&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis.call(&lt;span style="color:#48b685">&amp;#39;INCR&amp;#39;&lt;/span>, KEYS[&lt;span style="color:#f99b15">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> ARGV[&lt;span style="color:#f99b15">1&lt;/span>] &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#39;1&amp;#39;&lt;/span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redis.call(&lt;span style="color:#48b685">&amp;#39;INCR&amp;#39;&lt;/span>, KEYS[&lt;span style="color:#f99b15">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本文不对Lua脚本进行详细阐述，有需要的可以参照以下网页/文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://redisdoc.com/script/index.html" target="_blank" rel="noopener"
>http://redisdoc.com/script/index.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.oschina.net/translate/intro-to-lua-for-redis-programmers" target="_blank" rel="noopener"
>https://www.oschina.net/translate/intro-to-lua-for-redis-programmers&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://origin.redisbook.com/feature/scripting.html" target="_blank" rel="noopener"
>http://origin.redisbook.com/feature/scripting.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://wiki.jikexueyuan.com/project/redis/lua.html" target="_blank" rel="noopener"
>http://wiki.jikexueyuan.com/project/redis/lua.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="使用本地的redis">使用本地的Redis&lt;/h3>
&lt;p>Redis尽量放在本地，减少网络IO时间；对相应时间要求高的，尽量不要用云服务商提供的Redis服务，读写速度比不上本地的。&lt;/p>
&lt;h3 id="主从复制读写分离">主从复制/读写分离&lt;/h3>
&lt;p>Redis放在本地，在服务器集群环境下就有数据同步的问题。之前尝试过很多方案，Redis自己的Ruby集群、Twitter的Twemproxy等等，都不适合RTB使用——这些集群更多地考虑可用性和数据分片、扩容性，但对一些多键操作支持很差，而且也有各种缺陷（如使用Redis自带的Ruby集群，至少3主3从，可以建好3主3从的集群之后，手动移动Slot到同一台主机，删除其他主机，变成1主3从，但这个集群一旦关闭就无法启动）。&lt;br>
考虑到RTB使用的Redis读多写少，所以最后使用的方案是Redis自带的主从复制，集群的不同的服务器之间只需要一台主机作为Redis主机，其他服务器的Redis服务设置slaveof属性，作为其从机。此外，可以将从机的只读属性设为no，但往Slave写入的数据会在下一次同步的时候被Master的数据所覆盖——这样做的目的在于写入一些临时缓存变量。&lt;br>
redis.conf配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> slaveof &amp;lt;Master IP&amp;gt; &amp;lt;Master端口&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> slave-read-only no
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只有一台服务器的情况下，如果是多核服务器（16核及以上），由于Redis是单线程的，只能利用一个CPU内核，只开一个Redis服务实例可能压力很大（可以从CPU占用看出来），此时也可以使用上面提到的主从复制功能，在同一台服务器上开启多个Redis实例分担查询压力，提高并发性能。&lt;br>
Linux系统中，可以使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>taskset -cp &lt;span style="color:#5bc4bf">[&lt;/span>CPU核心号码，从0开始&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>要执行的命令&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来指定要执行的命令在哪些CPU内核上运行，在多核服务器上，可以合理利用此命令来分配CPU资源，如指定多个Redis和Netty分别运行在多个内核上，并指定哪个Netty服务使用哪个Redis服务（需要自己编写Netty服务，读取配置文件，使用不同端口的Redis服务），避免资源浪费和拥挤。&lt;br>
目前RTB在一台服务器上部署了一个Master节点（端口6660）和5个Slave节点（端口6661-6665），即只有一个对外可写入的Redis服务，其他Redis服务只能读，保证了读的性能。启动的脚本如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>kill -9 &lt;span style="color:#815ba4">$(&lt;/span>ps -ef | grep redis-server | grep -v grep | awk &lt;span style="color:#48b685">&amp;#39;{print $2}&amp;#39;&lt;/span>&lt;span style="color:#815ba4">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /usr/local/redis/6660
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>taskset -c &lt;span style="color:#f99b15">0&lt;/span> redis-server redis.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /usr/local/redis/6661
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>taskset -c &lt;span style="color:#f99b15">1&lt;/span> redis-server redis.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…………
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /usr/local/redis/6665
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>taskset -c &lt;span style="color:#f99b15">5&lt;/span> redis-server redis.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="计算缓存">计算缓存&lt;/h3>
&lt;p>Redis指令的优化及自定义计算缓存。利用SLOWLOG我们可以找到执行比较慢的命令，从而进行优化。&lt;br>
比如RTB系统在测试一段时间之后，通过SLOWLOG命令得知耗时较长的都是用户人群标签的并集操作，而这个操作与请求的具体内容有关。所以后来设定了一个计算缓存，通过EXPIRE命令设置缓存的生命周期（随着时间推移，人群标签的计算结果是不一样的，需要定时更新），每次新的请求在计算这一步时，先查询缓存中是否存在计算结果，存在的话直接读取，不存在（全新的计算或旧的已过期）则重新计算并放入运算缓存。（详见com.turingdi.rtb.service.CampaignService）&lt;/p>
&lt;h3 id="压缩key和value">压缩key和value&lt;/h3>
&lt;p>在数据量大的情况下，压缩key和value的长度不管对存储还是网络传输都有利。&lt;/p></description></item><item><title>Nginx常用配置及负载均衡、动静分离</title><link>https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</link><pubDate>Sat, 26 Nov 2016 12:17:21 +0800</pubDate><guid>https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</guid><description>&lt;p>最近总结了一些技术文档，原本用于组内分享的，发到博客里备忘。&lt;/p>
&lt;h2 id="nginx概述">Nginx概述&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Nginx是一个自由、开源、高性能及轻量级的HTTP服务器及反转代理服务器，以其高性能、稳定、功能丰富、配置简单及占用系统资源少而著称。&lt;br>
Nginx 超越 Apache 的高性能和稳定性，使得国内使用 Nginx 作为 Web 服务器的网站也越来越多。&lt;/p>
&lt;h3 id="基础功能">基础功能&lt;/h3>
&lt;ul>
&lt;li>处理静态文件，索引文件以及自动索引；&lt;/li>
&lt;li>反向代理加速(无缓存)，简单的负载均衡和容错；&lt;/li>
&lt;li>FastCGI，简单的负载均衡和容错；&lt;/li>
&lt;li>模块化的结构。过滤器包括gzipping, byte ranges, chunked responses, 以及 SSI-filter 。在SSI过滤器中，到同一个proxy或FastCGI的多个子请求并发处理；&lt;/li>
&lt;li>SSL 和 TLS SNI 支持。&lt;/li>
&lt;/ul>
&lt;h3 id="优势">优势&lt;/h3>
&lt;p>Nginx&lt;strong>专为性能优化而开发&lt;/strong>，性能是其最重要的考量, 实现上非常注重效率 。它支持内核Poll模型，能经受高负载的考验, 有报告表明能支持高达50,000个并发连接数。&lt;br>
Nginx作为负载均衡服务器: Nginx 既可以在&lt;strong>内部直接支持 Rails 和 PHP 程序&lt;/strong>对外进行服务, 也可以&lt;strong>支持作为 HTTP代理服务器&lt;/strong>对外进行服务。&lt;br>
Nginx&lt;strong>具有很高的稳定性&lt;/strong>。其它HTTP服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前apache一旦上到200个以上进程，web响应速度就明显非常缓慢了。而Nginx采取了分阶段资源分配技术，使得它的CPU与内存占用率非常低。&lt;br>
nginx官方表示保持10,000个没有活动的连接，它只占2.5M内存，就稳定性而言, nginx比lighthttpd更胜一筹。&lt;br>
Nginx&lt;strong>支持热部署&lt;/strong>。它的启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。&lt;br>
Nginx采用C进行编写, 不论是&lt;strong>系统资源开销还是CPU使用效率&lt;/strong>都比 Perlbal 要好很多。&lt;/p>
&lt;h1 id="nginx安装">Nginx安装&lt;/h1>
&lt;h3 id="下载">下载&lt;/h3>
&lt;p>到官网下载最新的稳定版：
&lt;a class="link" href="http://nginx.org/en/download.html" target="_blank" rel="noopener"
>nginx: download&lt;/a>&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;p>准备gcc等编译环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install libpcre3 libpcre3-dev openssl libssl-dev make build-essential gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译安装">编译安装&lt;/h3>
&lt;p>将下载到的.tar.gz包解压，进入解压后的目录，输入以下命令进行编译：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可安装到/usr/local/nginx中。&lt;br>
如果需要SSL，可安装OpenSSL，有些Linux发行版自带OpenSSL无需额外安装，需要安装的到OpenSSL官网下载.tar.gz包解压编译即可。&lt;/p>
&lt;h3 id="启动关闭">启动&amp;amp;关闭&lt;/h3>
&lt;h4 id="启动">启动&lt;/h4>
&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo /usr/local/nginx/sbin/nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动Nginx。&lt;br>
一般make install后会安装到PATH中，可以直接执行sudo nginx。
执行nginx -v显示Nginx版本。&lt;/p>
&lt;h4 id="重新加载配置文件">重新加载配置文件&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nginx -s reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关闭">关闭&lt;/h4>
&lt;p>Nginx没有提供关闭的方法，只能通过ps找到进程ID后，用kill命令关闭。&lt;br>
如 强制退出 sudo kill-9 [PID]，或发送其他退出的指令如TERM。&lt;br>
注：nginx包含worker和master两个进程，强制关闭时两者均需关闭：
&lt;img src="https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process.png"
width="569"
height="61"
srcset="https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process_hufd9fac45deb26eff39a4bb948c61313c_6290_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process_hufd9fac45deb26eff39a4bb948c61313c_6290_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="932"
data-flex-basis="2238px"
>&lt;/p>
&lt;h2 id="nginx配置">Nginx配置&lt;/h2>
&lt;p>下面以DSP业务平台的Nginx配置为例进行讲解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#user nobody;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>worker_processes 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#根据CPU核数设定worker工作的CPU核心mask&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#worker_cpu_affinity 1000;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log notice;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log info;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#pid logs/nginx.pid;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>events &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker_connections 1024;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> include mime.types;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default_type application/octet-stream;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log_format mylog &lt;span style="color:#48b685">&amp;#39;$remote_addr$time_local$request$http_referer$status$body_bytes_sent$request_time&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> access_log logs/access.log mylog &lt;span style="color:#ef6155">buffer&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>32k &lt;span style="color:#ef6155">flush&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendfile on;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#tcp_nopush on;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#keepalive_timeout 0;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keepalive_timeout 1000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#gzip on;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name iad.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://dsp:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name tag.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://tag:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name cm.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">## proxy_redirect off;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://cm:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="基本配置">基本配置&lt;/h3>
&lt;h4 id="user">user&lt;/h4>
&lt;ul>
&lt;li>语法: user user [group]&lt;/li>
&lt;li>缺省值: nobody nobody&lt;br>
指定Nginx Worker进程运行用户，默认是nobody帐号。&lt;/li>
&lt;/ul>
&lt;h4 id="error_log">error_log&lt;/h4>
&lt;ul>
&lt;li>语法: error_log file [ debug | info | notice | warn | error | crit ]&lt;/li>
&lt;li>缺省值: ${prefix}/logs/error.log&lt;br>
制定错误日志的存放位置和级别。&lt;/li>
&lt;/ul>
&lt;h4 id="worker_processes">worker_processes&lt;/h4>
&lt;ul>
&lt;li>语法: worker_processes number&lt;/li>
&lt;li>缺省值: 1&lt;br>
指定工作进程数。nginx可以使用多个worker进程。&lt;/li>
&lt;/ul>
&lt;h4 id="worker_cpu_affinity">worker_cpu_affinity&lt;/h4>
&lt;ul>
&lt;li>语法: 3.1.4.worker_cpu_affinity cpumask&lt;br>
执行Nginx在哪个/些CPU上工作，默认由系统接管（可以在所有核心上运行）。&lt;br>
如，有8个CPU线程（包括超线程），指定使用第0个CPU则配置为00000001，指定使用第7和第1个CPU线程则配置为10000010。&lt;/li>
&lt;/ul>
&lt;h3 id="event模块">Event模块&lt;/h3>
&lt;p>Nginx的默认配置中包含一个默认的Event模块，其中只包含worker_connections配置。&lt;/p>
&lt;h3 id="worker_connections">worker_connections&lt;/h3>
&lt;ul>
&lt;li>语法：worker_connections number&lt;br>
每个worker的最大连接数。通过worker_connections和worker_proceses可以计算出maxclients： max_clients = worker_processes * worker_connections。作为反向代理，max_clients为： max_clients = worker_processes * worker_connections/4，因为浏览器访问时会通过连接池建立多个连接。&lt;/li>
&lt;/ul>
&lt;h3 id="http模块">HTTP模块&lt;/h3>
&lt;p>Nginx最常用的是HTTP模块。&lt;/p>
&lt;h4 id="基本配置-1">基本配置&lt;/h4>
&lt;p>HTTP中大部分基本配置无需修改，除了：&lt;/p>
&lt;ul>
&lt;li>keepalive_timeout 1000;配置Keep-Alive的超时，单位为秒；&lt;/li>
&lt;li>gzip on;配置是否开启Gzip压缩，开启后可以提高网站访问速度；&lt;/li>
&lt;li>log_format 配置日志格式，access_log配置日志路径和使用的格式，在此不细述。&lt;/li>
&lt;/ul>
&lt;h4 id="server作用域">server作用域&lt;/h4>
&lt;p>HTTP模块中最常配置的是server作用域。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name cm.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_pass http://cm:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="listen">listen&lt;/h5>
&lt;ul>
&lt;li>语法: listen address:port&lt;/li>
&lt;li>默认值： listen 80&lt;/li>
&lt;li>作用域: server
指定当前虚拟机的监听端口。&lt;/li>
&lt;/ul>
&lt;h5 id="server_name">server_name&lt;/h5>
&lt;p>当前server匹配的用户请求路径的主机名，主要用于配置基于名称的虚拟主机，支持通配符&lt;em>和正则表达式（以波浪线~起头）。&lt;br>
server_name指令在接到请求后的匹配顺序分别为：准确的server_name匹配，以&lt;/em>通配符开始的字符串，以&lt;em>通配符结束的字符串、匹配正则表达式。nginx按以上顺序依次匹配，只要有一项匹配以后就会停止搜索。&lt;br>
举例： 先后配置了两个server， server_name分别配置为cm.turing.asia和&lt;/em>.turing.asia，当用户请求cm.turing.asia时，访问第一个server，用户访问test.turing.asia时访问第二个server。&lt;/p>
&lt;h5 id="location">location&lt;/h5>
&lt;ul>
&lt;li>语法：location 匹配字符串 { 操作语句 }&lt;/li>
&lt;/ul>
&lt;p>一个server中可以有多个location，用于匹配请求路径。&lt;br>
匹配的优先级与server_name相同。&lt;br>
location的操作语句中：&lt;br>
可以用proxy_set_header设定/增加HTTP请求头。上面的例子中，用proxy_set_header real_ip $remote_addr;将远程主机的真实IP加到HTTP请求头的real_ip字段中，因为收到Nginx转发的服务器读取到的远程主机IP为Nginx的IP，丢失了真实的用户IP信息，所以在此加上。&lt;/p>
&lt;p>location中还可以使用if语句结合正则表达式进行请求的判断，比如根据请求中的Refer和请求资源类型，使用&lt;strong>valid_referers&lt;/strong>禁用外站Refer的图片资源请求，以实现防盗链，在此不细述。&lt;br>
更常用的是proxy_pass 作反向代理，将请求转发到指定的服务器。&lt;br>
在上面的例子中，因为同一台Tomcat服务器中有多个项目，而经过Nginx转发的请求，会将请求的主机替代为proxy_pass中配置的主机，所以如果proxy_pass中填写的是Tomcat服务器的内网地址，则Tomcat无法分辨用户原本想访问的域名，亦即难以在server.xml中配置不同的域名绑定不同项目。&lt;br>
因此，我们在Nginx的服务器中配置hosts，将多个自定义的主机名绑定到Tomcat服务器的IP中；同时，在Nginx的配置中，location的proxy_pass不再配置为Tomcat服务器的IP而是hosts中我们设定的server_name对应的主机名。最后Tomcat的server.xml也相应地配置Host节点的name属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;!--Tomcat服务器的server.xml 片段：--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;Host&lt;/span> &lt;span style="color:#06b6ef">name=&lt;/span>&lt;span style="color:#48b685">&amp;#34;cm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">appBase=&lt;/span>&lt;span style="color:#48b685">&amp;#34;cmserv&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">unpackWARs=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">autoDeploy=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　　&lt;span style="color:#5bc4bf">&amp;lt;Context&lt;/span> &lt;span style="color:#06b6ef">path=&lt;/span>&lt;span style="color:#48b685">&amp;#34;turingcm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">docBase=&lt;/span>&lt;span style="color:#48b685">&amp;#34;turingcm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">reloadable=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/Host&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="负载均衡配置">负载均衡配置&lt;/h3>
&lt;p>首先在HTTP模块中定义多台服务器构成的负载均衡：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>upstream rtb&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8080 &lt;span style="color:#ef6155">weight&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8081 &lt;span style="color:#ef6155">weight&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> …………
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8085 backup;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每台服务器为一行，填写IP和端口，并在weight中填入负载均衡的权重（正整数，默认为1），注意分号。以上例子将该负载均衡配置命名为”rtb”。IP和端口后面填backup的表示备用服务器，当其他非backup的服务器均忙或宕机时，会分发请求到backup服务器上。&lt;br>
然后在location中，配置&lt;strong>proxy_pass http://[负载均衡名];&lt;/strong> 即可，即该server和location定义的域名规则和访问路径规则匹配到的请求将按weight分发到以上几台服务器/服务中。&lt;/p>
&lt;h3 id="动静分离">动静分离&lt;/h3>
&lt;p>tomcat是一个比较全面的web容器，对静态网页的处理，应该是比较费资源的，特别是每次都要从磁盘读取静态页面，然后返回。这中间会消耗Tomcat的资源，可能会使那些动态页面解析性能影响。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>//静态资源
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>location ~ .*&lt;span style="color:#f99b15">\.&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>js|css|htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma&lt;span style="color:#5bc4bf">)&lt;/span>$ &lt;span style="color:#5bc4bf">{&lt;/span> //静态资源到nginx服务器下static获取
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root static;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expires 30d; //设置缓存期限
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //动态资源
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location ~ .*$ &lt;span style="color:#5bc4bf">{&lt;/span> //动态请求转发到tomcat服务器
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_pass http://127.0.0.1:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>动静分离的原理：Nginx配置中，通过location的配置，结合正则表达式，根据请求路径判断当前请求是否静态资源，如果是，则通过** root static;** 配置直接读取/usr/local/nginx/static下面对应相对路径的资源。如果是jsp等动态资源，则转发到Tomcat服务器。&lt;br>
注意，可以使用** root [绝对路径];**， 不一定要将静态资源放在Nginx目录下。
这里将静态资源的location放在前面优先匹配（同样是正则匹配的情况下）。&lt;br>
在此基础上，也可以通过不同的正则对不同的静态资源类型配置不同的缓存期限，如创意等图片可能会变动，缓存期限设小一点，而js/css等静态资源基本不变，缓存期限可以设长一点。&lt;/p></description></item><item><title>Netty+Redis开发高并发应用的一些思考(二)</title><link>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%BA%8C/</link><pubDate>Sun, 11 Sep 2016 15:48:06 +0800</pubDate><guid>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%BA%8C/</guid><description>&lt;p>上一篇&lt;a class="link" href="https://leibnizhu.github.io/p/Netty-Redis%e5%bc%80%e5%8f%91%e9%ab%98%e5%b9%b6%e5%8f%91%e5%ba%94%e7%94%a8%e7%9a%84%e4%b8%80%e4%ba%9b%e6%80%9d%e8%80%83%e4%b8%80/" >《Netty+Redis开发高并发应用的一些思考(一)》&lt;/a>提及到Redis的优化，最近一个月的开发调测和部署又有了一些新的想法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Redis尽量放在本地，减少网络IO时间；对相应时间要求高的，尽量不要用云服务商提供的Redis服务，别人的服务再好，读写速度也比不上本地的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redis放在本地，在服务器集群环境下就有数据同步的问题。之前尝试过很多方案，Redis自己的Ruby集群、Twitter的Twemproxy等等，都不适合我们的应用场景——这些集群更多地考虑可用性和数据分片、扩容性，但对一些多键操作支持很差，而且也有各种缺陷（如使用Redis自带的Ruby集群，至少3主3从，可以建好3主3从的集群之后，手动移动Slot到同一台主机，删除其他主机，变成1主3从，但这个集群一旦关闭就很难启动起来。）。&lt;/p>
&lt;p>寻寻觅觅，最后发现Redis自带的原始主从复制最适合我们，集群的不同的服务器之间只需要一台主机作为Redis主机，其他服务器的Redis服务设置slaveof属性，作为其从机。
此外，可以将从机的只读属性设为no，但往Slave写入的数据会在下一次同步的时候被Master的数据所覆盖——这样做的目的在于写入一些临时缓存变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只有一台服务器的情况下，如果是多核服务器（16核及以上），由于Redis是单线程的，只能利用一个CPU内核，只开一个Redis服务实例可能压力很大（可以从CPU占用看出来），此时也可以使用上面提到的主从复制功能，在同一台服务器上开启多个Redis实例分担查询压力，提高并发性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux系统中，可以使用&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>taskset -cp &lt;span style="color:#5bc4bf">[&lt;/span>CPU核心号码，从0开始&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>要执行的命令&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>来指定要执行的命令在哪些CPU内核上运行，在多核服务器上，可以合理利用此命令来分配CPU资源，如指定多个Redis和Netty分别运行在多个内核上，并指定哪个Netty服务使用哪个Redis服务（需要自己编写Netty服务，读取配置文件，使用不同端口的Redis服务），避免资源浪费和拥挤。
&lt;/code>&lt;/pre>
&lt;ol start="5">
&lt;li>Redis指令的优化及自定义计算缓存。在Redis官网文档和很多微博都对SLOWLOG命令有介绍，在此不细述细节。利用SLOWLOG我们可以找到执行比较慢的命令，从而进行优化。比如我们的系统在测试一段时间之后，通过SLOWLOG命令得知耗时较长的都是某一步并集操作，而这个操作与请求的具体内容有关，所以后来我为之设了一个缓存，通过EXPIRE命令设置缓存的生命周期（随着时间推移这个计算的结果是不一样的，需要更新），每次新的请求在计算这一步时，先查询缓存中是否存在计算结果，存在的话直接读取，不存在（全新的计算或旧的已过期）则重新计算并放入运算缓存。&lt;/li>
&lt;/ol></description></item><item><title>提高Gmail代收POP3邮件的频率</title><link>https://leibnizhu.github.io/p/%E6%8F%90%E9%AB%98Gmail%E4%BB%A3%E6%94%B6POP3%E9%82%AE%E4%BB%B6%E7%9A%84%E9%A2%91%E7%8E%87/</link><pubDate>Fri, 12 Aug 2016 15:02:43 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%8F%90%E9%AB%98Gmail%E4%BB%A3%E6%94%B6POP3%E9%82%AE%E4%BB%B6%E7%9A%84%E9%A2%91%E7%8E%87/</guid><description>&lt;p>工作电脑是Linux系统，没有什么顺手的Email客户端（ThunderBird会反复接收同样的邮件、最后收件箱里一大堆重复的邮件真不想再吐槽了），而公司邮箱是疼讯企业邮箱，WebUI不忍直视，所以选择了Gmail的POP3代收，Chrome长期开着web版，打开消息通知。&lt;/p>
&lt;p>问题就来了，Gmail会根据POP3代收邮箱的来件频率动态调整其收件频率，这也是可以理解的，因为POP3代收没法推送只能主动收件，如果可以随便设收件频率，那大家都设成1分钟一收，那Gmail服务器的负载也太大了。虽然这样的设定合理，而我的邮箱收件频率也不算高，最终大概是半小时收一次，有时候甚至是40-50min，这样突发的紧急邮件就很容易错过。&lt;/p>
&lt;p>Google了一下，解决方案有三：&lt;/p>
&lt;ol>
&lt;li>订阅大量邮件，刺激Gmail提高收件频率；同时在Gmail里设置过滤器将这些订阅的邮件删除。但是要定期去被代收的邮箱里去清理，也要小心被代收的邮箱容量问题。&lt;/li>
&lt;li>与解决方案1类似，自己写脚本定时给被代收邮箱发邮件，但容易被被代收邮箱拉黑，其余缺点也一样有。&lt;/li>
&lt;li>Chrome安装&lt;a class="link" href="http://www.danielslaughter.com/projects/gmail-pop3-checker-for-greasemonkey/#install" target="_blank" rel="noopener"
>Gmail POP3 Checker插件&lt;/a>（需要先安装TemperMonkey）,可以设置POP3代收频率。&lt;/li>
&lt;/ol>
&lt;p>前两种方法显然太烂，选择第3种。安装插件后发现免费版不能自由设定收件频率，只能是默认的12分钟，虽然比Gmail自己的快了不少，但还是不满足。而捐献的话至少5刀，太贵了，1刀的话我就给了。于是想办法自己弄吧。&lt;/p>
&lt;p>我的解决方案很简单，在Chrome控制台写入一段JS代码，定期进入POP3代收管理页面，触发手动收件的点击事件，最后再返回到收件箱页面即可，代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>window.&lt;span style="color:#06b6ef">setInterval&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">href&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;https://mail.google.com/mail/u/0/#settings/accounts&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">exitTime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Date().&lt;span style="color:#06b6ef">getTime&lt;/span>() &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">5000&lt;/span>; &lt;span style="color:#776e71">//5秒后再执行，以免页面加载慢
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">while&lt;/span> (&lt;span style="color:#815ba4">new&lt;/span> Date().&lt;span style="color:#06b6ef">getTime&lt;/span>() &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#06b6ef">exitTime&lt;/span>) {;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">checkEmails&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> document.&lt;span style="color:#06b6ef">getElementsByClassName&lt;/span>(&lt;span style="color:#48b685">&amp;#39;rP sA&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(&lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#06b6ef">checkEmails&lt;/span>.&lt;span style="color:#06b6ef">length&lt;/span>; &lt;span style="color:#06b6ef">i&lt;/span>&lt;span style="color:#5bc4bf">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">checkEmails&lt;/span>[&lt;span style="color:#06b6ef">i&lt;/span>].&lt;span style="color:#06b6ef">click&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">href&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;https://mail.google.com/mail/u/0/#inbox&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">*&lt;/span>&lt;span style="color:#f99b15">60&lt;/span>&lt;span style="color:#5bc4bf">*&lt;/span>&lt;span style="color:#f99b15">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实可以写成Chrome扩展的，我就懒了，毕竟Chrome一直开着，很少要重新开Gmail页面。&lt;/p></description></item><item><title>Netty+Redis开发高并发应用的一些思考(一)</title><link>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</link><pubDate>Wed, 27 Jul 2016 21:40:22 +0800</pubDate><guid>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</guid><description>&lt;p>一个开发中的高并发应用原来部署在tomcat上，但这个应用基于HTTP协议，但并非tomcat所擅长的web服务；在启用了tomcat自带的nio模式后，效率还是不高，所以选择了尝试Netty。&lt;/p>
&lt;p>在缓存方面，一直以来都是使用Redis，为了满足高并发的需求，Redis也需要作一些优化。&lt;/p>
&lt;p>下面就简单总结一下在开发过程中的一些想法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对于Redis读写，有很大一部分的耗时是在网络IO上，尤其是Redis(集群)与应用不在一台服务器上时；此时，对于一些连续的操作，尽量使用pipeline批处理，当然前提是这一系列操作对先后顺序没有要求，因为pipeline是将命令打包一起发送，执行顺序可能没有保证的。若批量的命令对执行顺序有要求，建议用redis事务，效率还是比pipeline低很多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灵活利用lua脚本，减少Redis的网络IO。Redis尽管对Lua脚本有很多限制，但的确能提高效率，对于一些Redis原生API不能满足的批量操作，比如读取多个key再进行简单计算，如果将这些key的值分别读取到本地，再进行计算，会发生多次网络IO，那么可以用上面的pipeline，而效率更高的方法是将这些计算写成Lua脚本，使用其SHA（可以在应用初始化的时候加载所有用到的Lua脚本，保存SHA，在线计算时直接拿SHA）调用直接返回计算结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于我们的应用，Netty相比Tomcat更为轻量化，毕竟只是一个NIO框架，省去了不必要的中间层。值得注意的是，协议处理和业务逻辑应该尽量解耦，协议处理由Netty完成，包括TCP拆包粘包处理、HTTP协议处理、业务应用的底层协议处理，都可以编写成Netty的Handler进行处理；但业务逻辑本身的处理不建议放在Handler中，一来逻辑上架构上不清晰，耦合度太高，二来一些耗时长的业务逻辑（往往需要数据库IO）会阻塞Eventloop，阻塞后面的channel。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Netty中的业务逻辑，我的做法是在Handler中将解析出来的请求以及一个DefaultPromise实例封装成对象，压入业务处理的等待队列中，并在Handler中增加Promise的Listener监听器监听业务处理完成的情况，完成则写入响应；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> Object msg&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>msg &lt;span style="color:#815ba4">instanceof&lt;/span> BidRequest&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//创建一个Promise
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> promise &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;(&lt;/span>ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">executor&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//打包成任务对象并加入处理队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">offer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> BidMission&lt;span style="color:#5bc4bf">((&lt;/span>BidRequest&lt;span style="color:#5bc4bf">)&lt;/span>msg&lt;span style="color:#5bc4bf">,&lt;/span> promise&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//增加监听器，等任务处理完成之后将BidResponse写入响应
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> promise&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addListener&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> PromiseNotifier&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">,&lt;/span>DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">operationComplete&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> future&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>future&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isSuccess&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>future&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channel&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外使用线程池管理CPU内核数个业务处理线程，从业务等待队列中获取任务对象，进行业务逻辑处理；处理完成之后通过Promise通知任务完成，并放入任务处理结果（响应）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">BidHandleThread&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Runnable &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> DEFAULT_RANGE_FOR_SLEEP &lt;span style="color:#5bc4bf">=&lt;/span> 50&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">// 随机休眠时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">BidHandleThread&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">bidQueueStack&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Random r &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 从队列弹出数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> BidMission mission &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 0&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mission &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">poll&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sleep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>r&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>DEFAULT_RANGE_FOR_SLEEP&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">continue&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> mission&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 此处为具体的业务处理过程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//通过Promise通知任务完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> mission&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPromise&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">setSuccess&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adxResp&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 打印数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;队列剩余数据数量：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>至于业务处理的线程池内，线程之间对数据库的访问应该还有进一步优化的空间。之前的一个设想是一个业务线程发起Redis访问的时候，把当前线程休眠，让其他线程进行数据库访问以外的业务处理（计算）；等待Redis响应后才苏醒，参与到其他线程之间对时间片的争夺。这样保证数据库IO是饱和的（应该也是业务逻辑处理中耗时最多的部分）。但还没实现。
或者将所有数据库访问都放在一个任务队列中，也是通过Promise监听-通知的方法，实现数据库的异步访问。&lt;/li>
&lt;/ol></description></item><item><title>Gitolite管理用户权限的Shell脚本</title><link>https://leibnizhu.github.io/p/Gitolite%E7%AE%A1%E7%90%86%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9A%84Shell%E8%84%9A%E6%9C%AC/</link><pubDate>Wed, 20 Jul 2016 20:32:32 +0800</pubDate><guid>https://leibnizhu.github.io/p/Gitolite%E7%AE%A1%E7%90%86%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9A%84Shell%E8%84%9A%E6%9C%AC/</guid><description>&lt;p>最近给公司的git服务器从http协议升级为ssh协议的，同时增加了gitolite作为权限管理。但gitolite在增删用户公钥、增删用户对项目的权限、以及新增repository时的操作说不上繁杂但也是蛮机械的；又不想用gitlab之类重型的解决方案，所以选择了编写Shell脚本来实现。&lt;/p>
&lt;h2 id="增加用户公钥的脚本">增加用户公钥的脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>echo &lt;span style="color:#48b685">&amp;#34;增加/修改 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 的公钥 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.pub……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gitolite-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ef6155">$2&lt;/span> &amp;gt; keydir/&lt;span style="color:#ef6155">$1&lt;/span>.pub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;增加/修改 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 的公钥 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.pub……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除用户公钥的脚本">删除用户公钥的脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>echo &lt;span style="color:#48b685">&amp;#34;删除 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 的公钥 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.pub……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gitolite-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm keydir/&lt;span style="color:#ef6155">$1&lt;/span>.pub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;删除 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 的公钥 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.pub……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="增加用户对指定代码仓库的读写权限">增加用户对指定代码仓库的读写权限&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#776e71">#增加指定用户对指定代码仓库的读写权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第1个参数为用户名，对应公钥pub文件的文件名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第2个参数为repository名，对应/home/git/repositories下的文件夹名（不包含.git后缀）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;增加 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 对项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 的权限……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gitolite-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#找到要修改的行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat conf/gitolite.conf | &lt;span style="color:#815ba4">while&lt;/span> read line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>expr &lt;span style="color:#ef6155">$row&lt;/span> + 1&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$isTarget&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#f99b15">1&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$line&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$line&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span>~ &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 已经拥有 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 项目的读写权限&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#正式修改&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">reg&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">s/&lt;/span>$&lt;span style="color:#48b685">/&amp;amp;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> /g&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">reg&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> conf/gitolite.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> break
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#ef6155">$line&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span>~ &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">line&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;增加 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 对项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 的权限……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除用户对指定代码仓库的读写权限">删除用户对指定代码仓库的读写权限&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#776e71">#删除指定用户对指定代码仓库的读写权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第1个参数为用户名，对应公钥pub文件的文件名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第2个参数为repository名，对应/home/git/repositories下的文件夹名（不包含.git后缀）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;删除 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 对项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 的权限……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gitolite-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#找到要修改的行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat conf/gitolite1.conf | &lt;span style="color:#815ba4">while&lt;/span> read line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>expr &lt;span style="color:#ef6155">$row&lt;/span> + 1&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$isTarget&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#f99b15">1&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$line&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$line&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span>~ &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#删对应用户&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">reg&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">row&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">s/&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> //g&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sed -i &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">reg&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> conf/gitolite1.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> break
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 原来就没有 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 项目的读写权限&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[[&lt;/span> &lt;span style="color:#ef6155">$line&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span>~ &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#ef6155">line&lt;/span>&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">isTarget&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;删除 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 对项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 的权限……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="新增一个代码仓库并初始化其权限">新增一个代码仓库，并初始化其权限&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#776e71">#新增一个代码仓库并初始化权限管理文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第1个参数为该项目初始分配的用户名，对应公钥pub文件的文件名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第2个参数为repository名，对应/home/git/repositories下的文件夹名（不包含.git后缀）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第3个参数为项目在权限配置文件中的注释&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;新增项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 并初始化……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/repositories
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> -d &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 已存在，请选择另一个项目名……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;no exists&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init --bare &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#修改权限文件，增加默认管理员权限和初始化的用户权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;## &lt;/span>&lt;span style="color:#ef6155">$3&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/git/gitolite-admin/conf/gitolite1.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;repo &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/git/gitolite-admin/conf/gitolite1.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34; RW = &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> &amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/git/gitolite-admin/conf/gitolite1.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34; RW+ = @admin&amp;#34;&lt;/span> &amp;gt;&amp;gt; /home/git/gitolite-admin/conf/gitolite1.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;增加项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 并初始化，同时增加用户 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 对其的读写权限……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#初始化.gitignore文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gittmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@172.16.99.235:&lt;span style="color:#ef6155">$2&lt;/span>.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd &lt;span style="color:#ef6155">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;#filter class/binary file&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/build/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/target/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/bin/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;## filter eclipse file&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;*.classpath&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;*.project&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/.settings/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;## filter IntelliJ IDEA file&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;*.iml&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/.idea/&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;#filter temp file&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;*.tmp&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;/~&lt;/span>&lt;span style="color:#ef6155">$*&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;.~*&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;*.log&amp;#34;&lt;/span> &amp;gt;&amp;gt; .gitignore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;初始化项目的.gitignore文件，忽略常见无用文件&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;项目 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685"> 创建成功&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="重命名项目并修改对应权限配置文件">重命名项目并修改对应权限配置文件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#776e71">#修改代码仓库的名字，同时更新权限配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第1个参数为原repository名，对应/home/git/repositories下的文件夹名（不包含.git后缀）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#第2个参数为repository名，对应/home/git/repositories下的文件夹名（不包含.git后缀）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;重命名项目 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 为 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/repositories
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> ! -d &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;项目 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 不存在，请选择另一个项目名……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit &lt;span style="color:#f99b15">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#更改目录名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mv &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span> &lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#修改权限文件，增加默认管理员权限和初始化的用户权限&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#48b685">&amp;#34;s/&lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>$&lt;span style="color:#48b685">/&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">/g&amp;#34;&lt;/span> /home/git/gitolite-admin/conf/gitolite.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;新的项目URL为：git@172.30.16.235:&lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">.git&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd /home/git/gitolite-admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#48b685">&amp;#34;重命名项目 &lt;/span>&lt;span style="color:#ef6155">$1&lt;/span>&lt;span style="color:#48b685"> 为 &lt;/span>&lt;span style="color:#ef6155">$2&lt;/span>&lt;span style="color:#48b685">……&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Bash on Windows开启Ubuntu unity和Xfce4桌面的方法</title><link>https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 16 Jul 2016 17:09:46 +0800</pubDate><guid>https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>&lt;p>本文参照Github上的&lt;a class="link" href="https://github.com/Microsoft/BashOnWindows/issues/637" target="_blank" rel="noopener"
>Run any Desktop Environment in WSL&lt;/a>、结合本人实际安装操作而编写。&lt;/p>
&lt;h2 id="安装bash-on-windows">安装Bash on Windows&lt;/h2>
&lt;p>首先安装Bash on Windows，可以参考 &lt;a class="link" href="https://linux.cn/article-7209-1.html" target="_blank" rel="noopener"
>如何安装体验 Ubuntu on Windows&lt;/a> 一文。按照这篇文章安装的bash可以直接在开始菜单输入“bash”启动，但是不支持GUI程序的，所以有了本文。&lt;/p>
&lt;h2 id="安装vcxsrv并启动xlaunch">安装VcXsrv并启动XLaunch&lt;/h2>
&lt;p>在 SourceForge:&lt;a class="link" href="https://sourceforge.net/projects/vcxsrv/files/latest/download" target="_blank" rel="noopener"
> https://sourceforge.net/projects/vcxsrv/files/latest/download&lt;/a> 下载安装程序并安装后，运行XLaunch，按下图配置后，一路点Next直至完成。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/0.png"
width="510"
height="414"
srcset="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/0_hub07d5d864d9d28e4d77ce754d1a1ff6d_12722_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/0_hub07d5d864d9d28e4d77ce754d1a1ff6d_12722_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;h2 id="安装-ubuntu-desktop-unity和ccsm并配置">安装 ubuntu-desktop, unity和ccsm并配置&lt;/h2>
&lt;p>打开bash，输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>再打开ccsm:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ccsm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果启动ccsm遇到以下的报错（感谢网友 Event 提供的解决方案）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>AttributeError: &lt;span style="color:#48b685">&amp;#39;NoneType&amp;#39;&lt;/span> object has no attribute &lt;span style="color:#48b685">&amp;#39;get_default_screen&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>解决方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export &lt;span style="color:#ef6155">DISPLAY&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>:0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dconf reset -f /org/compiz/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unity --reset-icons
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按下图勾选需要的模块，然后按Close退出。&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/1.png"
width="990"
height="610"
srcset="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/1_hu20c697be8bf7568c32acca42097d73ab_24276_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/1_hu20c697be8bf7568c32acca42097d73ab_24276_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/2.png"
width="990"
height="612"
srcset="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/2_hu190cea33d40d12c1f88d9a79f7d14975_25900_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/2_hu190cea33d40d12c1f88d9a79f7d14975_25900_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;h2 id="配置bashrc和etcdbus-1sessionconf">配置~/.bashrc和/etc/dbus-1/session.conf&lt;/h2>
&lt;p>在bash输入以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#48b685">&amp;#34;export DISPLAY=:0.0&amp;#34;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sed -i &lt;span style="color:#48b685">&amp;#39;s$&amp;lt;listen&amp;gt;.*&amp;lt;/listen&amp;gt;$&amp;lt;listen&amp;gt;tcp:host=localhost,port=0&amp;lt;/listen&amp;gt;$&amp;#39;&lt;/span> /etc/dbus-1/session.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动unity桌面">启动Unity桌面&lt;/h2>
&lt;p>在bash中输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>compiz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待十几秒之后即可显示Ubuntu桌面。Enjoy it！&lt;/p>
&lt;p>2016-07-19增加：对于XFCE，则是安装xubuntu-desktop或xfce4，与上面同样的步骤，启动的时候输入xfce4-session。
&lt;img src="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/3.png"
width="1920"
height="1080"
srcset="https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/3_hucd3310f27b8ffe363c1a517f5e3142e7_21884_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Bash-on-Windows%E5%BC%80%E5%90%AFUbuntu-unity%E5%92%8CXfce4%E6%A1%8C%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/3_hucd3310f27b8ffe363c1a517f5e3142e7_21884_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p></description></item><item><title>第一篇博客——測試</title><link>https://leibnizhu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%B8%AC%E8%A9%A6/</link><pubDate>Tue, 12 Jul 2016 22:27:03 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%B8%AC%E8%A9%A6/</guid><description>&lt;p>測試一下Gitlab+Hexo搭建靜態博客。&lt;br>
感谢 viosey 提供的Material风格Hexo主题 &lt;a class="link" href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener"
>hexo-theme-material&lt;/a>。&lt;/p></description></item><item><title>Links</title><link>https://leibnizhu.github.io/Links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leibnizhu.github.io/Links/</guid><description>&lt;p>外链招租位。&lt;/p>
&lt;p>请通过Email提供URL、LOGO、简介。&lt;/p></description></item><item><title>Search</title><link>https://leibnizhu.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leibnizhu.github.io/search/</guid><description/></item></channel></rss>