<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并发 on Heaven's Door</title><link>https://leibnizhu.github.io/tags/%E5%B9%B6%E5%8F%91/</link><description>Recent content in 并发 on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Nov 2016 12:17:21 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx常用配置及负载均衡、动静分离</title><link>https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</link><pubDate>Sat, 26 Nov 2016 12:17:21 +0800</pubDate><guid>https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/</guid><description>&lt;p>最近总结了一些技术文档，原本用于组内分享的，发到博客里备忘。&lt;/p>
&lt;h2 id="nginx概述">Nginx概述&lt;/h2>
&lt;h3 id="简介">简介&lt;/h3>
&lt;p>Nginx是一个自由、开源、高性能及轻量级的HTTP服务器及反转代理服务器，以其高性能、稳定、功能丰富、配置简单及占用系统资源少而著称。&lt;br>
Nginx 超越 Apache 的高性能和稳定性，使得国内使用 Nginx 作为 Web 服务器的网站也越来越多。&lt;/p>
&lt;h3 id="基础功能">基础功能&lt;/h3>
&lt;ul>
&lt;li>处理静态文件，索引文件以及自动索引；&lt;/li>
&lt;li>反向代理加速(无缓存)，简单的负载均衡和容错；&lt;/li>
&lt;li>FastCGI，简单的负载均衡和容错；&lt;/li>
&lt;li>模块化的结构。过滤器包括gzipping, byte ranges, chunked responses, 以及 SSI-filter 。在SSI过滤器中，到同一个proxy或FastCGI的多个子请求并发处理；&lt;/li>
&lt;li>SSL 和 TLS SNI 支持。&lt;/li>
&lt;/ul>
&lt;h3 id="优势">优势&lt;/h3>
&lt;p>Nginx&lt;strong>专为性能优化而开发&lt;/strong>，性能是其最重要的考量, 实现上非常注重效率 。它支持内核Poll模型，能经受高负载的考验, 有报告表明能支持高达50,000个并发连接数。&lt;br>
Nginx作为负载均衡服务器: Nginx 既可以在&lt;strong>内部直接支持 Rails 和 PHP 程序&lt;/strong>对外进行服务, 也可以&lt;strong>支持作为 HTTP代理服务器&lt;/strong>对外进行服务。&lt;br>
Nginx&lt;strong>具有很高的稳定性&lt;/strong>。其它HTTP服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前apache一旦上到200个以上进程，web响应速度就明显非常缓慢了。而Nginx采取了分阶段资源分配技术，使得它的CPU与内存占用率非常低。&lt;br>
nginx官方表示保持10,000个没有活动的连接，它只占2.5M内存，就稳定性而言, nginx比lighthttpd更胜一筹。&lt;br>
Nginx&lt;strong>支持热部署&lt;/strong>。它的启动特别容易, 并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。&lt;br>
Nginx采用C进行编写, 不论是&lt;strong>系统资源开销还是CPU使用效率&lt;/strong>都比 Perlbal 要好很多。&lt;/p>
&lt;h1 id="nginx安装">Nginx安装&lt;/h1>
&lt;h3 id="下载">下载&lt;/h3>
&lt;p>到官网下载最新的稳定版：
&lt;a class="link" href="http://nginx.org/en/download.html" target="_blank" rel="noopener"
>nginx: download&lt;/a>&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;p>准备gcc等编译环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt-get install libpcre3 libpcre3-dev openssl libssl-dev make build-essential gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译安装">编译安装&lt;/h3>
&lt;p>将下载到的.tar.gz包解压，进入解压后的目录，输入以下命令进行编译：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>即可安装到/usr/local/nginx中。&lt;br>
如果需要SSL，可安装OpenSSL，有些Linux发行版自带OpenSSL无需额外安装，需要安装的到OpenSSL官网下载.tar.gz包解压编译即可。&lt;/p>
&lt;h3 id="启动关闭">启动&amp;amp;关闭&lt;/h3>
&lt;h4 id="启动">启动&lt;/h4>
&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo /usr/local/nginx/sbin/nginx
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动Nginx。&lt;br>
一般make install后会安装到PATH中，可以直接执行sudo nginx。
执行nginx -v显示Nginx版本。&lt;/p>
&lt;h4 id="重新加载配置文件">重新加载配置文件&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo nginx -s reload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关闭">关闭&lt;/h4>
&lt;p>Nginx没有提供关闭的方法，只能通过ps找到进程ID后，用kill命令关闭。&lt;br>
如 强制退出 sudo kill-9 [PID]，或发送其他退出的指令如TERM。&lt;br>
注：nginx包含worker和master两个进程，强制关闭时两者均需关闭：
&lt;img src="https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process.png"
width="569"
height="61"
srcset="https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process_hufd9fac45deb26eff39a4bb948c61313c_6290_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/process_hufd9fac45deb26eff39a4bb948c61313c_6290_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="932"
data-flex-basis="2238px"
>&lt;/p>
&lt;h2 id="nginx配置">Nginx配置&lt;/h2>
&lt;p>下面以DSP业务平台的Nginx配置为例进行讲解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#user nobody;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>worker_processes 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#根据CPU核数设定worker工作的CPU核心mask&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#worker_cpu_affinity 1000;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log notice;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#error_log logs/error.log info;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#pid logs/nginx.pid;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>events &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker_connections 1024;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>http &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> include mime.types;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> default_type application/octet-stream;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log_format mylog &lt;span style="color:#48b685">&amp;#39;$remote_addr$time_local$request$http_referer$status$body_bytes_sent$request_time&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> access_log logs/access.log mylog &lt;span style="color:#ef6155">buffer&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>32k &lt;span style="color:#ef6155">flush&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendfile on;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#tcp_nopush on;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#keepalive_timeout 0;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keepalive_timeout 1000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#gzip on;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name iad.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://dsp:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name tag.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://tag:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name cm.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">## proxy_redirect off;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_pass http://cm:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="基本配置">基本配置&lt;/h3>
&lt;h4 id="user">user&lt;/h4>
&lt;ul>
&lt;li>语法: user user [group]&lt;/li>
&lt;li>缺省值: nobody nobody&lt;br>
指定Nginx Worker进程运行用户，默认是nobody帐号。&lt;/li>
&lt;/ul>
&lt;h4 id="error_log">error_log&lt;/h4>
&lt;ul>
&lt;li>语法: error_log file [ debug | info | notice | warn | error | crit ]&lt;/li>
&lt;li>缺省值: ${prefix}/logs/error.log&lt;br>
制定错误日志的存放位置和级别。&lt;/li>
&lt;/ul>
&lt;h4 id="worker_processes">worker_processes&lt;/h4>
&lt;ul>
&lt;li>语法: worker_processes number&lt;/li>
&lt;li>缺省值: 1&lt;br>
指定工作进程数。nginx可以使用多个worker进程。&lt;/li>
&lt;/ul>
&lt;h4 id="worker_cpu_affinity">worker_cpu_affinity&lt;/h4>
&lt;ul>
&lt;li>语法: 3.1.4.worker_cpu_affinity cpumask&lt;br>
执行Nginx在哪个/些CPU上工作，默认由系统接管（可以在所有核心上运行）。&lt;br>
如，有8个CPU线程（包括超线程），指定使用第0个CPU则配置为00000001，指定使用第7和第1个CPU线程则配置为10000010。&lt;/li>
&lt;/ul>
&lt;h3 id="event模块">Event模块&lt;/h3>
&lt;p>Nginx的默认配置中包含一个默认的Event模块，其中只包含worker_connections配置。&lt;/p>
&lt;h3 id="worker_connections">worker_connections&lt;/h3>
&lt;ul>
&lt;li>语法：worker_connections number&lt;br>
每个worker的最大连接数。通过worker_connections和worker_proceses可以计算出maxclients： max_clients = worker_processes * worker_connections。作为反向代理，max_clients为： max_clients = worker_processes * worker_connections/4，因为浏览器访问时会通过连接池建立多个连接。&lt;/li>
&lt;/ul>
&lt;h3 id="http模块">HTTP模块&lt;/h3>
&lt;p>Nginx最常用的是HTTP模块。&lt;/p>
&lt;h4 id="基本配置-1">基本配置&lt;/h4>
&lt;p>HTTP中大部分基本配置无需修改，除了：&lt;/p>
&lt;ul>
&lt;li>keepalive_timeout 1000;配置Keep-Alive的超时，单位为秒；&lt;/li>
&lt;li>gzip on;配置是否开启Gzip压缩，开启后可以提高网站访问速度；&lt;/li>
&lt;li>log_format 配置日志格式，access_log配置日志路径和使用的格式，在此不细述。&lt;/li>
&lt;/ul>
&lt;h4 id="server作用域">server作用域&lt;/h4>
&lt;p>HTTP模块中最常配置的是server作用域。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>server &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> listen 80;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server_name cm.turing.asia;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location / &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">#设置真实ip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_set_header real_ip &lt;span style="color:#ef6155">$remote_addr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_pass http://cm:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="listen">listen&lt;/h5>
&lt;ul>
&lt;li>语法: listen address:port&lt;/li>
&lt;li>默认值： listen 80&lt;/li>
&lt;li>作用域: server
指定当前虚拟机的监听端口。&lt;/li>
&lt;/ul>
&lt;h5 id="server_name">server_name&lt;/h5>
&lt;p>当前server匹配的用户请求路径的主机名，主要用于配置基于名称的虚拟主机，支持通配符&lt;em>和正则表达式（以波浪线~起头）。&lt;br>
server_name指令在接到请求后的匹配顺序分别为：准确的server_name匹配，以&lt;/em>通配符开始的字符串，以&lt;em>通配符结束的字符串、匹配正则表达式。nginx按以上顺序依次匹配，只要有一项匹配以后就会停止搜索。&lt;br>
举例： 先后配置了两个server， server_name分别配置为cm.turing.asia和&lt;/em>.turing.asia，当用户请求cm.turing.asia时，访问第一个server，用户访问test.turing.asia时访问第二个server。&lt;/p>
&lt;h5 id="location">location&lt;/h5>
&lt;ul>
&lt;li>语法：location 匹配字符串 { 操作语句 }&lt;/li>
&lt;/ul>
&lt;p>一个server中可以有多个location，用于匹配请求路径。&lt;br>
匹配的优先级与server_name相同。&lt;br>
location的操作语句中：&lt;br>
可以用proxy_set_header设定/增加HTTP请求头。上面的例子中，用proxy_set_header real_ip $remote_addr;将远程主机的真实IP加到HTTP请求头的real_ip字段中，因为收到Nginx转发的服务器读取到的远程主机IP为Nginx的IP，丢失了真实的用户IP信息，所以在此加上。&lt;/p>
&lt;p>location中还可以使用if语句结合正则表达式进行请求的判断，比如根据请求中的Refer和请求资源类型，使用&lt;strong>valid_referers&lt;/strong>禁用外站Refer的图片资源请求，以实现防盗链，在此不细述。&lt;br>
更常用的是proxy_pass 作反向代理，将请求转发到指定的服务器。&lt;br>
在上面的例子中，因为同一台Tomcat服务器中有多个项目，而经过Nginx转发的请求，会将请求的主机替代为proxy_pass中配置的主机，所以如果proxy_pass中填写的是Tomcat服务器的内网地址，则Tomcat无法分辨用户原本想访问的域名，亦即难以在server.xml中配置不同的域名绑定不同项目。&lt;br>
因此，我们在Nginx的服务器中配置hosts，将多个自定义的主机名绑定到Tomcat服务器的IP中；同时，在Nginx的配置中，location的proxy_pass不再配置为Tomcat服务器的IP而是hosts中我们设定的server_name对应的主机名。最后Tomcat的server.xml也相应地配置Host节点的name属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;!--Tomcat服务器的server.xml 片段：--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;Host&lt;/span> &lt;span style="color:#06b6ef">name=&lt;/span>&lt;span style="color:#48b685">&amp;#34;cm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">appBase=&lt;/span>&lt;span style="color:#48b685">&amp;#34;cmserv&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">unpackWARs=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">autoDeploy=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　　&lt;span style="color:#5bc4bf">&amp;lt;Context&lt;/span> &lt;span style="color:#06b6ef">path=&lt;/span>&lt;span style="color:#48b685">&amp;#34;turingcm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">docBase=&lt;/span>&lt;span style="color:#48b685">&amp;#34;turingcm&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">reloadable=&lt;/span>&lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/Host&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="负载均衡配置">负载均衡配置&lt;/h3>
&lt;p>首先在HTTP模块中定义多台服务器构成的负载均衡：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>upstream rtb&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8080 &lt;span style="color:#ef6155">weight&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8081 &lt;span style="color:#ef6155">weight&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> …………
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server 127.0.0.1:8085 backup;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每台服务器为一行，填写IP和端口，并在weight中填入负载均衡的权重（正整数，默认为1），注意分号。以上例子将该负载均衡配置命名为”rtb”。IP和端口后面填backup的表示备用服务器，当其他非backup的服务器均忙或宕机时，会分发请求到backup服务器上。&lt;br>
然后在location中，配置&lt;strong>proxy_pass http://[负载均衡名];&lt;/strong> 即可，即该server和location定义的域名规则和访问路径规则匹配到的请求将按weight分发到以上几台服务器/服务中。&lt;/p>
&lt;h3 id="动静分离">动静分离&lt;/h3>
&lt;p>tomcat是一个比较全面的web容器，对静态网页的处理，应该是比较费资源的，特别是每次都要从磁盘读取静态页面，然后返回。这中间会消耗Tomcat的资源，可能会使那些动态页面解析性能影响。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>//静态资源
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>location ~ .*&lt;span style="color:#f99b15">\.&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>js|css|htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma&lt;span style="color:#5bc4bf">)&lt;/span>$ &lt;span style="color:#5bc4bf">{&lt;/span> //静态资源到nginx服务器下static获取
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root static;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expires 30d; //设置缓存期限
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> //动态资源
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> location ~ .*$ &lt;span style="color:#5bc4bf">{&lt;/span> //动态请求转发到tomcat服务器
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proxy_pass http://127.0.0.1:8080;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>动静分离的原理：Nginx配置中，通过location的配置，结合正则表达式，根据请求路径判断当前请求是否静态资源，如果是，则通过** root static;** 配置直接读取/usr/local/nginx/static下面对应相对路径的资源。如果是jsp等动态资源，则转发到Tomcat服务器。&lt;br>
注意，可以使用** root [绝对路径];**， 不一定要将静态资源放在Nginx目录下。
这里将静态资源的location放在前面优先匹配（同样是正则匹配的情况下）。&lt;br>
在此基础上，也可以通过不同的正则对不同的静态资源类型配置不同的缓存期限，如创意等图片可能会变动，缓存期限设小一点，而js/css等静态资源基本不变，缓存期限可以设长一点。&lt;/p></description></item><item><title>Netty+Redis开发高并发应用的一些思考(二)</title><link>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%BA%8C/</link><pubDate>Sun, 11 Sep 2016 15:48:06 +0800</pubDate><guid>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%BA%8C/</guid><description>&lt;p>上一篇&lt;a class="link" href="https://leibnizhu.github.io/p/Netty-Redis%e5%bc%80%e5%8f%91%e9%ab%98%e5%b9%b6%e5%8f%91%e5%ba%94%e7%94%a8%e7%9a%84%e4%b8%80%e4%ba%9b%e6%80%9d%e8%80%83%e4%b8%80/" >《Netty+Redis开发高并发应用的一些思考(一)》&lt;/a>提及到Redis的优化，最近一个月的开发调测和部署又有了一些新的想法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Redis尽量放在本地，减少网络IO时间；对相应时间要求高的，尽量不要用云服务商提供的Redis服务，别人的服务再好，读写速度也比不上本地的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redis放在本地，在服务器集群环境下就有数据同步的问题。之前尝试过很多方案，Redis自己的Ruby集群、Twitter的Twemproxy等等，都不适合我们的应用场景——这些集群更多地考虑可用性和数据分片、扩容性，但对一些多键操作支持很差，而且也有各种缺陷（如使用Redis自带的Ruby集群，至少3主3从，可以建好3主3从的集群之后，手动移动Slot到同一台主机，删除其他主机，变成1主3从，但这个集群一旦关闭就很难启动起来。）。&lt;/p>
&lt;p>寻寻觅觅，最后发现Redis自带的原始主从复制最适合我们，集群的不同的服务器之间只需要一台主机作为Redis主机，其他服务器的Redis服务设置slaveof属性，作为其从机。
此外，可以将从机的只读属性设为no，但往Slave写入的数据会在下一次同步的时候被Master的数据所覆盖——这样做的目的在于写入一些临时缓存变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只有一台服务器的情况下，如果是多核服务器（16核及以上），由于Redis是单线程的，只能利用一个CPU内核，只开一个Redis服务实例可能压力很大（可以从CPU占用看出来），此时也可以使用上面提到的主从复制功能，在同一台服务器上开启多个Redis实例分担查询压力，提高并发性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux系统中，可以使用&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>taskset -cp &lt;span style="color:#5bc4bf">[&lt;/span>CPU核心号码，从0开始&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span>要执行的命令&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>来指定要执行的命令在哪些CPU内核上运行，在多核服务器上，可以合理利用此命令来分配CPU资源，如指定多个Redis和Netty分别运行在多个内核上，并指定哪个Netty服务使用哪个Redis服务（需要自己编写Netty服务，读取配置文件，使用不同端口的Redis服务），避免资源浪费和拥挤。
&lt;/code>&lt;/pre>
&lt;ol start="5">
&lt;li>Redis指令的优化及自定义计算缓存。在Redis官网文档和很多微博都对SLOWLOG命令有介绍，在此不细述细节。利用SLOWLOG我们可以找到执行比较慢的命令，从而进行优化。比如我们的系统在测试一段时间之后，通过SLOWLOG命令得知耗时较长的都是某一步并集操作，而这个操作与请求的具体内容有关，所以后来我为之设了一个缓存，通过EXPIRE命令设置缓存的生命周期（随着时间推移这个计算的结果是不一样的，需要更新），每次新的请求在计算这一步时，先查询缓存中是否存在计算结果，存在的话直接读取，不存在（全新的计算或旧的已过期）则重新计算并放入运算缓存。&lt;/li>
&lt;/ol></description></item><item><title>Netty+Redis开发高并发应用的一些思考(一)</title><link>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</link><pubDate>Wed, 27 Jul 2016 21:40:22 +0800</pubDate><guid>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</guid><description>&lt;p>一个开发中的高并发应用原来部署在tomcat上，但这个应用基于HTTP协议，但并非tomcat所擅长的web服务；在启用了tomcat自带的nio模式后，效率还是不高，所以选择了尝试Netty。&lt;/p>
&lt;p>在缓存方面，一直以来都是使用Redis，为了满足高并发的需求，Redis也需要作一些优化。&lt;/p>
&lt;p>下面就简单总结一下在开发过程中的一些想法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对于Redis读写，有很大一部分的耗时是在网络IO上，尤其是Redis(集群)与应用不在一台服务器上时；此时，对于一些连续的操作，尽量使用pipeline批处理，当然前提是这一系列操作对先后顺序没有要求，因为pipeline是将命令打包一起发送，执行顺序可能没有保证的。若批量的命令对执行顺序有要求，建议用redis事务，效率还是比pipeline低很多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灵活利用lua脚本，减少Redis的网络IO。Redis尽管对Lua脚本有很多限制，但的确能提高效率，对于一些Redis原生API不能满足的批量操作，比如读取多个key再进行简单计算，如果将这些key的值分别读取到本地，再进行计算，会发生多次网络IO，那么可以用上面的pipeline，而效率更高的方法是将这些计算写成Lua脚本，使用其SHA（可以在应用初始化的时候加载所有用到的Lua脚本，保存SHA，在线计算时直接拿SHA）调用直接返回计算结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于我们的应用，Netty相比Tomcat更为轻量化，毕竟只是一个NIO框架，省去了不必要的中间层。值得注意的是，协议处理和业务逻辑应该尽量解耦，协议处理由Netty完成，包括TCP拆包粘包处理、HTTP协议处理、业务应用的底层协议处理，都可以编写成Netty的Handler进行处理；但业务逻辑本身的处理不建议放在Handler中，一来逻辑上架构上不清晰，耦合度太高，二来一些耗时长的业务逻辑（往往需要数据库IO）会阻塞Eventloop，阻塞后面的channel。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Netty中的业务逻辑，我的做法是在Handler中将解析出来的请求以及一个DefaultPromise实例封装成对象，压入业务处理的等待队列中，并在Handler中增加Promise的Listener监听器监听业务处理完成的情况，完成则写入响应；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>ChannelHandlerContext ctx&lt;span style="color:#5bc4bf">,&lt;/span> Object msg&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>msg &lt;span style="color:#815ba4">instanceof&lt;/span> BidRequest&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//创建一个Promise
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> promise &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;(&lt;/span>ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">executor&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//打包成任务对象并加入处理队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">offer&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> BidMission&lt;span style="color:#5bc4bf">((&lt;/span>BidRequest&lt;span style="color:#5bc4bf">)&lt;/span>msg&lt;span style="color:#5bc4bf">,&lt;/span> promise&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//增加监听器，等任务处理完成之后将BidResponse写入响应
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> promise&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">addListener&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> PromiseNotifier&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">,&lt;/span>DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">operationComplete&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> future&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> Exception &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>future&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isSuccess&lt;/span>&lt;span style="color:#5bc4bf">()){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>future&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">channel&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外使用线程池管理CPU内核数个业务处理线程，从业务等待队列中获取任务对象，进行业务逻辑处理；处理完成之后通过Promise通知任务完成，并放入任务处理结果（响应）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">BidHandleThread&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Runnable &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> DEFAULT_RANGE_FOR_SLEEP &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#f99b15">50&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span> &lt;span style="color:#776e71">// 随机休眠时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">BidHandleThread&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">bidQueueStack&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Random r &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 从队列弹出数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> BidMission mission &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mission &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">poll&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">sleep&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>r&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextInt&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>DEFAULT_RANGE_FOR_SLEEP&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">continue&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> mission&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 此处为具体的业务处理过程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//通过Promise通知任务完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> mission&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPromise&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">setSuccess&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>adxResp&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 打印数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;队列剩余数据数量：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> bidQueueStack&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">size&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>Exception e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>至于业务处理的线程池内，线程之间对数据库的访问应该还有进一步优化的空间。之前的一个设想是一个业务线程发起Redis访问的时候，把当前线程休眠，让其他线程进行数据库访问以外的业务处理（计算）；等待Redis响应后才苏醒，参与到其他线程之间对时间片的争夺。这样保证数据库IO是饱和的（应该也是业务逻辑处理中耗时最多的部分）。但还没实现。
或者将所有数据库访问都放在一个任务队列中，也是通过Promise监听-通知的方法，实现数据库的异步访问。&lt;/li>
&lt;/ol></description></item></channel></rss>