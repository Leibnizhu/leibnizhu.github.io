<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SpringMVC on Heaven's Door</title><link>https://leibnizhu.github.io/tags/SpringMVC/</link><description>Recent content in SpringMVC on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Jul 2017 15:26:32 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/SpringMVC/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringMVC中的WebSocket开发</title><link>https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 29 Jul 2017 15:26:32 +0800</pubDate><guid>https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/SpringMVC%E4%B8%AD%E7%9A%84WebSocket%E5%BC%80%E5%8F%91/snow.png" alt="Featured image of post SpringMVC中的WebSocket开发" />&lt;h1 id="springmvc中的websocket开发">SpringMVC中的WebSocket开发
&lt;/h1>&lt;h2 id="websocket简介">WebSocket简介
&lt;/h2>&lt;h3 id="websocket背景">WebSocket背景
&lt;/h3>&lt;p>在WebSocket出现之前，服务器的状态更新想要通知客户端，只能由客户端发起轮询（如Ajax）， 即在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客服端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。
WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。WebSocket通讯协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。
在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。WebSocket不仅允许服务器和客户端双向通信，而且互相沟通的Header是很小的-大概只有 2 Bytes。&lt;/p>
&lt;h3 id="支持情况">支持情况
&lt;/h3>&lt;ul>
&lt;li>Spring： Spring从4.0开始加入了spring-websocket这个模块，并能够全面支持WebSocket，它与Java WebSocket API标准（JSR-356）保持一致，同时提供了额外的服务。&lt;/li>
&lt;li>浏览器：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">浏览器&lt;/th>
&lt;th style="text-align: center">支持的版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">Chrome&lt;/td>
&lt;td style="text-align: center">4+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Firefox&lt;/td>
&lt;td style="text-align: center">4+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Internet Explorer&lt;/td>
&lt;td style="text-align: center">10+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Opera&lt;/td>
&lt;td style="text-align: center">10+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Safari&lt;/td>
&lt;td style="text-align: center">5+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>服务端：&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">服务器&lt;/th>
&lt;th style="text-align: center">支持的版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">jetty&lt;/td>
&lt;td style="text-align: center">7.0.1+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">tomcat&lt;/td>
&lt;td style="text-align: center">7.0.27+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Nginx&lt;/td>
&lt;td style="text-align: center">1.3.13+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">resin&lt;/td>
&lt;td style="text-align: center">4+&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="java-实现方法">Java 实现方法
&lt;/h3>&lt;p>在 Spring 端可以有以下几种方法使用 WebSocket：&lt;/p>
&lt;ol>
&lt;li>使用 Java EE7 的方式&lt;/li>
&lt;li>使用 Spring 提供的接口&lt;/li>
&lt;li>使用 STOMP 协议以及 Spring 的 MVC&lt;/li>
&lt;/ol>
&lt;p>本文使用Spring提供的接口，实现起来比较简单。&lt;/p>
&lt;h3 id="适用场景">适用场景
&lt;/h3>&lt;p>客户端和服务器需要 &lt;strong>高频率&lt;/strong> &lt;strong>低延迟&lt;/strong> 交换事件的时候。基本的候选包括但不限于，金融、游戏、合作、以及其他应用。这些应用对时间延迟很敏感，还需要以高频率交换大量的消息。&lt;/p>
&lt;h2 id="spring-mvc的websocket开发实战">Spring MVC的WebSocket开发实战
&lt;/h2>&lt;h3 id="nginx配置">Nginx配置
&lt;/h3>&lt;p>我们知道，WebSocket握手需要在HTTP请求头里增加&lt;code>Upgrade&lt;/code>和&lt;code>Connection&lt;/code>字段，以便向服务申请将连接升级为WebSocket。&lt;br>
但如果tomcat服务器使用了Nginx作为反向代理，那么默认是不会转发这两个请求头的，所以需要手动设置这两个HTTP请求头。&lt;br>
应在&lt;code>nginx.conf&lt;/code>对应域名&lt;code>server&lt;/code>配置里面的&lt;code>location&lt;/code>配置中增加：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy_set_header Upgrade &lt;span style="color:#ef6155">$http_upgrade&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy_set_header Connection &lt;span style="color:#48b685">&amp;#34;upgrade&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heading">
&lt;/h3>&lt;h3 id="maven依赖">Maven依赖
&lt;/h3>&lt;p>在pom.xml文件中增加以下依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-websocket&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spring-version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="websocket相关的类">WebSocket相关的类
&lt;/h3>&lt;h4 id="实现websocketconfigurer">实现WebSocketConfigurer
&lt;/h4>&lt;p>对Spring WebSocket进行配置，可以通过xml配置文件的方式，也可以通过实现WebSocketConfigurer接口进行配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableWebSocket&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketConfig&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> WebMvcConfigurerAdapter &lt;span style="color:#815ba4">implements&lt;/span> WebSocketConfigurer {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">registerWebSocketHandlers&lt;/span>(WebSocketHandlerRegistry registry) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registry.&lt;span style="color:#06b6ef">addHandler&lt;/span>(SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>(),&lt;span style="color:#48b685">&amp;#34;/webSocketServer&amp;#34;&lt;/span>) &lt;span style="color:#776e71">//注册WebSocket处理的类的、及监听/映射路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">addInterceptors&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> WebSocketHandshakeInterceptor()); &lt;span style="color:#776e71">//注册WebSocket握手的拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registry.&lt;span style="color:#06b6ef">addHandler&lt;/span>(SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>(), &lt;span style="color:#48b685">&amp;#34;/sockjs/webSocketServer&amp;#34;&lt;/span>) &lt;span style="color:#776e71">//注册WebSocket处理的类的、及监听/映射路径&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">addInterceptors&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> WebSocketHandshakeInterceptor()) &lt;span style="color:#776e71">//注册WebSocket握手的拦截器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">withSockJS&lt;/span>(); &lt;span style="color:#776e71">//设定支持SockJS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们设置了两个监听的路径，第一个是传统的WebSocket，第二个是支持SockJS的。SockJS是一个JavaScript库，提供跨浏览器JavaScript的API，创建了一个低延迟、全双工的浏览器和web服务器之间通信通道。SockJS的API的命名方式基本上也和 WebSocket 一样，并且支持自动降级到AJAX轮询（降级顺序依次为：websocket -&amp;gt; html strea m -&amp;gt; long polling -&amp;gt; ajaxjsonp），因此可以很好地跨浏览器工作。
在配置文件里，我们设定了&lt;code>SystemWebSocketHandler&lt;/code>类（实现&lt;code>WebSocketHandler&lt;/code>接口，类似Controller）作为WebSocket各种事件的处理器，以及设定&lt;code>WebSocketHandshakeInterceptor&lt;/code>类（实现&lt;code>HandshakeInterceptor&lt;/code>接口）作为WebSocket协议握手的拦截器，这两个类时我们自己实现的，将在下文细述。&lt;/p>
&lt;h4 id="实现websockethandler接口">实现WebSocketHandler接口
&lt;/h4>&lt;p>WebSocketHandler接口为WebSocket事件处理器接口，有以下方法需要实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">WebSocketHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接建立后的回调方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionEstablished&lt;/span>(WebSocketSession var1) &lt;span style="color:#815ba4">throws&lt;/span> Exception;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//接收到WebSocket消息后的处理方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleMessage&lt;/span>(WebSocketSession var1, WebSocketMessage&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> var2) &lt;span style="color:#815ba4">throws&lt;/span> Exception;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket传输发生错误时的处理方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleTransportError&lt;/span>(WebSocketSession var1, Throwable var2) &lt;span style="color:#815ba4">throws&lt;/span> Exception;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接关闭后的回调方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionClosed&lt;/span>(WebSocketSession var1, CloseStatus var2) &lt;span style="color:#815ba4">throws&lt;/span> Exception;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//是否处理WebSocket分段消息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">supportsPartialMessages&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于业务逻辑而言，我们主要关注&lt;code>afterConnectionEstablished()&lt;/code>方法（进行一些初始化工作），以及&lt;code>handleMessage()&lt;/code>方法（处理页面发出的消息）。其余方法的实现内容相对固定，发生错误和连接关闭应该响应地关闭一些资源，至于分段消息，暂时用不到，可以直接返回&lt;code>false&lt;/code>。
下面给出一个简单的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 实现WebSocketHandler接口,作为WebSocket各种事件的处理器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">SystemWebSocketHandler&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> WebSocketHandler {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 维护所有已创建的WebSocket Session，key为用户ID（OpenID或管理员的名字）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 考虑到一个用户可能打开多个页面（如管理员可能在手机和PC登录，且多个人用同一个账号），这里使用Guava的Multimap来缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Multimap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> WS_SESSION_MAP;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 单例的对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> SystemWebSocketHandler INSTANCE &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> SystemWebSocketHandler();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> SystemWebSocketHandler &lt;span style="color:#06b6ef">getInstance&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> INSTANCE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocketSession中保存当前用户ID的Attribute key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String WEBSOCKET_USERID &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;WS_USERID&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 默认构造器，初始化日志对象和Session缓存Map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#06b6ef">SystemWebSocketHandler&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(SystemWebSocketHandler.&lt;span style="color:#06b6ef">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP &lt;span style="color:#5bc4bf">=&lt;/span> HashMultimap.&lt;span style="color:#06b6ef">create&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立连接后，将用户ID和WebSocketSession对象的映射保存到WS_SESSION_MAP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession 对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionEstablished&lt;/span>(WebSocketSession session) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;connect to the websocket success......&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userId &lt;span style="color:#5bc4bf">=&lt;/span> (String) session.&lt;span style="color:#06b6ef">getAttributes&lt;/span>().&lt;span style="color:#06b6ef">get&lt;/span>(WEBSOCKET_USERID);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP.&lt;span style="color:#06b6ef">put&lt;/span>(userId, session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 接收到WebSocket消息后的处理方法vvvvv
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 暂不处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param webSocketSession WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param webSocketMessage 页面发送的WebSocketMessage消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleMessage&lt;/span>(WebSocketSession webSocketSession, WebSocketMessage&lt;span style="color:#5bc4bf">&amp;lt;?&amp;gt;&lt;/span> webSocketMessage) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket传输发生错误时，关闭WebSocketSession，并从WS_SESSION_MAP中删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param exception 异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">handleTransportError&lt;/span>(WebSocketSession session, Throwable exception) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(session.&lt;span style="color:#06b6ef">isOpen&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;websocket connection closed......&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(Map.&lt;span style="color:#06b6ef">Entry&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> entry : WS_SESSION_MAP.&lt;span style="color:#06b6ef">entries&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(entry.&lt;span style="color:#06b6ef">getValue&lt;/span>().&lt;span style="color:#06b6ef">equals&lt;/span>(session)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP.&lt;span style="color:#06b6ef">remove&lt;/span>(entry.&lt;span style="color:#06b6ef">getKey&lt;/span>(), session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket连接关闭后，从WS_SESSION_MAP中删除对应WebSocketSession
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param session WebSocketSession对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param closeStatus 关闭状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterConnectionClosed&lt;/span>(WebSocketSession session, CloseStatus closeStatus) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;websocket connection closed......&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(Map.&lt;span style="color:#06b6ef">Entry&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> entry : WS_SESSION_MAP.&lt;span style="color:#06b6ef">entries&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(entry.&lt;span style="color:#06b6ef">getValue&lt;/span>().&lt;span style="color:#06b6ef">equals&lt;/span>(session)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WS_SESSION_MAP.&lt;span style="color:#06b6ef">remove&lt;/span>(entry.&lt;span style="color:#06b6ef">getKey&lt;/span>(), session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 不支持分段消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">supportsPartialMessages&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 给所有在线用户发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param message 需要发送的消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendMessageToUsers&lt;/span>(TextMessage message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (WebSocketSession user : WS_SESSION_MAP.&lt;span style="color:#06b6ef">values&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (user.&lt;span style="color:#06b6ef">isOpen&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user.&lt;span style="color:#06b6ef">sendMessage&lt;/span>(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 给某个用户发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param userId 用户ID（OpenID或管理员的名字）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param message 需要发送的消息对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>(String userId, TextMessage message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>WebSocketSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> users &lt;span style="color:#5bc4bf">=&lt;/span> WS_SESSION_MAP.&lt;span style="color:#06b6ef">get&lt;/span>(userId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(WebSocketSession user : users){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (user &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> user.&lt;span style="color:#06b6ef">isOpen&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user.&lt;span style="color:#06b6ef">sendMessage&lt;/span>(message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得注意的是，使用&lt;code>WebSocketSession.sendMessage()&lt;/code>方法可以向指定用户页面发送消息。&lt;/p>
&lt;h4 id="实现handshakeinterceptor接口">实现HandshakeInterceptor接口
&lt;/h4>&lt;p>HandshakeInterceptor接口为WebSocket握手拦截器接口，包含以下方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">HandshakeInterceptor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立WebSocket连接、握手前的处理方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">beforeHandshake&lt;/span>(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes) &lt;span style="color:#815ba4">throws&lt;/span> Exception;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立WebSocket连接、握手后的处理方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterHandshake&lt;/span>(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在前面的WebSocket配置类里面，这个接口的实现类用于拦截WebSocket连接握手，在握手前后都可以拦截。
我们的应用里用到这个握手拦截器，主要是因为在WebSocketHandler接口的方法中，只能拿到WebSocketSession对象，无法直接与用户请求的HttpSession建立关联。
而在握手拦截器中，通过ServerHttpRequest对象可以拿到关于当前用户、当前连接的很多相关信息，包括HttpSession及其属性；同时通过attributes参数可以设置最终生成的WebSocketSession对象的属性；从而WebSocketSession和HttpSession就可以建立起关联。
从一个简单的实现类中就可以清晰看到这一点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketHandshakeInterceptor&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> HandshakeInterceptor {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(HandshakeInterceptor.&lt;span style="color:#06b6ef">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立WebSocket连接、握手前的处理方
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 从HttpSession读取当前用户的用户ID（OpenID或管理员的名字），写入attributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param request Http请求对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param response Http响应对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param wsHandler WebSocketHandler实现类的实例，这里是SystemWebSocketHandler类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param attributes 握手生成的WebSocketSession对象的属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 是否成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws Exception 接口方法声明的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">beforeHandshake&lt;/span>(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (request &lt;span style="color:#815ba4">instanceof&lt;/span> ServletServerHttpRequest) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServletServerHttpRequest servletRequest &lt;span style="color:#5bc4bf">=&lt;/span> (ServletServerHttpRequest) request;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpSession session &lt;span style="color:#5bc4bf">=&lt;/span> servletRequest.&lt;span style="color:#06b6ef">getServletRequest&lt;/span>().&lt;span style="color:#06b6ef">getSession&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//使用userName区分WebSocketHandler，以便定向发送消息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String userId &lt;span style="color:#5bc4bf">=&lt;/span> (String) session.&lt;span style="color:#06b6ef">getAttribute&lt;/span>(RegisterLoginController.&lt;span style="color:#06b6ef">OPENID_KEY&lt;/span>);&lt;span style="color:#776e71">//普通用户是OpenID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String adminUserId &lt;span style="color:#5bc4bf">=&lt;/span> (String) session.&lt;span style="color:#06b6ef">getAttribute&lt;/span>(AdminUserController.&lt;span style="color:#06b6ef">USER_NAME&lt;/span>);&lt;span style="color:#776e71">//管理员用户是用户名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>( &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> adminUserId){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//优先保存管理员的用户ID1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">put&lt;/span>(WEBSOCKET_USERID, adminUserId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">put&lt;/span>(WEBSOCKET_USERID, userId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 建立WebSocket连接、握手后的处理方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param request Http请求对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param response Http响应对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param wsHandler WebSocketHandler实现类的实例，这里是SystemWebSocketHandler类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param exception 抛出的异常
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">afterHandshake&lt;/span>(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="业务层的封装">业务层的封装
&lt;/h4>&lt;p>实际的使用中，我们封装了一些类，包括WebSocket消息内容的实体类，以及发送消息的Service类（在Controller层触发了相应的事件时进行调用），以下代码仅供参考，请根据实际业务需求进行封装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * WebSocket消息的统一封装
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ROLE role;&lt;span style="color:#776e71">//接受消息的角色，枚举，NORMAL=普通用户，ADMIN=客服/管理员&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String id;&lt;span style="color:#776e71">//用户ID（OpenID或管理员的名字）&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String event;&lt;span style="color:#776e71">//事件，实际上是数字，10001=客服确认借出，10002=客服确认归还，20001=用户申请租赁，20002=用户申请归还&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String msg;&lt;span style="color:#776e71">//事件消息，具体的文字描述，英文&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">WebSocketMessage&lt;/span>(ROLE role, String id, String event, String msg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">role&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> role;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">id&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">event&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">msg&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> msg;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSONObject json &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JSONObject();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json.&lt;span style="color:#06b6ef">put&lt;/span>(&lt;span style="color:#48b685">&amp;#34;role&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">role&lt;/span>.&lt;span style="color:#06b6ef">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json.&lt;span style="color:#06b6ef">put&lt;/span>(&lt;span style="color:#48b685">&amp;#34;id&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">id&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json.&lt;span style="color:#06b6ef">put&lt;/span>(&lt;span style="color:#48b685">&amp;#34;event&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">event&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json.&lt;span style="color:#06b6ef">put&lt;/span>(&lt;span style="color:#48b685">&amp;#34;msg&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">msg&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> json.&lt;span style="color:#06b6ef">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">enum&lt;/span> ROLE {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NORMAL {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;normal&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, ADMIN {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#48b685">&amp;#34;admin&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 发送WebSocket消息的Service类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">WebSocketMessageService&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> AdminUserDao adminUserDao;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>AdminUserEntity&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> adminUserList;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向普通用户发送客服确认借出消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param openId 用户OpenID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendBorrowConfirm&lt;/span>(String openId){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage(NORMAL, openId, &lt;span style="color:#48b685">&amp;#34;10001&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;admin_borrow_confirm&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>().&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>(openId, &lt;span style="color:#815ba4">new&lt;/span> TextMessage(msg.&lt;span style="color:#06b6ef">toString&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向普通用户发送客服确认归还消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param openId 用户OpenID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendReturnConfirm&lt;/span>(String openId){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage(NORMAL, openId, &lt;span style="color:#48b685">&amp;#34;10002&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;admin_return_confirm&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>().&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>(openId, &lt;span style="color:#815ba4">new&lt;/span> TextMessage(msg.&lt;span style="color:#06b6ef">toString&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向超级管理员及指定柜子对应的客服发送用户申请租赁的消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param boxId 柜子ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendBorrowApply&lt;/span>(&lt;span style="color:#fec418">int&lt;/span> boxId){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//检查管理员列表是否已加载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> adminUserList){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adminUserList &lt;span style="color:#5bc4bf">=&lt;/span> adminUserDao.&lt;span style="color:#06b6ef">selectAllAdminUser&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(AdminUserEntity adminUser : adminUserList) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(adminUser.&lt;span style="color:#06b6ef">getBoxId&lt;/span>()&lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> adminUser.&lt;span style="color:#06b6ef">getBoxId&lt;/span>().&lt;span style="color:#06b6ef">equals&lt;/span>(boxId)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//当前遍历到的是超级管理员或指定柜子对应的客服&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String adminName &lt;span style="color:#5bc4bf">=&lt;/span> adminUser.&lt;span style="color:#06b6ef">getUserName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage(ADMIN, adminName, &lt;span style="color:#48b685">&amp;#34;20001&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;user_borrow_apply&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>().&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>(adminName, &lt;span style="color:#815ba4">new&lt;/span> TextMessage(msg.&lt;span style="color:#06b6ef">toString&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 向超级管理员及指定柜子对应的客服发送用户申请归还的消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param boxId 柜子ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendReturnApply&lt;/span>(Integer boxId){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//检查管理员列表是否已加载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> adminUserList){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adminUserList &lt;span style="color:#5bc4bf">=&lt;/span> adminUserDao.&lt;span style="color:#06b6ef">selectAllAdminUser&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(AdminUserEntity adminUser : adminUserList) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(adminUser.&lt;span style="color:#06b6ef">getBoxId&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> adminUser.&lt;span style="color:#06b6ef">getBoxId&lt;/span>().&lt;span style="color:#06b6ef">equals&lt;/span>(boxId)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//当前遍历到的是超级管理员或指定柜子对应的客服&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String adminName &lt;span style="color:#5bc4bf">=&lt;/span> adminUser.&lt;span style="color:#06b6ef">getUserName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WebSocketMessage msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebSocketMessage(ADMIN, adminName, &lt;span style="color:#48b685">&amp;#34;20002&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;user_return_apply&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemWebSocketHandler.&lt;span style="color:#06b6ef">getInstance&lt;/span>().&lt;span style="color:#06b6ef">sendMessageToUser&lt;/span>(adminName, &lt;span style="color:#815ba4">new&lt;/span> TextMessage(msg.&lt;span style="color:#06b6ef">toString&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="页面js">页面&amp;amp;&amp;amp;js
&lt;/h3>&lt;p>页面需要引入SockJS，js中需要初始化WebSocket并建立链接（前面在WebSocketConfig类中配置的映射路径）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">html&lt;/span> &lt;span style="color:#06b6ef">xmlns&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">xmlns:th&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.thymeleaf.org&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#5bc4bf">meta&lt;/span> &lt;span style="color:#06b6ef">charset&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;utf-8&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">div&lt;/span> &lt;span style="color:#06b6ef">id&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;msgcount&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span> &lt;span style="color:#06b6ef">src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;../js/libs/jquery-2.0.2.min.js&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/js/libs/jquery-2.0.2.min.js}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span> &lt;span style="color:#06b6ef">src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;../js/sockjs.min.js&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">th:src&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;@{/js/sockjs.min.js}&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#815ba4">typeof&lt;/span> &lt;span style="color:#06b6ef">$basePath&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;undefined&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window.&lt;span style="color:#06b6ef">$basePath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/breo/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//根据当前浏览器支持的WebSocket对象类型进行初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#39;WebSocket&amp;#39;&lt;/span> &lt;span style="color:#815ba4">in&lt;/span> window) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//浏览器内置WebSocket API
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">WebSocket&lt;/span>(&lt;span style="color:#48b685">&amp;#34;ws://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#39;MozWebSocket&amp;#39;&lt;/span> &lt;span style="color:#815ba4">in&lt;/span> window) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Firefox浏览器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">MozWebSocket&lt;/span>(&lt;span style="color:#48b685">&amp;#34;ws://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他浏览器，或不支持WebSocket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#06b6ef">SockJS&lt;/span>(&lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>window.&lt;span style="color:#06b6ef">location&lt;/span>.&lt;span style="color:#06b6ef">host&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">$basePath&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;sockjs/webSocketServer&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接打开的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onopen&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//页面接收到WebSocket消息的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onmessage&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> &lt;span style="color:#06b6ef">msg&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#06b6ef">JSON&lt;/span>.&lt;span style="color:#06b6ef">parse&lt;/span>(&lt;span style="color:#06b6ef">evnt&lt;/span>.&lt;span style="color:#06b6ef">data&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">console&lt;/span>.&lt;span style="color:#06b6ef">log&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>.&lt;span style="color:#06b6ef">role&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;normal&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#06b6ef">msg&lt;/span>.&lt;span style="color:#06b6ef">event&lt;/span> &lt;span style="color:#5bc4bf">===&lt;/span> &lt;span style="color:#48b685">&amp;#34;10001&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">$&lt;/span>(&lt;span style="color:#48b685">&amp;#34;#msgcount&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">html&lt;/span>(&lt;span style="color:#48b685">&amp;#34;&amp;lt;font color=&amp;#39;red&amp;#39;&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#06b6ef">JSON&lt;/span>.&lt;span style="color:#06b6ef">stringify&lt;/span>(&lt;span style="color:#06b6ef">msg&lt;/span>)&lt;span style="color:#5bc4bf">+&lt;/span>&lt;span style="color:#48b685">&amp;#34;&amp;lt;/font&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket发生错误的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onerror&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//WebSocket连接关闭的回调方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#06b6ef">websocket&lt;/span>.&lt;span style="color:#06b6ef">onclose&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">evnt&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#5bc4bf">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>