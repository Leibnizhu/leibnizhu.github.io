<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Play on Heaven's Door</title><link>https://leibnizhu.github.io/tags/Play/</link><description>Recent content in Play on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 11 Oct 2017 14:19:12 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/Play/index.xml" rel="self" type="application/rss+xml"/><item><title>最近对Java服务框架的思考</title><link>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Wed, 11 Oct 2017 14:19:12 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/mokou_kaguya.png" alt="Featured image of post 最近对Java服务框架的思考" />&lt;p>简单说几句，关于最近对Java服务框架的思考。&lt;br>
最早我是用&lt;code>springMVC + Spring&lt;/code>的，因为太臃肿，配置麻烦，很快切换到&lt;code>SpringBoot&lt;/code>。&lt;br>
用上&lt;code>SpringBoot&lt;/code>后，觉得内置&lt;code>Tomcat/Jetty&lt;/code>性能可能不够好，于是自己写了个&lt;a class="link" href="https://github.com/Leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>基于Netty的内置Servlet容器&lt;/a>，然而简单测试后发现性能与内置的&lt;code>Tomcat/Jetty&lt;/code>相差不大（也有可能是因为测试用例太简单了，没有把&lt;code>Netty NIO&lt;/code>在业务阻塞线程时的优势体现出来）。&lt;br>
期间还考虑过直接用&lt;code>Netty&lt;/code>原生API来写一个分发请求的简单框架，看了一些别人类似功能的项目，后来不了了之。&lt;br>
结合这两点，盯上了&lt;code>Play Framework&lt;/code>，这个在许久前就有关注过，但没深入了解，看了官方文档之后，发现这就是我想要的！开发起来很方便嘛，但是&lt;code>Session&lt;/code>的实现有点………………建议用&lt;code>scala&lt;/code>写，我个人是没问题，但不好带人一起写。&lt;br>
后来在Telegram某群组里被安利了&lt;code>Vert.X&lt;/code>，看了官方文档，还有详细的官方Demo，以及各种安利文章，发现这玩意真好用诶，跟&lt;code>Node.Js&lt;/code>有点像诶，也不用跟用&lt;code>Netty&lt;/code>原生API一样战战兢兢了，配套解决方案也不少，逼格也有，多语言支持（虽然对我而言用处不大），决定就是你了！&lt;br>
所以最终结论就是：&lt;code>Vert.X&lt;/code>大法好，退&lt;code>Spring&lt;/code>保平安～&lt;/p>
&lt;p>P.S. 在&lt;a class="link" href="https://github.com/Leibnizhu/VertxLearn" target="_blank" rel="noopener"
>Github&lt;/a>写了一些简单的&lt;code>Vert.X&lt;/code>学习例子，另外准备用&lt;code>Vert.X&lt;/code>写一个微信/支付宝的微服务(2018-08-02更新:2017年年底已经写了,忘了更新这篇文章, 请参阅&lt;a class="link" href="https://leibnizhu.github.io/p/%e5%9f%ba%e4%ba%8eVert.X%e7%9a%84%e9%ab%98%e6%80%a7%e8%83%bd%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e5%ae%9d%e5%85%ac%e4%bc%97%e5%8f%b7%e9%80%9a%e7%94%a8%e6%9c%8d%e5%8a%a1/" >基于Vert.X的高性能微信支付宝公众号通用服务&lt;/a>)。&lt;/p></description></item></channel></rss>