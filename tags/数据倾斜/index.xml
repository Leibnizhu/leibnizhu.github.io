<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据倾斜 on Heaven's Door</title><link>https://leibnizhu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/</link><description>Recent content in 数据倾斜 on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Jan 2018 17:34:30 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>解决Maxwell发送Kafka消息数据倾斜问题</title><link>https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 03 Jan 2018 17:34:30 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E8%A7%A3%E5%86%B3Maxwell%E5%8F%91%E9%80%81Kafka%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E9%97%AE%E9%A2%98/lotus.jpg" alt="Featured image of post 解决Maxwell发送Kafka消息数据倾斜问题" />&lt;h2 id="问题">问题&lt;/h2>
&lt;p>最近用&lt;code>Maxwell&lt;/code>解析&lt;code>MySQL&lt;/code>的Binlog，发送到&lt;code>Kafka&lt;/code>进行处理，测试的时候发现一个问题，就是&lt;code>Kafka&lt;/code>的Offset严重倾斜，三个partition，其中一个的offset已经快200万了，另外两个offset才不到两百。&lt;br>
Kafka数据倾斜的问题一般是由于生产者使用的&lt;code>Partition&lt;/code>接口实现类对分区处理的问题，一般是对key做hash之后，对分区数取模。当出现数据倾斜时，小量任务耗时远高于其它任务，从而使得整体耗时过大，未能充分发挥分布式系统的并行计算优势（参考&lt;a class="link" href="http://ningg.top/apache-kafka-10-best-practice-tips-data-skew-details/" target="_blank" rel="noopener"
>Apache Kafka 0.10 技术内幕：数据倾斜详解&lt;/a>）。&lt;br>
而使用&lt;code>Maxwell&lt;/code>解析&lt;code>MySQL&lt;/code>的Binlog发送到&lt;code>Kafka&lt;/code>的时候，生产者是&lt;code>Maxwell&lt;/code>，那么数据倾斜的问题明细就是&lt;code>Maxwell&lt;/code>引起的了。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>在&lt;code>Maxwell&lt;/code>官网查文档（&lt;a class="link" href="http://maxwells-daemon.io/producers/#kafka-partitioning" target="_blank" rel="noopener"
>Producers:kafka-partitioning Maxwell&amp;rsquo;s Daemon&lt;/a>）得知，在&lt;code>Maxwell&lt;/code>没有配置的情况下，默认使用数据库名作为计算分区的key，并使用Java默认的hashcode算法进行计算：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>A binlog event&amp;#39;s partition is determined by the selected hash function and hash string as follows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| HASH_FUNCTION(HASH_STRING) % TOPIC.NUMBER_OF_PARTITIONS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The HASH_FUNCTION is either java&amp;#39;s hashCode or murmurhash3. The default HASH_FUNCTION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is hashCode. Murmurhash3 may be set with the kafka_partition_hash option.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…………
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The HASH_STRING may be (database, table, primary_key, column). The default HASH_STRING
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is the database. The partitioning field can be configured using the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>producer_partition_by option.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在很多业务系统中，不同数据库的活跃度差异是很大的，主体业务的数据库操作频繁，产生的Binlog也就很多，而&lt;code>Maxwell&lt;/code>默认使用数据库作为key进行hash，那么显而易见，Binglog的操作经常都被分到同一个分区里面了。&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>于是我们在&lt;code>Maxwell&lt;/code>启动命令中加入对应参数即可，这里我选择了Rowkey作为分区key，同时选用murmurhash3
哈希算法，以获得更好的效率和分布：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nohup /opt/maxwell-1.11.0/bin/maxwell --user&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;maxwell&amp;#39;&lt;/span> --password&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;***&amp;#39;&lt;/span> --host&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;***&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--exclude_dbs&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;/^(mysql|maxwell|test)/&amp;#39;&lt;/span> --producer&lt;span style="color:#5bc4bf">=&lt;/span>kafka --kafka.bootstrap.servers&lt;span style="color:#5bc4bf">=&lt;/span>***
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--kafka_partition_hash&lt;span style="color:#5bc4bf">=&lt;/span>murmur3 --producer_partition_by&lt;span style="color:#5bc4bf">=&lt;/span>primary_key &amp;gt;&amp;gt; /root/maxwell.log &amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用此命令重新启动&lt;code>Maxwell&lt;/code>之后，观察Offset的变化，隔一段时间之后，各分区Offset的增量基本一致，问题解决！&lt;/p></description></item></channel></rss>