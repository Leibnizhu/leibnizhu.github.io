<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JMH on Heaven's Door</title><link>https://leibnizhu.github.io/tags/JMH/</link><description>Recent content in JMH on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 13 Sep 2017 21:51:44 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/JMH/index.xml" rel="self" type="application/rss+xml"/><item><title>基于Netty的Spring Boot内置Servlet容器的实现（五）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</link><pubDate>Wed, 13 Sep 2017 21:51:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/lzwx.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（五）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现五">基于Netty的Spring Boot内置Servlet容器的实现（五）&lt;/h1>
&lt;h2 id="benchmark-程序编写">BenchMark 程序编写&lt;/h2>
&lt;p>BenchMark可以用Jmeter进行，也可以直接编写java Test程序，通过@Befor进行时间计算。&lt;br>
更方便的方法直使JM框架。&lt;/p>
&lt;h3 id="jmh简介">JMH简介&lt;/h3>
&lt;p>JMH是新的microbenchmark（微基准测试）框架（2013年首次发布）。与其他众多框架相比它的特色优势在于，它是由Oracle实现JIT的相同人员开发的。特别是我想提一下Aleksey Shipilev和他优秀的博客文章。JMH可能与最新的Oracle JRE同步，其结果可信度很高。&lt;/p>
&lt;h3 id="idea的jmh插件">IDEA的JMH插件&lt;/h3>
&lt;p>直接使用JMH需要额外编写一些入口方法、增加依赖等，并不是特别方便，而IDEA有插件支持JMH。打开&lt;code>Files-Settings&lt;/code>，找到&lt;code>Plugins&lt;/code>选项卡，安装&lt;code>JMH Plugin&lt;/code>插件，安装后重启如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin.png"
width="1019"
height="458"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu7ef27e16e2b803f9b51873ddc4e17e92_54023_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu7ef27e16e2b803f9b51873ddc4e17e92_54023_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;h3 id="编写benchmark方法">编写BenchMark方法&lt;/h3>
&lt;p>安装&lt;code>JMH Plugin&lt;/code>插件之后无需编写入口方法、增加依赖，可以直接关注具体的测试。&lt;br>
编写一个简单例子，测试我们容器的测试用例吞吐量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@BenchmarkMode&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Mode&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Throughput&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletBenchmark&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">json&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/json?msg=1&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getUrl&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String url&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> read&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BufferedReader br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InputStream is &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sbuf &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL reqURL &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>url&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpURLConnection connection &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>HttpURLConnection&lt;span style="color:#5bc4bf">)&lt;/span> reqURL&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">openConnection&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span> &lt;span style="color:#776e71">// 进行连接，但是实际上getrequest要在下一句的connection.getInputStream() 函数中才会真正发到服务器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDoOutput&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setUseCaches&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setRequestMethod&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;GET&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setConnectTimeout&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>200&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setDoInput&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">connect&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>read&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> BufferedReader&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> InputStreamReader&lt;span style="color:#5bc4bf">(&lt;/span>connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInputStream&lt;/span>&lt;span style="color:#5bc4bf">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String line&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>line &lt;span style="color:#5bc4bf">=&lt;/span> br&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">readLine&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbuf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>line&lt;span style="color:#5bc4bf">).&lt;/span>&lt;span style="color:#06b6ef">append&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is &lt;span style="color:#5bc4bf">=&lt;/span> connection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getInputStream&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">out&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;连接服务器&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> url &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;时发生错误：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getMessage&lt;/span>&lt;span style="color:#5bc4bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">finally&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> br&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>is &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">close&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">catch&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>IOException e&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">printStackTrace&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> sbuf&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">toString&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@BenchmarkMode(Mode.Throughput)&lt;/code>表示测试吞吐量，即一秒内可以跑多少次测试方法。其他的测试模式如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">名称&lt;/th>
&lt;th style="text-align:left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Mode.Throughput&lt;/td>
&lt;td style="text-align:left">计算一个时间单位内操作数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.AverageTime&lt;/td>
&lt;td style="text-align:left">计算平均运行时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.SampleTime&lt;/td>
&lt;td style="text-align:left">计算一个方法的运行时间(包括百分位)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.SingleShotTime&lt;/td>
&lt;td style="text-align:left">方法仅运行一次(用于冷测试模式)。或者特定批量大小的迭代多次运行；这种情况下JMH将计算批处理运行时间(一次批处理所有调用的总时间)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">这些模式的任意组合&lt;/td>
&lt;td style="text-align:left">可以指定这些模式的任意组合——该测试运行多次(取决于请求模式的数量)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Mode.All&lt;/td>
&lt;td style="text-align:left">所有模式依次运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>接下来是具体的测试方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Warmup&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Measurement&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@Benchmark&lt;/code>注解表示当前方法是需要JMH执行测试的方法，&lt;code>@Warmup(iterations = 10)&lt;/code>表示每次正式测试前，先跑10次进行热身（不参与测试结果的计算），&lt;code>@Measurement(iterations = 20)&lt;/code>表示每次正式测试执行20次方法。&lt;/p>
&lt;h3 id="执行测试">执行测试&lt;/h3>
&lt;p>执行方法很简单，点击菜单&lt;code>Run-Run...&lt;/code>，弹出窗中选择当前类，即可：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh.png"
width="771"
height="577"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hua518ab098583ec7acbf9ae00bb1114f9_144804_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hua518ab098583ec7acbf9ae00bb1114f9_144804_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2.png"
width="302"
height="184"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu38e8e493510dfff90c048bbecb62a622_11890_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu38e8e493510dfff90c048bbecb62a622_11890_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;br>
等测试完毕，就会打印出测试结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Result &lt;span style="color:#48b685">&amp;#34;io.gitlab.leibnizhu.sbnetty.benchmark.NettyServletBenchmark.plaintext&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6508.938 ±&lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span> 189.498 ops/s &lt;span style="color:#5bc4bf">[&lt;/span>Average&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">(&lt;/span>min, avg, max&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>157.637, 6508.938, 7098.929&lt;span style="color:#5bc4bf">)&lt;/span>, &lt;span style="color:#ef6155">stdev&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> 802.346
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI &lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span>: &lt;span style="color:#5bc4bf">[&lt;/span>6319.440, 6698.436&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>assumes normal distribution&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmark Mode Cnt Score Error Units
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.json thrpt &lt;span style="color:#f99b15">200&lt;/span> 6756.677 ± 182.976 ops/s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.plaintext thrpt &lt;span style="color:#f99b15">200&lt;/span> 6508.938 ± 189.498 ops/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到IDEA对该类两个带有&lt;code>@Benchmark&lt;/code>注解的方法分别进行了测试，测试结果分别是6.76kQps和6.51kQps（平均值）。&lt;/p></description></item></channel></rss>