<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ES on Heaven's Door</title><link>https://leibnizhu.github.io/tags/ES/</link><description>Recent content in ES on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 20 Jun 2021 13:17:54 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/ES/index.xml" rel="self" type="application/rss+xml"/><item><title>修复Elasticsearch-hadoop查询条件带emoji时的JsonGenerationException</title><link>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/</link><pubDate>Sun, 20 Jun 2021 13:17:54 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E5%B8%A6emoji%E6%97%B6%E7%9A%84JsonGenerationException/bg1.png" alt="Featured image of post 修复Elasticsearch-hadoop查询条件带emoji时的JsonGenerationException" />&lt;h2 id="故障背景">故障背景&lt;/h2>
&lt;p>通过 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html" target="_blank" rel="noopener"
>ES-Hadoop&lt;/a> （亦可参考 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop" target="_blank" rel="noopener"
>Github&lt;/a> ） 查询ES时，若查询条件包含emoji，会在json序列化的时候抛出异常（在最新的 &lt;code>7.13.2&lt;/code> 版本仍存在）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Caused by: org.codehaus.jackson.JsonGenerationException: Incomplete surrogate pair: first char 0xde97, second 0x22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.JsonGeneratorBase._reportError&lt;span style="color:#5bc4bf">(&lt;/span>JsonGeneratorBase.java:480&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._decodeSurrogate&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1708&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._outputSurrogates&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1663&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator._outputRawMultiByteChar&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:1649&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:757&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.codehaus.jackson.impl.Utf8Generator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>Utf8Generator.java:697&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator.writeRaw&lt;span style="color:#5bc4bf">(&lt;/span>JacksonJsonGenerator.java:252&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... &lt;span style="color:#f99b15">21&lt;/span> more
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="故障根源分析">故障根源分析&lt;/h2>
&lt;p>根据报错的调用栈，直接原因出在 &lt;code>org.codehaus.jackson.impl.Utf8Generator#_decodeSurrogate&lt;/code> 方法中，其源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">_decodeSurrogate&lt;/span>(&lt;span style="color:#fec418">int&lt;/span> surr1, &lt;span style="color:#fec418">int&lt;/span> surr2) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (surr2 &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> 56320 &lt;span style="color:#5bc4bf">||&lt;/span> surr2 &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 57343) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String msg &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Incomplete surrogate pair: first char 0x&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Integer.&lt;span style="color:#06b6ef">toHexString&lt;/span>(surr1) &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;, second 0x&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Integer.&lt;span style="color:#06b6ef">toHexString&lt;/span>(surr2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">_reportError&lt;/span>(msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> c &lt;span style="color:#5bc4bf">=&lt;/span> 65536 &lt;span style="color:#5bc4bf">+&lt;/span> (surr1 &lt;span style="color:#5bc4bf">-&lt;/span> &lt;span style="color:#48b685">&amp;#39;\ud800&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> 10) &lt;span style="color:#5bc4bf">+&lt;/span> (surr2 &lt;span style="color:#5bc4bf">-&lt;/span> &lt;span style="color:#48b685">&amp;#39;\udc00&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>是判断第二个字符在指定范围（&lt;code>[56320, 57343]&lt;/code> 区间）外就报这个错误。&lt;/p>
&lt;p>同时注意，这里用的是 &lt;code>org.codehaus&lt;/code> 的 &lt;code>jackson-core-asl&lt;/code> 依赖包，&lt;a class="link" href="https://github.com/FasterXML/jackson-docs/wiki/Presentation-Jackson-2.0" target="_blank" rel="noopener"
>众所周知&lt;/a> ，&lt;code>Jackson&lt;/code> 自2.x版本开始就迁移到 &lt;code>com.fasterxml&lt;/code> 下了，这个 &lt;code>org.codehaus&lt;/code> 的 &lt;code>jackson-core-asl&lt;/code> 是1.x版本的（Es-Spark通过打包时改第三方包名的方法将Jackson 打进其jar包中，具体参见 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop/blob/master/thirdparty/build.gradle" target="_blank" rel="noopener"
>build.gradle文件的relocate操作&lt;/a> ，实际版本为 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop/blob/master/gradle.properties" target="_blank" rel="noopener"
>1.8.8&lt;/a> ）。&lt;/p>
&lt;p>针对这个报错，可以查到是一个已经 &lt;a class="link" href="https://github.com/FasterXML/jackson-core/issues/115" target="_blank" rel="noopener"
>在2.3.0修复的bug&lt;/a> ，是旧版本不完全支持UTF-8的 &lt;code>surrogate pair&lt;/code> （这里又是一个兼容性的大坑，可以参见 &lt;a class="link" href="https://en.wikipedia.org/wiki/UTF-16#Code_points_from_U&amp;#43;010000_to_U&amp;#43;10FFFF" target="_blank" rel="noopener"
>维基百科&lt;/a> 的介绍）导致的。&lt;/p>
&lt;p>综上所述，Es-Spark 在执行查询的时候，&lt;code>org.elasticsearch.hadoop.rest.RestClient#searchRequest&lt;/code> 方法构建了 &lt;code>org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator&lt;/code> 实例，并将 &lt;code>QueryBuilder&lt;/code> 写入到 &lt;code>JacksonJsonGenerator&lt;/code> 中序列化成查询json，在这一步中由于使用了 Jackson 1.x 版本对UTF8的emoji支持不好，导致抛出 &lt;code>JsonGenerationException&lt;/code> 异常、中断查询。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//RestClient 某查询方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xxx &lt;span style="color:#06b6ef">queryXxx&lt;/span>(......) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response response &lt;span style="color:#5bc4bf">=&lt;/span> execute(POST, uri.&lt;span style="color:#06b6ef">toString&lt;/span>(), searchRequest(query));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">static&lt;/span> BytesArray &lt;span style="color:#06b6ef">searchRequest&lt;/span>(QueryBuilder query) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FastByteArrayOutputStream out &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> FastByteArrayOutputStream(256);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JacksonJsonGenerator generator &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JacksonJsonGenerator(out); &lt;span style="color:#776e71">//注意此处&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeBeginObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeFieldName&lt;/span>(&lt;span style="color:#48b685">&amp;#34;query&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeBeginObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> query.&lt;span style="color:#06b6ef">toJson&lt;/span>(generator);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeEndObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeEndObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> out.&lt;span style="color:#06b6ef">bytes&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;p>故障分析到这里，似乎只要升级 &lt;code>jackson-core&lt;/code> 版本就可以了……&lt;br>
然而上面提到，在 &lt;code>jackson-core 2.3.0&lt;/code> 才修复了这个问题，而 Es-Spark 使用的是内置的1.x 版本，前面也有提到 &lt;code>jackson-core&lt;/code> 自2.x开始迁移到 &lt;code>com.fasterxml&lt;/code> 。具体到代码，Es-spark 的 &lt;code>JacksonJsonGenerator&lt;/code> 是这样使用 &lt;code>jackson&lt;/code> 的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.json&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonEncoding&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.JsonGenerator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.Generator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGenerator&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Generator {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分字段&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY.&lt;span style="color:#06b6ef">configure&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//RestClient 就是调用这个构造方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGenerator&lt;/span>(OutputStream out) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY.&lt;span style="color:#06b6ef">createJsonGenerator&lt;/span>(out, JsonEncoding.&lt;span style="color:#06b6ef">UTF8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException(ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，直接升级依赖版本是不行的，maven的GAV都变了，类名也变了，必须改代码。&lt;/p>
&lt;h3 id="同名类的patch">同名类的Patch&lt;/h3>
&lt;p>可以看到，虽说 &lt;code>Jackson&lt;/code> 迁移了包名，但如果是通过创建同名类的方式Patch，其实也很简单，只要把 &lt;code>JSON_FACTORY&lt;/code> 和 &lt;code>generator&lt;/code> 这个两个属性替换为 &lt;code>Jackson 2.3+&lt;/code> 版本的类、并微调静态代码块和构造方法里面的代码即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.json&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonEncoding&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonGenerator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.Generator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGenerator&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Generator {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分字段&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略部分代码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY.&lt;span style="color:#06b6ef">configure&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGenerator&lt;/span>(OutputStream out) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY.&lt;span style="color:#06b6ef">createJsonGenerator&lt;/span>(out, JsonEncoding.&lt;span style="color:#06b6ef">UTF8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException(ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="javassist-patch">Javassist Patch&lt;/h3>
&lt;p>与上一篇博客一样，为了可维护性，最后还是选择使用 &lt;code>Javassist&lt;/code> 进行Patch。但受限于 &lt;code>Javassist&lt;/code> 的机制，这个Patch起来有点麻烦。&lt;br>
首先，阅读 &lt;code>JacksonJsonGenerator&lt;/code> 源码，它其实相当于是在 Es-spark 的 &lt;code>Generator&lt;/code> 接口与 &lt;code>jackson 1.8.8&lt;/code> 的 &lt;code>JsonGenerator&lt;/code> 之间做了Adaptor；因此可以考虑写一个 &lt;code>Generator&lt;/code> 接口与 &lt;code>jackson 2.3+&lt;/code> 之间的Adaptor给原调用者使用。&lt;br>
但阅读 Es-spark 的其他代码可以发现，虽然它定义了 &lt;code>Generator&lt;/code> 接口，但调用时都是直接面向 &lt;code>JacksonJsonGenerator&lt;/code> 实现类，如上面给出过的 &lt;code>RestClient#searchRequest&lt;/code> 的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//RestClient 某查询方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">static&lt;/span> BytesArray &lt;span style="color:#06b6ef">searchRequest&lt;/span>(QueryBuilder query) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JacksonJsonGenerator generator &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JacksonJsonGenerator(out); &lt;span style="color:#776e71">//注意此处&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//......&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此首先排除了通过修改 &lt;code>JacksonJsonGenerator&lt;/code> 调用者来Patch的方向，还是需要从 &lt;code>JacksonJsonGenerator&lt;/code> 内部入手。&lt;/p>
&lt;p>如果用&lt;code>javassist&lt;/code>修改&lt;code>JacksonJsonGenerator&lt;/code>，参考上一小节的内容，其实只要改俩成员变量的类型，再改改静态代码块即可。但真的如此吗？并不。写同名类能这样做到是因为会整个类重新编译，&lt;code>JacksonJsonGenerator&lt;/code>中大量delegate的方法在编译时是用 &lt;code>Jackson 2.3+&lt;/code> 的类进行连接的；然而&lt;code>javassist&lt;/code>修改成员变量的时候真的只是修改了成员变量本身，如果只改了这里，对应的delegate方法在运行时会找不到成员变量。&lt;/p>
&lt;p>如果是在静态代码块和构造方法新增 &lt;code>Jackson 2.3+&lt;/code> 对应的类，并给 &lt;code>writeRaw&lt;/code> 方法增加try-catch，在catch中使用 &lt;code>Jackson 2.3+&lt;/code> 对应的类进行json序列化呢？也不行。因为序列化是输出到&lt;code>OutputStream&lt;/code>（构造方法传入的那个），是有状态的，同时给&lt;code>jackson 1.8.8&lt;/code>和&lt;code>jackson 2.3+&lt;/code>持有并写入，恐怕会大乱（实测的确如此，不确定是不是没处理好&lt;code>flush&lt;/code>，但至少这个方案太危险）。&lt;/p>
&lt;p>还有一个方案是替换 &lt;code>JacksonJsonGenerator&lt;/code> 的 &lt;code>generator&lt;/code> 成员变量，可以做一个 &lt;code>org.codehaus.jackson.JsonGenerator&lt;/code> 与 &lt;code>Jackson 2.3+&lt;/code> 的 &lt;code>com.fasterxml.jackson.core.JsonGenerator&lt;/code> 之间的Adaptor来替换之。&lt;/p>
&lt;p>首先是Adaptor：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">xxx.yyy.zzz&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonEncoding&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">com.fasterxml.jackson.core.JsonGenerator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.apache.commons.logging.LogFactory&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.codehaus.jackson.*&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.serialization.EsHadoopSerializationException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">org.elasticsearch.hadoop.util.StringUtils&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.IOException&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.io.OutputStream&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.math.BigDecimal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.math.BigInteger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.Deque&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">java.util.LinkedList&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">JacksonJsonGeneratorAdaptor&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> org.&lt;span style="color:#06b6ef">codehaus&lt;/span>.&lt;span style="color:#06b6ef">jackson&lt;/span>.&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> HAS_UTF_8;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonFactory JSON_FACTORY;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> JsonGenerator generator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> OutputStream out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Deque&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> currentPath &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String currentPathCached;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String currentName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> ObjectCodec _objectCodec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> hasMethod &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonGenerator.&lt;span style="color:#06b6ef">class&lt;/span>.&lt;span style="color:#06b6ef">getMethod&lt;/span>(&lt;span style="color:#48b685">&amp;#34;writeUTF8String&amp;#34;&lt;/span>, &lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span>.&lt;span style="color:#06b6ef">class&lt;/span>, &lt;span style="color:#fec418">int&lt;/span>.&lt;span style="color:#06b6ef">class&lt;/span>, &lt;span style="color:#fec418">int&lt;/span>.&lt;span style="color:#06b6ef">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hasMethod &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (NoSuchMethodException ignored) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HAS_UTF_8 &lt;span style="color:#5bc4bf">=&lt;/span> hasMethod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>HAS_UTF_8) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LogFactory.&lt;span style="color:#06b6ef">getLog&lt;/span>(JacksonJsonGeneratorAdaptor.&lt;span style="color:#06b6ef">class&lt;/span>).&lt;span style="color:#06b6ef">warn&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Old Jackson version (pre-1.7) detected; consider upgrading to improve performance&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonFactory();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSON_FACTORY.&lt;span style="color:#06b6ef">configure&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">JacksonJsonGeneratorAdaptor&lt;/span>(OutputStream out) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">out&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// use dedicated method to lower Jackson requirement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">generator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> JSON_FACTORY.&lt;span style="color:#06b6ef">createGenerator&lt;/span>(out, JsonEncoding.&lt;span style="color:#06b6ef">UTF8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException(ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//省略大量delegate方法，只列出不是简单delegate的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeStartObject&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeStartObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (currentName &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPath.&lt;span style="color:#06b6ef">addLast&lt;/span>(currentName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPathCached &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeEndObject&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeEndObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> currentPath.&lt;span style="color:#06b6ef">pollLast&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentPathCached &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeFieldName&lt;/span>(String name) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeFieldName&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentName &lt;span style="color:#5bc4bf">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeUTF8String&lt;/span>(&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> text, &lt;span style="color:#fec418">int&lt;/span> offset, &lt;span style="color:#fec418">int&lt;/span> len) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (HAS_UTF_8) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeUTF8String&lt;/span>(text, offset, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeString&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> String(text, offset, len, StringUtils.&lt;span style="color:#06b6ef">UTF_8&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeBinary&lt;/span>(Base64Variant var1, &lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> data, &lt;span style="color:#fec418">int&lt;/span> offset, &lt;span style="color:#fec418">int&lt;/span> len) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">writeBinary&lt;/span>(data, offset, len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeBinary&lt;/span>(&lt;span style="color:#fec418">byte&lt;/span>&lt;span style="color:#5bc4bf">[]&lt;/span> data) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> writeBinary(Base64Variants.&lt;span style="color:#06b6ef">getDefaultVariant&lt;/span>(), data, 0, data.&lt;span style="color:#06b6ef">length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">copyCurrentEvent&lt;/span>(JsonParser jp) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonToken t &lt;span style="color:#5bc4bf">=&lt;/span> jp.&lt;span style="color:#06b6ef">getCurrentToken&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (t &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> JsonGenerationException(&lt;span style="color:#48b685">&amp;#34;No current event to copy&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>(t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_OBJECT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeStartObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> END_OBJECT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeEndObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_ARRAY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeStartArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> END_ARRAY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeEndArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FIELD_NAME:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeFieldName&lt;/span>(jp.&lt;span style="color:#06b6ef">getCurrentName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_STRING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (jp.&lt;span style="color:#06b6ef">hasTextCharacters&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeString&lt;/span>(jp.&lt;span style="color:#06b6ef">getTextCharacters&lt;/span>(), jp.&lt;span style="color:#06b6ef">getTextOffset&lt;/span>(), jp.&lt;span style="color:#06b6ef">getTextLength&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeString&lt;/span>(jp.&lt;span style="color:#06b6ef">getText&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NUMBER_INT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>(jp.&lt;span style="color:#06b6ef">getNumberType&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> INT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getIntValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> BIG_INTEGER:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getBigIntegerValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getLongValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NUMBER_FLOAT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>(jp.&lt;span style="color:#06b6ef">getNumberType&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> BIG_DECIMAL:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getDecimalValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLOAT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getFloatValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNumber&lt;/span>(jp.&lt;span style="color:#06b6ef">getDoubleValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_TRUE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeBoolean&lt;/span>(&lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_FALSE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeBoolean&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_NULL:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeNull&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> VALUE_EMBEDDED_OBJECT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeObject&lt;/span>(jp.&lt;span style="color:#06b6ef">getEmbeddedObject&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RuntimeException(&lt;span style="color:#48b685">&amp;#34;Internal error: should never end up through this code path&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>(JsonParser jp) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JsonToken t &lt;span style="color:#5bc4bf">=&lt;/span> jp.&lt;span style="color:#06b6ef">getCurrentToken&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (t &lt;span style="color:#5bc4bf">==&lt;/span> JsonToken.&lt;span style="color:#06b6ef">FIELD_NAME&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeFieldName&lt;/span>(jp.&lt;span style="color:#06b6ef">getCurrentName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#5bc4bf">=&lt;/span> jp.&lt;span style="color:#06b6ef">nextToken&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span>(t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_OBJECT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeStartObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>(jp.&lt;span style="color:#06b6ef">nextToken&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> JsonToken.&lt;span style="color:#06b6ef">END_OBJECT&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>(jp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeEndObject&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> START_ARRAY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeStartArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>(jp.&lt;span style="color:#06b6ef">nextToken&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> JsonToken.&lt;span style="color:#06b6ef">END_ARRAY&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">copyCurrentStructure&lt;/span>(jp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">writeEndArray&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">copyCurrentEvent&lt;/span>(jp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">close&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EsHadoopSerializationException(ex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getOutputTarget&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//return generator.getOutputTarget();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org.&lt;span style="color:#06b6ef">codehaus&lt;/span>.&lt;span style="color:#06b6ef">jackson&lt;/span>.&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">enable&lt;/span>(Feature feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> (feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">enable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org.&lt;span style="color:#06b6ef">codehaus&lt;/span>.&lt;span style="color:#06b6ef">jackson&lt;/span>.&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">disable&lt;/span>(Feature feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> (feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generator.&lt;span style="color:#06b6ef">disable&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isEnabled&lt;/span>(Feature feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">switch&lt;/span> (feature) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_TARGET:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_TARGET&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> AUTO_CLOSE_JSON_CONTENT:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">AUTO_CLOSE_JSON_CONTENT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_FIELD_NAMES:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_FIELD_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> QUOTE_NON_NUMERIC_NUMBERS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">QUOTE_NON_NUMERIC_NUMBERS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> WRITE_NUMBERS_AS_STRINGS:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">WRITE_NUMBERS_AS_STRINGS&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> FLUSH_PASSED_TO_STREAM:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">FLUSH_PASSED_TO_STREAM&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> ESCAPE_NON_ASCII:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> generator.&lt;span style="color:#06b6ef">isEnabled&lt;/span>(JsonGenerator.&lt;span style="color:#06b6ef">Feature&lt;/span>.&lt;span style="color:#06b6ef">ESCAPE_NON_ASCII&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> org.&lt;span style="color:#06b6ef">codehaus&lt;/span>.&lt;span style="color:#06b6ef">jackson&lt;/span>.&lt;span style="color:#06b6ef">JsonGenerator&lt;/span> &lt;span style="color:#06b6ef">setCodec&lt;/span>(ObjectCodec objectCodec) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">_objectCodec&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> objectCodec;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ObjectCodec &lt;span style="color:#06b6ef">getCodec&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">_objectCodec&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后通过&lt;code>javassist&lt;/code> 修改&lt;code>JacksonJsonGenerator&lt;/code> 的 &lt;code>generator&lt;/code> 成员变量实际取值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ClassPool pool &lt;span style="color:#5bc4bf">=&lt;/span> ClassPool.&lt;span style="color:#06b6ef">getDefault&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtClass cc &lt;span style="color:#5bc4bf">=&lt;/span> pool.&lt;span style="color:#06b6ef">get&lt;/span>(&lt;span style="color:#48b685">&amp;#34;org.elasticsearch.hadoop.serialization.json.JacksonJsonGenerator&amp;#34;&lt;/span>); &lt;span style="color:#776e71">//这里必须用类全限定名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//这里自己造了一个无参构造器给原构造器调用，否则 JacksonJsonGenerator 的 currentPath 一直是null（字段有初始化值但还是null），原因未知，可能是setBody影响了原构造器的行为&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc.&lt;span style="color:#06b6ef">addConstructor&lt;/span>(CtNewConstructor.&lt;span style="color:#06b6ef">make&lt;/span>(&lt;span style="color:#48b685">&amp;#34;JacksonJsonGenerator(){this.currentPath = new java.util.LinkedList();}&amp;#34;&lt;/span>, cc));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//构造函数将 generator 替换成我们的 Adaptor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtConstructor jacksonJsonGeneratorConstructor &lt;span style="color:#5bc4bf">=&lt;/span> cc.&lt;span style="color:#06b6ef">getDeclaredConstructor&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> CtClass&lt;span style="color:#5bc4bf">[]&lt;/span>{pool.&lt;span style="color:#06b6ef">get&lt;/span>(OutputStream.&lt;span style="color:#06b6ef">class&lt;/span>.&lt;span style="color:#06b6ef">getName&lt;/span>())});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jacksonJsonGeneratorConstructor.&lt;span style="color:#06b6ef">setBody&lt;/span>(&lt;span style="color:#48b685">&amp;#34;{\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; this();\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#776e71">//调用无参构造器，这里用 $0() 是不行的，必须this();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; try {\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; $0.out = $1;\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; $0.generator = new xxx.yyy.zzz.JacksonJsonGeneratorAdaptor($1);\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; } catch (java.io.IOException ex) {\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; throw new org.elasticsearch.hadoop.serialization.EsHadoopSerializationException(ex);\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; }\n&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34; }&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc.&lt;span style="color:#06b6ef">toClass&lt;/span>().&lt;span style="color:#06b6ef">getConstructor&lt;/span>(OutputStream.&lt;span style="color:#06b6ef">class&lt;/span>).&lt;span style="color:#06b6ef">newInstance&lt;/span>(System.&lt;span style="color:#06b6ef">out&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;完成对 JacksonJsonGenerator 进行静态代码块和构造方法的pack&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#815ba4">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;给 JacksonJsonGenerator 进行静态代码块和构造方法的pack失败:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e.&lt;span style="color:#06b6ef">getMessage&lt;/span>(), e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完事儿。&lt;/p></description></item><item><title>修复Elasticsearch-hadoop读取特殊数字取值时的NumberFormatException</title><link>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/</link><pubDate>Sat, 19 Jun 2021 23:40:50 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E4%BF%AE%E5%A4%8DElasticsearch-hadoop%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%95%B0%E5%AD%97%E5%8F%96%E5%80%BC%E6%97%B6%E7%9A%84NumberFormatException/bg2.jpg" alt="Featured image of post 修复Elasticsearch-hadoop读取特殊数字取值时的NumberFormatException" />&lt;h2 id="故障背景">故障背景&lt;/h2>
&lt;p>众所周知，&lt;code>Elasticsearch&lt;/code>（下文简称&lt;code>&amp;quot;ES&amp;quot;&lt;/code>）的数值类型字段是支持一些特殊格式的。比如，&lt;code>integer&lt;/code> 类型的字段取值可以是浮点数的字符串，如 &lt;code>&amp;quot;2.0&amp;quot;&lt;/code>；&lt;code>long&lt;/code> 类型的字段取值可以是科学计数法的字符串，如 &lt;code>&amp;quot;2E3&amp;quot;&lt;/code>，诸如此类的一些。不同于时间类型的字段可以 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html" target="_blank" rel="noopener"
>通过 &lt;code>mapping&lt;/code> 的 &lt;code>format&lt;/code> 属性配置取值格式&lt;/a> ，数值字段的取值没有格式的配置、上面举例的取值都是可以直接索引文档的。&lt;/p>
&lt;p>然而，通过 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/spark.html" target="_blank" rel="noopener"
>ES-Hadoop&lt;/a> （亦可参考 &lt;a class="link" href="https://github.com/elastic/elasticsearch-hadoop" target="_blank" rel="noopener"
>Github&lt;/a> ） 查询ES时，这些特殊格式的取值往往会导致报错，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>java.lang.NumberFormatException: For input string: &lt;span style="color:#48b685">&amp;#39;2E3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.NumberFormatException.forInputString&lt;span style="color:#5bc4bf">(&lt;/span>NumberFormatException.java:65&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.Long.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>Long.java:441&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at java.lang.Long.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>Long.java:483&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.builder.JdkValueReader.parseLong&lt;span style="color:#5bc4bf">(&lt;/span>JdkValueReader.java:296&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.elasticsearch.hadoop.serialization.builder.JdkValueReader.longValue&lt;span style="color:#5bc4bf">(&lt;/span>JdkValueReader.java:288&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>…………
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="故障根源分析">故障根源分析&lt;/h2>
&lt;p>阅读 &lt;code>JdkValueReader&lt;/code> 源码，以读取integer类型字段为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> Object &lt;span style="color:#06b6ef">intValue&lt;/span>(String value, Parser parser) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Integer val &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> isEmpty(value)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> nullValue();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Token tk &lt;span style="color:#5bc4bf">=&lt;/span> parser.&lt;span style="color:#06b6ef">currentToken&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (tk &lt;span style="color:#5bc4bf">==&lt;/span> Token.&lt;span style="color:#06b6ef">VALUE_NUMBER&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#5bc4bf">=&lt;/span> parser.&lt;span style="color:#06b6ef">intValue&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> val &lt;span style="color:#5bc4bf">=&lt;/span> parseInteger(value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> processInteger(val);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> Integer &lt;span style="color:#06b6ef">parseInteger&lt;/span>(String value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Integer.&lt;span style="color:#06b6ef">parseInt&lt;/span>(value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到字段取值直接调用 &lt;code>Integer.parseInt&lt;/code> 方法解析，且没捕获异常。&lt;br>
不知道这样设计是处于什么考虑，但这个 &lt;code>NumberFormatException&lt;/code> 异常会打断读取的流程：出现一条有问题的数据时，会影响整个查询任务的执行，在 Es-spark 使用于离线批处理的场景，是不恰当的，所以有必要进行调整。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="自定义-valuereader">自定义 ValueReader&lt;/h3>
&lt;p>进一步阅读 ES-spark 源码可以发现，用户可以自己实现 &lt;code>org.elasticsearch.hadoop.serialization.builder.ValueReader&lt;/code> 接口，并通过 &lt;code>es.ser.reader.value.class&lt;/code> 配置项（常量&lt;code>org.elasticsearch.hadoop.cfg.ConfigurationOptions.ES_SERIALIZATION_READER_VALUE_CLASS&lt;/code>）配置自定义的 &lt;code>ValueReader&lt;/code> 实现，从而可以实现对这些特殊取值的读取解析。 当然，后来在 &lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/hadoop/current/configuration.html" target="_blank" rel="noopener"
>官方文档&lt;/a> 中也印证了这一点。&lt;/p>
&lt;p>这样实际处理下来，基本是要拷贝 &lt;code>JdkValueReader&lt;/code> 源码进行修改作为自定义的 &lt;code>ValueReader&lt;/code> 实现；显然，这样就不能随 ES-spark 升级而自动升级对应实现，同时，在代码中，自定义的修改也和原 &lt;code>JdkValueReader&lt;/code> 的实现混杂在一起，给升级带来困难；因此考虑使用 &lt;code>Javassist&lt;/code> 进行patch。&lt;/p>
&lt;h3 id="javassist-patch">Javassist Patch&lt;/h3>
&lt;p>&lt;code>Javassist&lt;/code> 入门和介绍的文章在网上已经很多了，在此不再赘述。&lt;br>
列举一下patch过程中遇到的一些坑，或者说，&lt;code>Javassist&lt;/code> 的一些使用注意事项：&lt;/p>
&lt;ol>
&lt;li>不支持泛型，请自行强转；&lt;/li>
&lt;li>类要用全限定类名，没有import；&lt;/li>
&lt;li>$0=this, $1/$2/$3=方法的第1/2/3个参数；&lt;/li>
&lt;li>代码块前后要用{}包裹；&lt;/li>
&lt;li>不支持增强for、lambda等高级语法，需要手动转成基本语法。&lt;/li>
&lt;/ol>
&lt;p>最后给出针对Elasticsearch-hadoop读取特殊数字取值的 &lt;code>Javassist&lt;/code> patch代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ClassPool pool &lt;span style="color:#5bc4bf">=&lt;/span> ClassPool.&lt;span style="color:#06b6ef">getDefault&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//这里必须用类全限定名，而不是JdkValueReader.class.getName(),否则会先加载类，后面的修改就没用了&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtClass cc &lt;span style="color:#5bc4bf">=&lt;/span> pool.&lt;span style="color:#06b6ef">get&lt;/span>(&lt;span style="color:#48b685">&amp;#34;org.elasticsearch.hadoop.serialization.builder.JdkValueReader&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//修复 parseInteger 方法 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtMethod parseInteger &lt;span style="color:#5bc4bf">=&lt;/span> cc.&lt;span style="color:#06b6ef">getDeclaredMethod&lt;/span>(&lt;span style="color:#48b685">&amp;#34;parseInteger&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtClass exceptionClass &lt;span style="color:#5bc4bf">=&lt;/span> pool.&lt;span style="color:#06b6ef">get&lt;/span>(Exception.&lt;span style="color:#06b6ef">class&lt;/span>.&lt;span style="color:#06b6ef">getName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String catchParseIntegerException &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;try{return new java.lang.Integer(java.lang.Double.valueOf($1).intValue());}catch(java.lang.Exception e){e.printStackTrace();return null;}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseInteger.&lt;span style="color:#06b6ef">addCatch&lt;/span>(&lt;span style="color:#48b685">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> catchParseIntegerException &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;}&amp;#34;&lt;/span>, exceptionClass);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//修复 parseLong 方法 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CtMethod parseLong &lt;span style="color:#5bc4bf">=&lt;/span> cc.&lt;span style="color:#06b6ef">getDeclaredMethod&lt;/span>(&lt;span style="color:#48b685">&amp;#34;parseLong&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String catchParseLongExpSrc &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;try{return new java.lang.Long(java.lang.Double.valueOf($1).longValue());}catch(java.lang.Exception e){e.printStackTrace();return null;}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseLong.&lt;span style="color:#06b6ef">addCatch&lt;/span>(&lt;span style="color:#48b685">&amp;#34;{&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> catchParseLongExpSrc &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;}&amp;#34;&lt;/span>, exceptionClass);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc.&lt;span style="color:#06b6ef">toClass&lt;/span>().&lt;span style="color:#06b6ef">newInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;完成对 JdkValueReader 进行 parseInteger() 和 parseLong() 的pack&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#815ba4">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;给 JdkValueReader 进行 parseInteger() 和 parseLong() 的pack失败:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e.&lt;span style="color:#06b6ef">getMessage&lt;/span>(), e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此基础上还可以做成按配置动态patch等骚操作。最后编译运行，Pass。&lt;/p></description></item></channel></rss>