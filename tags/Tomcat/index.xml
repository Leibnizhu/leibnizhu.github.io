<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tomcat on Heaven's Door</title><link>https://leibnizhu.github.io/tags/Tomcat/</link><description>Recent content in Tomcat on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Nov 2017 11:53:14 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/Tomcat/index.xml" rel="self" type="application/rss+xml"/><item><title>Tomcat8源码读后感</title><link>https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/</link><pubDate>Thu, 30 Nov 2017 11:53:14 +0800</pubDate><guid>https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/sundown2.jpg" alt="Featured image of post Tomcat8源码读后感" />&lt;p>源码版本：&lt;code>Tomcat 8.0.41&lt;/code>&lt;/p>
&lt;h3 id="request和response的门面模式">Request和Response的门面模式&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request.png"
width="180"
height="274"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request_hua75cf0cc9e85cc522889505be9bf757c_9924_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/request_hua75cf0cc9e85cc522889505be9bf757c_9924_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="157px"
> &lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response.png"
width="194"
height="275"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response_hu6ca6fcfc53f1885b949cdbeece85a962_10304_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/response_hu6ca6fcfc53f1885b949cdbeece85a962_10304_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;br>
从UML图可以看到，Tomcat中&lt;code>HttpServletRequest&lt;/code>和&lt;code>HttpServletResponse&lt;/code>的实现类是&lt;code>org.apache.catalina.connector.Request&lt;/code>和&lt;code>org.apache.catalina.connector.Response&lt;/code>，但实际提供给Servlet的时候用的是门面类&lt;code>RequestFacade&lt;/code>和&lt;code>ResponseFacade&lt;/code>。这是因为实现类里面的public方法比接口的多，而且可能涉及到安全问题，如果Servlet直接将其强转成实现类，是可以访问这些方法的，存在安全问题，因为使用了门面模式，将这些方法隐藏起来。&lt;/p>
&lt;h3 id="统一日志消息处理">统一日志消息处理&lt;/h3>
&lt;p>Tomcat8使用&lt;code>org.apache.catalina.tribes.util.StringManager&lt;/code>对日志消息进行统一处理，每个包一般都有一个&lt;code>LocalStrings.properties&lt;/code>文件，需要调用这些日志信息的类，会维护一个&lt;code>StringManager&lt;/code>的实例，初始化时以当前包名为参数，以获取当前包对应的&lt;code>LocalStrings.properties&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#06b6ef">StringManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> StringManager&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> managers &lt;span style="color:#5bc4bf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Get the StringManager for a particular package. If a manager for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * a package already exists, it will be reused, else a new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * StringManager will be created and returned.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param packageName The package name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">synchronized&lt;/span> StringManager &lt;span style="color:#06b6ef">getManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String packageName&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringManager mgr &lt;span style="color:#5bc4bf">=&lt;/span> managers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">get&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>mgr &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mgr &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringManager&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> managers&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>packageName&lt;span style="color:#5bc4bf">,&lt;/span> mgr&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> mgr&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/* For Example */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> StringManager sm &lt;span style="color:#5bc4bf">=&lt;/span> StringManager&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>Constants&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">Package&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到它使用了&lt;code>Hashtable&lt;/code>来维护每个包对应的&lt;code>StringManager&lt;/code>单例。&lt;br>
然后在需要读取消息的时候调用&lt;code>StringManager&lt;/code>的&lt;code>getString(String key)&lt;/code>方法，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">info&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>sm&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getString&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;receiverBase.socket.bind&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> addr&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="请求参数等的懒解析">请求参数等的懒解析&lt;/h3>
&lt;p>为了提高效率，请求参数在第一次调用&lt;code>public String getParameter(String name)&lt;/code>、&lt;code>public Enumeration&amp;lt;String&amp;gt; getParameterNames()&lt;/code>等方法的时候才会解析，如果整个请求响应处理过程中都没有调用相关方法的话，请求参数将不会被解析，因为字符串处理的消耗不低。其他的一些属性也有类似的处理。主要的代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Request parameters parsed flag.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> parametersParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Return the value of the specified request parameter, if any; otherwise,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * return &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;. If there is more than one value defined,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * return only the first one.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param name Name of the desired request parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getParameter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>parametersParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseParameters&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> coyoteRequest&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getParameters&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getParameter&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Returns a &amp;lt;code&amp;gt;Map&amp;lt;/code&amp;gt; of the parameters of this request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Request parameters are extra information sent with the request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * For HTTP servlets, parameters are contained in the query string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * or posted form data.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return A &amp;lt;code&amp;gt;Map&amp;lt;/code&amp;gt; containing parameter names as keys
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * and parameter values as map values.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">,&lt;/span> String&lt;span style="color:#5bc4bf">[]&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getParameterMap&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">isLocked&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> parameterMap&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> enumeration &lt;span style="color:#5bc4bf">=&lt;/span> getParameterNames&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>enumeration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">hasMoreElements&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String name &lt;span style="color:#5bc4bf">=&lt;/span> enumeration&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">nextElement&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String&lt;span style="color:#5bc4bf">[]&lt;/span> values &lt;span style="color:#5bc4bf">=&lt;/span> getParameterValues&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">put&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>name&lt;span style="color:#5bc4bf">,&lt;/span> values&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterMap&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setLocked&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> parameterMap&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Return the names of all defined request parameters for this request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getParameterNames&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(!&lt;/span>parametersParsed&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseParameters&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> coyoteRequest&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getParameters&lt;/span>&lt;span style="color:#5bc4bf">().&lt;/span>&lt;span style="color:#06b6ef">getParameterNames&lt;/span>&lt;span style="color:#5bc4bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Parse request parameters.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseParameters&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parametersParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*………具体的解析处理，在此省略………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>ParameterMap&lt;/code>是一个继承了&lt;code>LinkedHashMap&lt;/code>的类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">ParameterMap&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> LinkedHashMap&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>K&lt;span style="color:#5bc4bf">,&lt;/span>V&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="connector连接器">Connector连接器&lt;/h3>
&lt;p>&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector.png"
width="526"
height="200"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector_hu63d16e56f15764500da85ffad2275921_10488_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/connector_hu63d16e56f15764500da85ffad2275921_10488_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="263"
data-flex-basis="631px"
>
Tomcat8主要有四个Connector，分别为&lt;code>Http11Protocol&lt;/code>、&lt;code>Http11NioProtocol&lt;/code>、&lt;code>Http11Nio2Protocol&lt;/code>、&lt;code>Http11AprProtocol&lt;/code>，UML如上图所示，内容比较多，暂时不讨论了。&lt;/p>
&lt;h3 id="tomcat容器层次">Tomcat容器层次&lt;/h3>
&lt;p>Tomcat中有四个层次的容器：&lt;/p>
&lt;ul>
&lt;li>Engine：整个Catalina Servlet引擎&lt;/li>
&lt;li>Host：包含一个或多个Context容器的虚拟主机&lt;/li>
&lt;li>Context：表示一个Web应用程序，包含一个或多个Wrapper&lt;/li>
&lt;li>Wrapper：表示一个独立的Servlet&lt;/li>
&lt;/ul>
&lt;p>以上四个类均实现了&lt;code>org.apache.catalina.Container&lt;/code>接口，标准实现分别为&lt;code>org.apache.catalina.core&lt;/code>包中的&lt;code>StandardEngine&lt;/code>、&lt;code>StandardHost&lt;/code>、&lt;code>StandardContext&lt;/code>、&lt;code>StandardWrapper&lt;/code>。
&lt;img src="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container.png"
width="1144"
height="396"
srcset="https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container_hub792b78ab73a6bdeeca26693cee98c0c_40450_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Tomcat8%E6%BA%90%E7%A0%81%E8%AF%BB%E5%90%8E%E6%84%9F/container_hub792b78ab73a6bdeeca26693cee98c0c_40450_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="693px"
>&lt;/p>
&lt;h3 id="pipeline管道">Pipeline管道&lt;/h3>
&lt;p>(尚未完工)
&lt;code>org.apache.catalina.valves.AccessLogValve&lt;/code>&lt;/p></description></item><item><title>Docker中Gitlab的持续集成安装与配置</title><link>https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Apr 2017 15:02:26 +0800</pubDate><guid>https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Docker%E4%B8%ADGitlab%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/docker-gitlab.png" alt="Featured image of post Docker中Gitlab的持续集成安装与配置" />&lt;h1 id="安装gitlab-ci-runner">安装Gitlab-CI-Runner&lt;/h1>
&lt;h2 id="下载">下载&lt;/h2>
&lt;p>根据&lt;a class="link" href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="noopener"
>官方的说法&lt;/a>，Gitlab-CI-Runner9.0以后的版本需要GitLab9.0以上版本支持，我们目前部署的GitLab是8.x，所以需要下载旧版。&lt;br>
最新版：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-linux-amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>旧版（如v1.11.0）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v1.11.0/binaries/gitlab-ci-multi-runner-linux-amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装配置">安装配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo chmod +x /usr/local/bin/gitlab-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo useradd --comment &lt;span style="color:#48b685">&amp;#39;GitLab Runner&amp;#39;&lt;/span> --create-home gitlab-runner --shell /bin/bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gitlab-runner register
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上面最后一句命令的时候，会要求输入网址和秘钥，此时打开Gitlab页面，进项目，右上角配置按钮-Runners，再按此时页面上给出的来填。&lt;br>
还会要求输入名称和标签之类的信息，到最后会提示输入运行环境之类，我们Gitlab是在docker上，但Runner和Gitlab在同一个docker容器中的，就是在Gitlab调用的角度上来看，Runner并不是在docker中，所以运行环境那里选shell就行。&lt;/p>
&lt;h2 id="运行">运行&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo gitlab-runner install --user&lt;span style="color:#5bc4bf">=&lt;/span>gitlab-runner --working-directory&lt;span style="color:#5bc4bf">=&lt;/span>/home/gitlab-runner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo gitlab-runner start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="配置项目的ci脚本">配置项目的CI脚本&lt;/h1>
&lt;p>在项目根目录创建文件.gitlab-ci.yml，写入CI执行的脚本，具体参考&lt;a class="link" href="http://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;br>
此处以最简单的maven打包部署tomcat为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">stages&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">stage&lt;/span>: &lt;span style="color:#f99b15">deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">only&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">dev&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">mvn clean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">mvn package&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f99b15">cp target/FissionSales.war /var/opt/gitlab/webapps/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此处限定了dev分支的提交才会触发CI任务，打包后复制到指定文件夹里。&lt;br>
此外，我们将打包成功的war包复制到&lt;code>/var/opt/gitlab/webapps/&lt;/code>中，这样做是因为，Gitlab在docker中，而Tomcat在宿主机里，因为权限方面的问题，我只好让Gitlab的CI任务将war包放在docker的volume（已经配置了&lt;code>/var/opt/gitlab/&lt;/code>的volume）中，然后在宿主机中通过定时任务，检查war包的版本，检查到新版本时复制到宿主机的Tomcat中进行部署，具体的检查脚本如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#ef6155">a&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>sudo stat -c %Y /var/lib/docker/volumes/gitlab-data/_data/webapps/***.war&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">b&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">`&lt;/span>date +%s&lt;span style="color:#48b685">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">b&lt;/span>&lt;span style="color:#5bc4bf">=&lt;/span>$&lt;span style="color:#5bc4bf">[&lt;/span>b-a&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ef6155">$b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> &lt;span style="color:#ef6155">$b&lt;/span> -le &lt;span style="color:#f99b15">60&lt;/span> &lt;span style="color:#5bc4bf">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo cp /var/lib/docker/volumes/gitlab-data/_data/webapps/***.war /enviroment/apache-tomcat-8.0.33/webapps/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#48b685">&amp;#34;No new war package...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个脚本通过crontab定时每分钟执行，所以检查war包的修改时间与当前时间相差小于60秒就会复制war包到tomcat的webapps中。&lt;/p>
&lt;h1 id="配置pipeline邮件通知">配置Pipeline邮件通知&lt;/h1>
&lt;p>Gitlab默认CI Pipeline任务成功失败都会发邮件通知，这样或许会困扰到大家，所以修改Gitlab的源码，只让部署不成功的时候才发邮件通知。&lt;br>
进入docker，编辑&lt;code>/opt/gitlab/embedded/service/gitlab-rails/app/services/notification_service.rb&lt;/code>，在&lt;code>pipeline_finished&lt;/code>方法的开头添加&lt;code>return if pipeline.status == &amp;quot;success&amp;quot; &lt;/code>，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> &lt;span style="color:#06b6ef">pipeline_finished&lt;/span>(pipeline, recipients &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> pipeline&lt;span style="color:#5bc4bf">.&lt;/span>status &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#34;success&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email_template &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;pipeline_&lt;/span>&lt;span style="color:#f99b15">#{&lt;/span>pipeline&lt;span style="color:#5bc4bf">.&lt;/span>status&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">_email&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………………………&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>