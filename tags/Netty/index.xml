<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Netty on Heaven's Door</title><link>https://leibnizhu.github.io/tags/Netty/</link><description>Recent content in Netty on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 11 Oct 2017 14:19:12 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/Netty/index.xml" rel="self" type="application/rss+xml"/><item><title>最近对Java服务框架的思考</title><link>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Wed, 11 Oct 2017 14:19:12 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E6%9C%80%E8%BF%91%E5%AF%B9Java%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6%E7%9A%84%E6%80%9D%E8%80%83/mokou_kaguya.png" alt="Featured image of post 最近对Java服务框架的思考" />&lt;p>简单说几句，关于最近对Java服务框架的思考。&lt;br>
最早我是用&lt;code>springMVC + Spring&lt;/code>的，因为太臃肿，配置麻烦，很快切换到&lt;code>SpringBoot&lt;/code>。&lt;br>
用上&lt;code>SpringBoot&lt;/code>后，觉得内置&lt;code>Tomcat/Jetty&lt;/code>性能可能不够好，于是自己写了个&lt;a class="link" href="https://github.com/Leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>基于Netty的内置Servlet容器&lt;/a>，然而简单测试后发现性能与内置的&lt;code>Tomcat/Jetty&lt;/code>相差不大（也有可能是因为测试用例太简单了，没有把&lt;code>Netty NIO&lt;/code>在业务阻塞线程时的优势体现出来）。&lt;br>
期间还考虑过直接用&lt;code>Netty&lt;/code>原生API来写一个分发请求的简单框架，看了一些别人类似功能的项目，后来不了了之。&lt;br>
结合这两点，盯上了&lt;code>Play Framework&lt;/code>，这个在许久前就有关注过，但没深入了解，看了官方文档之后，发现这就是我想要的！开发起来很方便嘛，但是&lt;code>Session&lt;/code>的实现有点………………建议用&lt;code>scala&lt;/code>写，我个人是没问题，但不好带人一起写。&lt;br>
后来在Telegram某群组里被安利了&lt;code>Vert.X&lt;/code>，看了官方文档，还有详细的官方Demo，以及各种安利文章，发现这玩意真好用诶，跟&lt;code>Node.Js&lt;/code>有点像诶，也不用跟用&lt;code>Netty&lt;/code>原生API一样战战兢兢了，配套解决方案也不少，逼格也有，多语言支持（虽然对我而言用处不大），决定就是你了！&lt;br>
所以最终结论就是：&lt;code>Vert.X&lt;/code>大法好，退&lt;code>Spring&lt;/code>保平安～&lt;/p>
&lt;p>P.S. 在&lt;a class="link" href="https://github.com/Leibnizhu/VertxLearn" target="_blank" rel="noopener"
>Github&lt;/a>写了一些简单的&lt;code>Vert.X&lt;/code>学习例子，另外准备用&lt;code>Vert.X&lt;/code>写一个微信/支付宝的微服务(2018-08-02更新:2017年年底已经写了,忘了更新这篇文章, 请参阅&lt;a class="link" href="https://leibnizhu.github.io/p/%e5%9f%ba%e4%ba%8eVert.X%e7%9a%84%e9%ab%98%e6%80%a7%e8%83%bd%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e5%ae%9d%e5%85%ac%e4%bc%97%e5%8f%b7%e9%80%9a%e7%94%a8%e6%9c%8d%e5%8a%a1/" >基于Vert.X的高性能微信支付宝公众号通用服务&lt;/a>)。&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（五）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</link><pubDate>Wed, 13 Sep 2017 21:51:44 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/lzwx.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（五）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现五">基于Netty的Spring Boot内置Servlet容器的实现（五）
&lt;/h1>&lt;h2 id="benchmark-程序编写">BenchMark 程序编写
&lt;/h2>&lt;p>BenchMark可以用Jmeter进行，也可以直接编写java Test程序，通过@Befor进行时间计算。&lt;br>
更方便的方法直使JM框架。&lt;/p>
&lt;h3 id="jmh简介">JMH简介
&lt;/h3>&lt;p>JMH是新的microbenchmark（微基准测试）框架（2013年首次发布）。与其他众多框架相比它的特色优势在于，它是由Oracle实现JIT的相同人员开发的。特别是我想提一下Aleksey Shipilev和他优秀的博客文章。JMH可能与最新的Oracle JRE同步，其结果可信度很高。&lt;/p>
&lt;h3 id="idea的jmh插件">IDEA的JMH插件
&lt;/h3>&lt;p>直接使用JMH需要额外编写一些入口方法、增加依赖等，并不是特别方便，而IDEA有插件支持JMH。打开&lt;code>Files-Settings&lt;/code>，找到&lt;code>Plugins&lt;/code>选项卡，安装&lt;code>JMH Plugin&lt;/code>插件，安装后重启如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin.png"
width="1019"
height="458"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu3368180630478916792.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/jmhPlugin_hu10432207460025095297.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;h3 id="编写benchmark方法">编写BenchMark方法
&lt;/h3>&lt;p>安装&lt;code>JMH Plugin&lt;/code>插件之后无需编写入口方法、增加依赖，可以直接关注具体的测试。&lt;br>
编写一个简单例子，测试我们容器的测试用例吞吐量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@BenchmarkMode&lt;/span>(Mode.&lt;span style="color:#06b6ef">Throughput&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletBenchmark&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl(&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Warmup&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Measurement&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">json&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl(&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/json?msg=1&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getUrl&lt;/span>(String url, &lt;span style="color:#fec418">boolean&lt;/span> read) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BufferedReader br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InputStream is &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sbuf &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL reqURL &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> URL(url);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpURLConnection connection &lt;span style="color:#5bc4bf">=&lt;/span> (HttpURLConnection) reqURL.&lt;span style="color:#06b6ef">openConnection&lt;/span>(); &lt;span style="color:#776e71">// 进行连接，但是实际上getrequest要在下一句的connection.getInputStream() 函数中才会真正发到服务器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">setDoOutput&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">setUseCaches&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">setRequestMethod&lt;/span>(&lt;span style="color:#48b685">&amp;#34;GET&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">setConnectTimeout&lt;/span>(200);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">setDoInput&lt;/span>(&lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection.&lt;span style="color:#06b6ef">connect&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (read) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> BufferedReader(&lt;span style="color:#815ba4">new&lt;/span> InputStreamReader(connection.&lt;span style="color:#06b6ef">getInputStream&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String line;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> ((line &lt;span style="color:#5bc4bf">=&lt;/span> br.&lt;span style="color:#06b6ef">readLine&lt;/span>()) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbuf.&lt;span style="color:#06b6ef">append&lt;/span>(line).&lt;span style="color:#06b6ef">append&lt;/span>(&lt;span style="color:#48b685">&amp;#34;\n&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is &lt;span style="color:#5bc4bf">=&lt;/span> connection.&lt;span style="color:#06b6ef">getInputStream&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#06b6ef">out&lt;/span>.&lt;span style="color:#06b6ef">println&lt;/span>(&lt;span style="color:#48b685">&amp;#34;连接服务器&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> url &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;时发生错误：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> e.&lt;span style="color:#06b6ef">getMessage&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> br) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> br.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (is &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> sbuf.&lt;span style="color:#06b6ef">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@BenchmarkMode(Mode.Throughput)&lt;/code>表示测试吞吐量，即一秒内可以跑多少次测试方法。其他的测试模式如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">名称&lt;/th>
&lt;th style="text-align: left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Mode.Throughput&lt;/td>
&lt;td style="text-align: left">计算一个时间单位内操作数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Mode.AverageTime&lt;/td>
&lt;td style="text-align: left">计算平均运行时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Mode.SampleTime&lt;/td>
&lt;td style="text-align: left">计算一个方法的运行时间(包括百分位)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Mode.SingleShotTime&lt;/td>
&lt;td style="text-align: left">方法仅运行一次(用于冷测试模式)。或者特定批量大小的迭代多次运行；这种情况下JMH将计算批处理运行时间(一次批处理所有调用的总时间)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">这些模式的任意组合&lt;/td>
&lt;td style="text-align: left">可以指定这些模式的任意组合——该测试运行多次(取决于请求模式的数量)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Mode.All&lt;/td>
&lt;td style="text-align: left">所有模式依次运行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>接下来是具体的测试方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Benchmark&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Warmup&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 10)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Measurement&lt;/span>(iterations &lt;span style="color:#5bc4bf">=&lt;/span> 20)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">plaintext&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> getUrl(&lt;span style="color:#48b685">&amp;#34;http://localhost:9999/netty/plaintext&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中&lt;code>@Benchmark&lt;/code>注解表示当前方法是需要JMH执行测试的方法，&lt;code>@Warmup(iterations = 10)&lt;/code>表示每次正式测试前，先跑10次进行热身（不参与测试结果的计算），&lt;code>@Measurement(iterations = 20)&lt;/code>表示每次正式测试执行20次方法。&lt;/p>
&lt;h3 id="执行测试">执行测试
&lt;/h3>&lt;p>执行方法很简单，点击菜单&lt;code>Run-Run...&lt;/code>，弹出窗中选择当前类，即可：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh.png"
width="771"
height="577"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hu3813237002646152627.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh_hu17204076455614974613.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2.png"
width="302"
height="184"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu17129716215689611922.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%94/runJmh2_hu8986436290138308903.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="393px"
>&lt;br>
等测试完毕，就会打印出测试结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Result &lt;span style="color:#48b685">&amp;#34;io.gitlab.leibnizhu.sbnetty.benchmark.NettyServletBenchmark.plaintext&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6508.938 ±&lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span> 189.498 ops/s &lt;span style="color:#5bc4bf">[&lt;/span>Average&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">(&lt;/span>min, avg, max&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>157.637, 6508.938, 7098.929&lt;span style="color:#5bc4bf">)&lt;/span>, &lt;span style="color:#ef6155">stdev&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> 802.346
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI &lt;span style="color:#5bc4bf">(&lt;/span>99.9%&lt;span style="color:#5bc4bf">)&lt;/span>: &lt;span style="color:#5bc4bf">[&lt;/span>6319.440, 6698.436&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>assumes normal distribution&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Benchmark Mode Cnt Score Error Units
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.json thrpt &lt;span style="color:#f99b15">200&lt;/span> 6756.677 ± 182.976 ops/s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NettyServletBenchmark.plaintext thrpt &lt;span style="color:#f99b15">200&lt;/span> 6508.938 ± 189.498 ops/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到IDEA对该类两个带有&lt;code>@Benchmark&lt;/code>注解的方法分别进行了测试，测试结果分别是6.76kQps和6.51kQps（平均值）。&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（四）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/</link><pubDate>Sat, 02 Sep 2017 15:11:03 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/jinjia.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（四）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现四">基于Netty的Spring Boot内置Servlet容器的实现（四）
&lt;/h1>&lt;h2 id="registration注册器的实现">Registration注册器的实现
&lt;/h2>&lt;h3 id="设计与继承结构">设计与继承结构
&lt;/h3>&lt;p>在本系列第一篇提到了&lt;code>javax.servlet.Registration&lt;/code>接口，用于实现Filter和Servlet的动态注册，这个接口相对比较简单；有两个子接口，详见下面的UML图：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration.png"
width="332"
height="119"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration_hu14512417350773549214.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/registration_hu1417016919931916503.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="278"
data-flex-basis="669px"
>&lt;br>
我们将要分别实现&lt;code>FilterRegistration&lt;/code>和&lt;code>ServletRegistration&lt;/code>接口，为了保持与&lt;code>Registration&lt;/code>接口的继承关系相近，我们设计了三个类，分别是抽象类，Filter注册、Servlet注册：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">AbstractNettyRegistration&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Registration, Registration.&lt;span style="color:#06b6ef">Dynamic&lt;/span>, ServletConfig, FilterConfig{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> FilterRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span>{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些类构成的UML图如下：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration.png"
width="763"
height="305"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration_hu3084119071042590706.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9B%9B/nettyregistration_hu3997581211618031867.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;h3 id="代码实现">代码实现
&lt;/h3>&lt;p>在实际实现的过程中，忽略了很多用不到的方法，着重实现了加入Mapping以及获取Filter/Servlet实例的方法。&lt;br>
加入Mapping的方法由ServletContext处理（Mapping本身也是由ServletContext维护），而获取Filter/Servlet的方法使用的是类似于懒加载单例的方法，每个Registration实例维护自己的一个Filter/Servlet实例，首次获取的时候通过反射获取到实例，并将反射获取到的实例由Registration实例持有。具体实现代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyServletRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(getClass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialised;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Servlet servlet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> urlPatternMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyServletRegistration&lt;/span>(NettyContext context, String servletName, String className, Servlet servlet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>(servletName, className, context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Servlet &lt;span style="color:#06b6ef">getServlet&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>initialised) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> (&lt;span style="color:#815ba4">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>initialised) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> servlet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> (Servlet) Class.&lt;span style="color:#06b6ef">forName&lt;/span>(getClassName()).&lt;span style="color:#06b6ef">newInstance&lt;/span>(); &lt;span style="color:#776e71">//反射获取实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet.&lt;span style="color:#06b6ef">init&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>); &lt;span style="color:#776e71">//初始化Servlet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initialised &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servlet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">addMapping&lt;/span>(String... urlPatterns) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//在RequestUrlPatternMapper中会检查url Pattern是否冲突&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyContext context &lt;span style="color:#5bc4bf">=&lt;/span> getNettyContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (String urlPattern : urlPatterns) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.&lt;span style="color:#06b6ef">addServletMapping&lt;/span>(urlPattern, getName(), getServlet());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (ServletException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Servlet in NettyServletRegistration.&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternMappings.&lt;span style="color:#06b6ef">addAll&lt;/span>(Arrays.&lt;span style="color:#06b6ef">asList&lt;/span>(urlPatterns));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashSet&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(urlPatternMappings);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterRegistration&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractNettyRegistration &lt;span style="color:#815ba4">implements&lt;/span> FilterRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialised;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Filter filter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Collection&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> urlPatternMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyFilterRegistration&lt;/span>(NettyContext context, String filterName, String className, Filter filter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>(filterName, className, context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">filter&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> filter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Filter &lt;span style="color:#06b6ef">getFilter&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>initialised) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">synchronized&lt;/span> (&lt;span style="color:#815ba4">this&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>initialised) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> filter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter &lt;span style="color:#5bc4bf">=&lt;/span> (Filter) Class.&lt;span style="color:#06b6ef">forName&lt;/span>(getClassName()).&lt;span style="color:#06b6ef">newInstance&lt;/span>(); &lt;span style="color:#776e71">//反射获取实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter.&lt;span style="color:#06b6ef">init&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>); &lt;span style="color:#776e71">//初始化Filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initialised &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addMappingForUrlPatterns&lt;/span>(EnumSet&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>DispatcherType&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> dispatcherTypes, &lt;span style="color:#fec418">boolean&lt;/span> isMatchAfter, String... urlPatterns) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyContext context &lt;span style="color:#5bc4bf">=&lt;/span> getNettyContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (String urlPattern : urlPatterns) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.&lt;span style="color:#06b6ef">addFilterMapping&lt;/span>(dispatcherTypes, isMatchAfter, urlPattern);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternMappings.&lt;span style="color:#06b6ef">addAll&lt;/span>(Arrays.&lt;span style="color:#06b6ef">asList&lt;/span>(urlPatterns));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="filterchain过滤器链的实现">FilterChain过滤器链的实现
&lt;/h2>&lt;p>大家应该都知道过滤器链的概念，所有过滤器都在过滤器链上，当有请求进入，将依次经过每个适用的过滤器（根据过滤器的Url Pattern与请求的路径而不同），过滤器里执行&lt;code>doFilter()&lt;/code>方法让过滤器链执行下一个过滤器，直到最后一个，则执行Servlet的&lt;code>service()&lt;/code>方法。而过滤器链对应的接口&lt;code>javax.servlet.FilterChain&lt;/code>里面就一个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">FilterChain&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doFilter&lt;/span> ( ServletRequest request, ServletResponse response ) &lt;span style="color:#815ba4">throws&lt;/span> IOException, ServletException;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>显然，实现&lt;code>FilterChain&lt;/code>接口，应该要维护一个过滤器的数组或者List，而在&lt;code>doFilter()&lt;/code>方法里面，应该判断有没有下一个过滤器，有则调用其&lt;code>doFilter()&lt;/code>方法，无则调用当前请求对应Servlet实例的&lt;code>service()&lt;/code>方法，可以用迭代器或者记录游标（数组或List的下标）来实现。具体代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyFilterChain&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> FilterChain {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 考虑到每个请求只有一个线程处理，而且ServletContext在每次请求时都会new 一个SimpleFilterChain对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以这里把过滤器链的Iterator作为FilterChain的私有变量，没有线程安全问题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filterIterator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Servlet servlet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyFilterChain&lt;/span>(Servlet servlet, Iterable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filters) &lt;span style="color:#815ba4">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">filterIterator&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> checkNotNull(filters).&lt;span style="color:#06b6ef">iterator&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> checkNotNull(servlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 每个Filter在处理完请求之后调用FilterChain的这个方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 这时候应该找到下一个Filter，调用其doFilter()方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 如果没有下一个了，应该调用servlet的service()方法了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doFilter&lt;/span>(ServletRequest request, ServletResponse response) &lt;span style="color:#815ba4">throws&lt;/span> IOException, ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (filterIterator.&lt;span style="color:#06b6ef">hasNext&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Filter filter &lt;span style="color:#5bc4bf">=&lt;/span> filterIterator.&lt;span style="color:#06b6ef">next&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter.&lt;span style="color:#06b6ef">doFilter&lt;/span>(request, response, &lt;span style="color:#815ba4">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet.&lt;span style="color:#06b6ef">service&lt;/span>(request, response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="httpservletrequest的实现">HttpServletRequest的实现
&lt;/h2>&lt;p>接口&lt;code>javax.servlet.http.HttpServletRequest&lt;/code>的方法比较多，大概可以分为Cookie相关、Header相关、各种路径相关、Session相关、请求参数相关、请求协议/地址/端口相关、Attributes相关、异步相关、multipart/form-data相关（上传文件）等等方法，以上提到的方法本文基本实现了，还有一些没实现的是暂时用不到的。&lt;/p>
&lt;h3 id="cookie相关方法">Cookie相关方法
&lt;/h3>&lt;p>Cookie使用“懒解析”，就是用标识&lt;code>isCookieParsed&lt;/code>记录Cookie是否被解析过，初始化Request对象的时候不解析，在获取Cookiea相关方法被调用的时候再判断是否未解析，若未解析则解析再返回，否则直接返回。&lt;code>NettyHttpServletRequest&lt;/code>的构造方法传入了netty的&lt;code>HttpHeaders&lt;/code>实例，可以从中获取Cookie请求头，再进行解析。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Cookie 相关方法 开始 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> cookies;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">transient&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isCookieParsed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#06b6ef">getCookies&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>isCookieParsed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parseCookie();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cookies;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 解析request中的Cookie到本类的cookies数组中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseCookie&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isCookieParsed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String cookieOriginStr &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">get&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (cookieOriginStr &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>io.&lt;span style="color:#06b6ef">netty&lt;/span>.&lt;span style="color:#06b6ef">handler&lt;/span>.&lt;span style="color:#06b6ef">codec&lt;/span>.&lt;span style="color:#06b6ef">http&lt;/span>.&lt;span style="color:#06b6ef">cookie&lt;/span>.&lt;span style="color:#06b6ef">Cookie&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> nettyCookies &lt;span style="color:#5bc4bf">=&lt;/span> ServerCookieDecoder.&lt;span style="color:#06b6ef">LAX&lt;/span>.&lt;span style="color:#06b6ef">decode&lt;/span>(cookieOriginStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (nettyCookies.&lt;span style="color:#06b6ef">size&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">cookies&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Cookie&lt;span style="color:#5bc4bf">[&lt;/span>nettyCookies.&lt;span style="color:#06b6ef">size&lt;/span>()&lt;span style="color:#5bc4bf">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Iterator&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>io.&lt;span style="color:#06b6ef">netty&lt;/span>.&lt;span style="color:#06b6ef">handler&lt;/span>.&lt;span style="color:#06b6ef">codec&lt;/span>.&lt;span style="color:#06b6ef">http&lt;/span>.&lt;span style="color:#06b6ef">cookie&lt;/span>.&lt;span style="color:#06b6ef">Cookie&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> itr &lt;span style="color:#5bc4bf">=&lt;/span> nettyCookies.&lt;span style="color:#06b6ef">iterator&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> i &lt;span style="color:#5bc4bf">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> (itr.&lt;span style="color:#06b6ef">hasNext&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io.&lt;span style="color:#06b6ef">netty&lt;/span>.&lt;span style="color:#06b6ef">handler&lt;/span>.&lt;span style="color:#06b6ef">codec&lt;/span>.&lt;span style="color:#06b6ef">http&lt;/span>.&lt;span style="color:#06b6ef">cookie&lt;/span>.&lt;span style="color:#06b6ef">Cookie&lt;/span> nettyCookie &lt;span style="color:#5bc4bf">=&lt;/span> itr.&lt;span style="color:#06b6ef">next&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cookie servletCookie &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Cookie(nettyCookie.&lt;span style="color:#06b6ef">name&lt;/span>(), nettyCookie.&lt;span style="color:#06b6ef">value&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// servletCookie.setMaxAge(Ints.checkedCast(nettyCookie.maxAge()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(nettyCookie.&lt;span style="color:#06b6ef">domain&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) servletCookie.&lt;span style="color:#06b6ef">setDomain&lt;/span>(nettyCookie.&lt;span style="color:#06b6ef">domain&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(nettyCookie.&lt;span style="color:#06b6ef">path&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) servletCookie.&lt;span style="color:#06b6ef">setPath&lt;/span>(nettyCookie.&lt;span style="color:#06b6ef">path&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletCookie.&lt;span style="color:#06b6ef">setHttpOnly&lt;/span>(nettyCookie.&lt;span style="color:#06b6ef">isHttpOnly&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">cookies&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>i&lt;span style="color:#5bc4bf">++]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletCookie;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">isCookieParsed&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Cookie 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="header相关方法">Header相关方法
&lt;/h3>&lt;p>上面提到&lt;code>NettyHttpServletRequest&lt;/code>的构造方法传入了netty的&lt;code>HttpHeaders&lt;/code>实例，可以从中获取所有请求头，而Header相关方法的实现就靠他了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Header 相关方法 开始 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> HttpHeaders headers;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">long&lt;/span> &lt;span style="color:#06b6ef">getDateHeader&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">getTimeMillis&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getHeader&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">get&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getHeaders&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Collections.&lt;span style="color:#06b6ef">enumeration&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">getAll&lt;/span>(name));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getHeaderNames&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Collections.&lt;span style="color:#06b6ef">enumeration&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">names&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getIntHeader&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String headerStringValue &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">headers&lt;/span>.&lt;span style="color:#06b6ef">get&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (headerStringValue &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> Integer.&lt;span style="color:#06b6ef">parseInt&lt;/span>(headerStringValue);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Header 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="session相关方法">Session相关方法
&lt;/h3>&lt;p>Session相关方法相对多一些。Session的解析分两种，首先尝试从Cookie中获取Cookie（名为JSESSIONID），如果没有，则从请求路径中找类似&amp;quot;;jsessionid=*******&amp;ldquo;的参数作为SessionID。拿到SessionID后，再调用SessionManager的方法获取Session对象；而根据从哪里解析到的SessionID可以设置&lt;code>isCookieSession&lt;/code>和&lt;code>isURLSession&lt;/code>两个属性，用于&lt;code>isRequestedSessionIdFromCookie()&lt;/code>和&lt;code>isRequestedSessionIdFromURL()&lt;/code>方法。如果拿不到SessionID，则调用SessionManager的方法创建一个新Session。&lt;br>
至于Session和SessionManager的实现我们在下一小节再讲，值得注意的是，&lt;code>getSession()&lt;/code>方法返回的并不是我们定义的Session类实例，而是其门面类，是出于安全的考虑；这一点参考了Tomcat的做法（Tomcat的Request、Response、Session等对象都是用门面模式）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> NettyHttpSession session;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isCookieSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isURLSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 先后看请求路径和Cookie中是否有sessionid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 有，则从SessionManager获取session对象放入session属性
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 如果session对象过期，则创建一个新的并放入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 无，则创建一个新Session并放入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">parseSession&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sessionId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession curSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//从Cookie解析SessionID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionId &lt;span style="color:#5bc4bf">=&lt;/span> getSessionIdFromCookie();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(sessionId &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curSession &lt;span style="color:#5bc4bf">=&lt;/span> servletContext.&lt;span style="color:#06b6ef">getSessionManager&lt;/span>().&lt;span style="color:#06b6ef">getSession&lt;/span>(sessionId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> curSession) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">isCookieSession&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recoverySession(curSession);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">isCookieSession&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 从请求路径解析SessionID&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionId &lt;span style="color:#5bc4bf">=&lt;/span> getSessionIdFromUrl();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curSession &lt;span style="color:#5bc4bf">=&lt;/span> servletContext.&lt;span style="color:#06b6ef">getSessionManager&lt;/span>().&lt;span style="color:#06b6ef">getSession&lt;/span>(sessionId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> curSession){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">isURLSession&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recoverySession(curSession);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Cookie和请求参数中都没拿到Session，则创建一个&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 从URL解析到的SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getSessionIdFromUrl&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder u &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder(request.&lt;span style="color:#06b6ef">uri&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> sessionStart &lt;span style="color:#5bc4bf">=&lt;/span> u.&lt;span style="color:#06b6ef">toString&lt;/span>().&lt;span style="color:#06b6ef">indexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#34;;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> NettyHttpSession.&lt;span style="color:#06b6ef">SESSION_REQUEST_PARAMETER_NAME&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(sessionStart &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u.&lt;span style="color:#06b6ef">toString&lt;/span>().&lt;span style="color:#06b6ef">indexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#39;;&amp;#39;&lt;/span>, sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (sessionEnd &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u.&lt;span style="color:#06b6ef">toString&lt;/span>().&lt;span style="color:#06b6ef">indexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#39;?&amp;#39;&lt;/span>, sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (sessionEnd &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1) &lt;span style="color:#776e71">// still&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessionEnd &lt;span style="color:#5bc4bf">=&lt;/span> u.&lt;span style="color:#06b6ef">length&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> u.&lt;span style="color:#06b6ef">substring&lt;/span>(sessionStart &lt;span style="color:#5bc4bf">+&lt;/span> NettyHttpSession.&lt;span style="color:#06b6ef">SESSION_REQUEST_PARAMETER_NAME&lt;/span>.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">+&lt;/span> 2, sessionEnd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 从Cookie解析到的SessionID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">getSessionIdFromCookie&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Cookie&lt;span style="color:#5bc4bf">[]&lt;/span> cookies &lt;span style="color:#5bc4bf">=&lt;/span> getCookies();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(cookies &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (Cookie cookie : cookies) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (cookie.&lt;span style="color:#06b6ef">getName&lt;/span>().&lt;span style="color:#06b6ef">equals&lt;/span>(NettyHttpSession.&lt;span style="color:#06b6ef">SESSION_COOKIE_NAME&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> cookie.&lt;span style="color:#06b6ef">getValue&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 恢复旧Session
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param curSession 要恢复的Session对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">recoverySession&lt;/span>(NettyHttpSession curSession) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span>.&lt;span style="color:#06b6ef">setNew&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">servletContext&lt;/span>.&lt;span style="color:#06b6ef">getSessionManager&lt;/span>().&lt;span style="color:#06b6ef">updateAccessTime&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>(&lt;span style="color:#fec418">boolean&lt;/span> create) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> valid &lt;span style="color:#5bc4bf">=&lt;/span> isRequestedSessionIdValid(); &lt;span style="color:#776e71">//在管理器存在，且没到期&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//可用则直接返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (valid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session.&lt;span style="color:#06b6ef">getSession&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//不可用则判断是否新建&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>create) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>; &lt;span style="color:#776e71">//如果过期了设为null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//不可用且允许新建则新建之&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span>.&lt;span style="color:#06b6ef">getSession&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> getSession(&lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">changeSessionId&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> createtSession();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">session&lt;/span>.&lt;span style="color:#06b6ef">getId&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">createtSession&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletContext.&lt;span style="color:#06b6ef">getSessionManager&lt;/span>().&lt;span style="color:#06b6ef">createSession&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdValid&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletContext.&lt;span style="color:#06b6ef">getSessionManager&lt;/span>().&lt;span style="color:#06b6ef">checkValid&lt;/span>(session);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromCookie&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isCookieSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromURL&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isURLSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Deprecated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isRequestedSessionIdFromUrl&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isRequestedSessionIdFromURL();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getRequestedSessionId&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session.&lt;span style="color:#06b6ef">getId&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/*====== Session 相关方法 结束 ======*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="httpservletresponse实现">HttpServletResponse实现
&lt;/h2>&lt;p>HttpServletResponse接口相对简单一点，方法少一点，下面列举出部分方法的实现。&lt;/p>
&lt;h3 id="header相关方法-1">Header相关方法
&lt;/h3>&lt;p>这里的Header指响应头。&lt;code>NettyHttpServletResponse&lt;/code>的构造方法里传入了netty的&lt;code>HttpResponse&lt;/code>对象，默认的调用是传入一个200的正常HTTP响应。我们可以通过这个&lt;code>HttpResponse&lt;/code>对象的&lt;code>headers()&lt;/code>方法对响应头进行操作。具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setDateHeader&lt;/span>(String name, &lt;span style="color:#fec418">long&lt;/span> date) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(name, date);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addDateHeader&lt;/span>(String name, &lt;span style="color:#fec418">long&lt;/span> date) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">add&lt;/span>(name, date);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setHeader&lt;/span>(String name, String value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0 &lt;span style="color:#5bc4bf">||&lt;/span> value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isCommitted()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (setHeaderField(name, value)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(name, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">setHeaderField&lt;/span>(String name, String value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">char&lt;/span> c &lt;span style="color:#5bc4bf">=&lt;/span> name.&lt;span style="color:#06b6ef">charAt&lt;/span>(0);&lt;span style="color:#776e71">//减少判断的时间，提高效率&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#39;C&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> c &lt;span style="color:#5bc4bf">||&lt;/span> &lt;span style="color:#48b685">&amp;#39;c&amp;#39;&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (HttpHeaderNames.&lt;span style="color:#06b6ef">CONTENT_TYPE&lt;/span>.&lt;span style="color:#06b6ef">contentEqualsIgnoreCase&lt;/span>(name)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setContentType(value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addHeader&lt;/span>(String name, String value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0 &lt;span style="color:#5bc4bf">||&lt;/span> value &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isCommitted()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (setHeaderField(name, value)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">add&lt;/span>(name, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setIntHeader&lt;/span>(String name, &lt;span style="color:#fec418">int&lt;/span> value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isCommitted()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(name, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addIntHeader&lt;/span>(String name, &lt;span style="color:#fec418">int&lt;/span> value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (name &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> name.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isCommitted()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">add&lt;/span>(name, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="getnettyresponse方法">getNettyResponse()方法
&lt;/h3>&lt;p>方法&lt;code>public HttpResponse getNettyResponse()&lt;/code>是我们自己定义的，用于响应输出流在写入时做的一些基本处理，主要是请求头的处理，具体代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 设置基本的请求头
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> HttpResponse &lt;span style="color:#06b6ef">getNettyResponse&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (committed) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> committed &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpHeaders headers &lt;span style="color:#5bc4bf">=&lt;/span> response.&lt;span style="color:#06b6ef">headers&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> contentType) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> characterEncoding &lt;span style="color:#5bc4bf">?&lt;/span> contentType : contentType &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;; charset=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> characterEncoding; &lt;span style="color:#776e71">//Content Type 响应头的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers.&lt;span style="color:#06b6ef">set&lt;/span>(HttpHeaderNames.&lt;span style="color:#06b6ef">CONTENT_TYPE&lt;/span>, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CharSequence date &lt;span style="color:#5bc4bf">=&lt;/span> getFormattedDate();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers.&lt;span style="color:#06b6ef">set&lt;/span>(HttpHeaderNames.&lt;span style="color:#06b6ef">DATE&lt;/span>, date); &lt;span style="color:#776e71">// 时间日期响应头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers.&lt;span style="color:#06b6ef">set&lt;/span>(HttpHeaderNames.&lt;span style="color:#06b6ef">SERVER&lt;/span>, servletContext.&lt;span style="color:#06b6ef">getServerInfo&lt;/span>()); &lt;span style="color:#776e71">//服务器信息响应头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// cookies处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">// long curTime = System.currentTimeMillis(); //用于根据maxAge计算Cookie的Expires&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//先处理Session ，如果是新Session需要通过Cookie写入&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (request.&lt;span style="color:#06b6ef">getSession&lt;/span>().&lt;span style="color:#06b6ef">isNew&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sessionCookieStr &lt;span style="color:#5bc4bf">=&lt;/span> NettyHttpSession.&lt;span style="color:#06b6ef">SESSION_COOKIE_NAME&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> request.&lt;span style="color:#06b6ef">getRequestedSessionId&lt;/span>() &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;; path=/; domain=&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> request.&lt;span style="color:#06b6ef">getServerName&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers.&lt;span style="color:#06b6ef">add&lt;/span>(HttpHeaderNames.&lt;span style="color:#06b6ef">SET_COOKIE&lt;/span>, sessionCookieStr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//其他业务或框架设置的cookie，逐条写入到响应头去&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (Cookie cookie : cookies) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder sb &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#06b6ef">append&lt;/span>(cookie.&lt;span style="color:#06b6ef">getName&lt;/span>()).&lt;span style="color:#06b6ef">append&lt;/span>(&lt;span style="color:#48b685">&amp;#34;=&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">append&lt;/span>(cookie.&lt;span style="color:#06b6ef">getValue&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">append&lt;/span>(&lt;span style="color:#48b685">&amp;#34;; max-Age=&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">append&lt;/span>(cookie.&lt;span style="color:#06b6ef">getMaxAge&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (cookie.&lt;span style="color:#06b6ef">getPath&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) sb.&lt;span style="color:#06b6ef">append&lt;/span>(&lt;span style="color:#48b685">&amp;#34;; path=&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">append&lt;/span>(cookie.&lt;span style="color:#06b6ef">getPath&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (cookie.&lt;span style="color:#06b6ef">getDomain&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) sb.&lt;span style="color:#06b6ef">append&lt;/span>(&lt;span style="color:#48b685">&amp;#34;; domain=&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">append&lt;/span>(cookie.&lt;span style="color:#06b6ef">getDomain&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers.&lt;span style="color:#06b6ef">add&lt;/span>(HttpHeaderNames.&lt;span style="color:#06b6ef">SET_COOKIE&lt;/span>, sb.&lt;span style="color:#06b6ef">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="session实现">Session实现
&lt;/h2>&lt;p>Session相关的包括Session实现类&lt;code>NettyHttpSession&lt;/code>，Sessionn门面包装类&lt;code>NettyHttpSessionFacade&lt;/code>，以及Session管理器&lt;code>NettySessionManager&lt;/code>。&lt;br>
门面类前面提及到了，构造的时候传入一个&lt;code>NettyHttpSession&lt;/code>实例并持有，所有&lt;code>HttpSession&lt;/code>接口的方法都调用&lt;code>NettyHttpSession&lt;/code>实例的对应方法去处理。&lt;br>
Session管理器&lt;code>NettySessionManager&lt;/code>是单例，由&lt;code>NettyContext&lt;/code>实例持有，负责存储所有Session的映射，方便其他类根据SessionID去获取Session对象，提供创建新Session的方法，允许更新Session访问时间，同时定时清理过期的Session。&lt;br>
每个&lt;code>NettyHttpSession&lt;/code>实例都持有&lt;code>NettySessionManager&lt;/code>的引用，实现了&lt;code>HttpSession&lt;/code>接口。&lt;/p>
&lt;h3 id="nettyhttpsession">NettyHttpSession
&lt;/h3>&lt;p>实现比较简单，Attribute由对象持有的HashMap进行存储，自身保存ID、创建时间、访问时间、生命周期等信息。
具体代码如下（部分过时的方法、简单的getter不列出）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyHttpSession&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> HttpSession, Serializable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SESSION_COOKIE_NAME &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;JSESSIONID&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SESSION_REQUEST_PARAMETER_NAME &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;jsessionid&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> NettySessionManager manager;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">long&lt;/span> creationTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">long&lt;/span> lastAccessedTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">int&lt;/span> interval &lt;span style="color:#5bc4bf">=&lt;/span> NettySessionManager.&lt;span style="color:#06b6ef">SESSION_LIFE_SECONDS&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession(String id, NettySessionManager manager){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">long&lt;/span> curTime &lt;span style="color:#5bc4bf">=&lt;/span> System.&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">creationTime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">lastAccessedTime&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> curTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">id&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">manager&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> manager;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">sessionFacade&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpSessionFacade(&lt;span style="color:#815ba4">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> HttpSession sessionFacade;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> HttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> sessionFacade;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">updateAccessTime&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastAccessedTime &lt;span style="color:#5bc4bf">=&lt;/span> System.&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setMaxInactiveInterval&lt;/span>(&lt;span style="color:#fec418">int&lt;/span> interval) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">interval&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> interval;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ConcurrentHashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getAttribute&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes.&lt;span style="color:#06b6ef">get&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setAttribute&lt;/span>(String name, Object value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">put&lt;/span>(name, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeAttribute&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">remove&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">invalidate&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">clear&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manager.&lt;span style="color:#06b6ef">invalidate&lt;/span>(&lt;span style="color:#815ba4">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manager &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> isNew &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">isNew&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> isNew;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setNew&lt;/span>(&lt;span style="color:#fec418">boolean&lt;/span> isNew){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">isNew&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> isNew;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 是否过期
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">expire&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> System.&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>() &lt;span style="color:#5bc4bf">-&lt;/span> creationTime &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> interval &lt;span style="color:#5bc4bf">*&lt;/span> 1000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nettysessionmanager">NettySessionManager
&lt;/h3>&lt;p>Session管理器没有现成的接口，因为比较简单所以也没抽出接口，自己在实现的过程中根据需求写了一些public方法：&lt;/p>
&lt;ul>
&lt;li>使用ConcurrentHashMap存储所有Session。&lt;/li>
&lt;li>在构造的同时开启一个线程，每隔&lt;code>SESSION_LIFE_CHECK_INTER&lt;/code>毫秒扫描所有Session判断是否过期需要清除（有待优化，比如等待时间按最快过期的session的过期时间，或者记录预计下次需要处理的个数，减少遍历的数量）。&lt;/li>
&lt;li>SessionID是6位随机数字+时间戳翻转。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettySessionManager&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(getClass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> NettyContext servletContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, NettyHttpSession&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> sessions &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ConcurrentHashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_SECONDS &lt;span style="color:#5bc4bf">=&lt;/span> 60 &lt;span style="color:#5bc4bf">*&lt;/span> 30;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_MILLISECONDS &lt;span style="color:#5bc4bf">=&lt;/span> SESSION_LIFE_SECONDS &lt;span style="color:#5bc4bf">*&lt;/span> 1000;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> SESSION_LIFE_CHECK_INTER &lt;span style="color:#5bc4bf">=&lt;/span> 1000 &lt;span style="color:#5bc4bf">*&lt;/span> 60;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettySessionManager&lt;/span>(NettyContext servletContext){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">servletContext&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> Thread(&lt;span style="color:#815ba4">new&lt;/span> checkInvalidSessions(), &lt;span style="color:#48b685">&amp;#34;Session-Check&amp;#34;&lt;/span>).&lt;span style="color:#06b6ef">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">invalidate&lt;/span>(HttpSession session) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessions.&lt;span style="color:#06b6ef">remove&lt;/span>(session.&lt;span style="color:#06b6ef">getId&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">updateAccessTime&lt;/span>(NettyHttpSession session){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session.&lt;span style="color:#06b6ef">updateAccessTime&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> &lt;span style="color:#06b6ef">checkValid&lt;/span>(NettyHttpSession session) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> sessions.&lt;span style="color:#06b6ef">get&lt;/span>(session.&lt;span style="color:#06b6ef">getId&lt;/span>()) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>session.&lt;span style="color:#06b6ef">expire&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">getSession&lt;/span>(String id){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> id &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> : sessions.&lt;span style="color:#06b6ef">get&lt;/span>(id);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> NettyHttpSession &lt;span style="color:#06b6ef">createSession&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String id &lt;span style="color:#5bc4bf">=&lt;/span> createUniqueSessionId();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpSession newSession &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpSession(id, &lt;span style="color:#815ba4">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sessions.&lt;span style="color:#06b6ef">put&lt;/span>(id ,newSession);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> newSession;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String &lt;span style="color:#06b6ef">createUniqueSessionId&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String prefix &lt;span style="color:#5bc4bf">=&lt;/span> String.&lt;span style="color:#06b6ef">valueOf&lt;/span>(100000 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random().&lt;span style="color:#06b6ef">nextInt&lt;/span>(899999));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> StringBuilder().&lt;span style="color:#06b6ef">append&lt;/span>(System.&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>()).&lt;span style="color:#06b6ef">reverse&lt;/span>().&lt;span style="color:#06b6ef">append&lt;/span>(prefix).&lt;span style="color:#06b6ef">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setOldSession&lt;/span>(NettyHttpSession session) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(session &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session.&lt;span style="color:#06b6ef">setNew&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 超时的Session无效化，定期执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">checkInvalidSessions&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Runnable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Session Manager expire-checking thread has been started...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span>(&lt;span style="color:#815ba4">true&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread.&lt;span style="color:#06b6ef">sleep&lt;/span>(SESSION_LIFE_CHECK_INTER);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (InterruptedException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">long&lt;/span> curTime &lt;span style="color:#5bc4bf">=&lt;/span> System.&lt;span style="color:#06b6ef">currentTimeMillis&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(NettyHttpSession session : sessions.&lt;span style="color:#06b6ef">values&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(session.&lt;span style="color:#06b6ef">expire&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Session(ID={}) is invalidated by Session Manager&amp;#34;&lt;/span>, session.&lt;span style="color:#06b6ef">getId&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> session.&lt;span style="color:#06b6ef">invalidate&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可以改进的地方">可以改进的地方
&lt;/h3>&lt;ul>
&lt;li>Session持久化，包括可选的持久化时间间隔、shutdown自动持久化、startup自动读入。&lt;/li>
&lt;li>Redis集中存储Session，便于服务集群使用&lt;/li>
&lt;li>优化解析速度&lt;/li>
&lt;/ul></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（三）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/</link><pubDate>Sun, 27 Aug 2017 08:52:03 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/yuyuko2.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（三）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现三">基于Netty的Spring Boot内置Servlet容器的实现（三）
&lt;/h1>&lt;h2 id="embeddedservletcontainer实现">EmbeddedServletContainer实现
&lt;/h2>&lt;h3 id="spring-boot启动过程与embeddedservletcontainer">Spring Boot启动过程与EmbeddedServletContainer
&lt;/h3>&lt;p>一般来说，Spring Boot的应用如果使用内置Servlet容器单独运行，我们都会在main()方法中调用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>SpringApplication.&lt;span style="color:#06b6ef">run&lt;/span>(Object source, String... args);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法。通过&lt;code>source&lt;/code>参数构造一个&lt;code>SpringApplication&lt;/code>对象再调用其&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> ConfigurableApplicationContext &lt;span style="color:#06b6ef">run&lt;/span>(String... args);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，这个方法先通过&lt;code>createApplicationContext()&lt;/code>创建一个&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>对象，随后会调用到&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">refresh&lt;/span>(ApplicationContext applicationContext);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，这个方法会调用到&lt;code>AbstractApplicationContext&lt;/code>的&lt;code>refresh()&lt;/code>方法。而通过下面的UML图可以看到，&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>是&lt;code>AbstractApplicationContext&lt;/code>的子类。
&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext.png"
width="1259"
height="674"
srcset="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext_hu14928075201050326323.png 480w, https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%89/EmbeddedWebApplicationContext_hu2684173552953341142.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="186"
data-flex-basis="448px"
>
实际上，这里使用了模板设计模式，&lt;code>refresh()&lt;/code>的具体流程由父类&lt;code>AbstractApplicationContext&lt;/code>定义，具体的一些操作由子类去实现，在子类调用&lt;code>refresh()&lt;/code>方法的时候，调用的是子类实现的操作方法，如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">onRefresh&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> BeansException
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法。这个方法在&lt;code>AnnotationConfigEmbeddedWebApplicationContext&lt;/code>的父类&lt;code>EmbeddedWebApplicationContext&lt;/code>中有实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">onRefresh&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>.&lt;span style="color:#06b6ef">onRefresh&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">createEmbeddedServletContainer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Throwable var2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ApplicationContextException(&lt;span style="color:#48b685">&amp;#34;Unable to start embedded container&amp;#34;&lt;/span>, var2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">createEmbeddedServletContainer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServletContext localServletContext &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">getServletContext&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (localContainer &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> localServletContext &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainerFactory containerFactory &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">getEmbeddedServletContainerFactory&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> containerFactory.&lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> ServletContextInitializer&lt;span style="color:#5bc4bf">[]&lt;/span>{&lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">getSelfInitializer&lt;/span>()});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (localServletContext &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">getSelfInitializer&lt;/span>().&lt;span style="color:#06b6ef">onStartup&lt;/span>(localServletContext);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (ServletException var4) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ApplicationContextException(&lt;span style="color:#48b685">&amp;#34;Cannot initialize servlet context&amp;#34;&lt;/span>, var4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">initPropertySources&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>检查embeddedServletContainer私有变量是否为空，为空的话获取&lt;code>EmbeddedServletContainerFactory&lt;/code>工厂类（就是我们写的&lt;code>EmbeddedNettyFactory&lt;/code>），获取到&lt;code>EmbeddedServletContainer&lt;/code>实例并赋值给&lt;code>this.embeddedServletContainer&lt;/code>。&lt;br>
在模板方法&lt;code>AbstractApplicationContext.refresh()&lt;/code>中，调用&lt;code>onRefresh()&lt;/code>后，会继续调用&lt;code>finishRefresh()&lt;/code>，通过上面的分析我们知道实际调用的是&lt;code>EmbeddedWebApplicationContext.finishRefresh()&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">finishRefresh&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>.&lt;span style="color:#06b6ef">finishRefresh&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">startEmbeddedServletContainer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (localContainer &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">publishEvent&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerInitializedEvent(&lt;span style="color:#815ba4">this&lt;/span>, localContainer));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">startEmbeddedServletContainer&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EmbeddedServletContainer localContainer &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">embeddedServletContainer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (localContainer &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localContainer.&lt;span style="color:#06b6ef">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> localContainer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到他调用了私有方法&lt;code>startEmbeddedServletContainer()&lt;/code>启动容器，在这个方法里面，获取&lt;code>this.embeddedServletContainer&lt;/code>（就是我们本文要实现的&lt;code>NettyContainer&lt;/code>）然后执行其&lt;code>start()&lt;/code>方法，以启动内置Servlet容器。&lt;br>
因此我们应该在&lt;code>EmbeddedServletContainer&lt;/code>实现类的&lt;code>start()&lt;/code>对Netty服务器进行初始化。&lt;/p>
&lt;h3 id="nettycontainer">NettyContainer
&lt;/h3>&lt;p>自己编写的内置Servlet容器需要实现&lt;code>EmbeddedServletContainer&lt;/code>接口，具体包括以下三个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">interface&lt;/span> &lt;span style="color:#fec418">EmbeddedServletContainer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">start&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException; &lt;span style="color:#776e71">//Spring Boot启动时调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">stop&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException; &lt;span style="color:#776e71">//Spring Boot关闭时调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getPort&lt;/span>(); &lt;span style="color:#776e71">//获取端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这几个方法的用途比较清晰明确了，接下来就是实现。&lt;/p>
&lt;h4 id="构造方法">构造方法
&lt;/h4>&lt;p>首先在之前写的&lt;code>EmbeddedNettyFactory&lt;/code>工厂类里面，需要调用将要写的&lt;code>EmbeddedNettyFactory&lt;/code>的构造方法，并将必要的参数传入其构造方法，比如端口号、以及已经i初始化完毕的ServletContext实例。
构造方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> InetSocketAddress address; &lt;span style="color:#776e71">//监听端口地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> NettyContext context; &lt;span style="color:#776e71">//Context&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyContainer&lt;/span>(InetSocketAddress address, NettyContext context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">address&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> address;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> context;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>EmbeddedNettyFactory&lt;/code>中修改为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>(ServletContextInitializer... initializers) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*…………………………*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//return null;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyContainer(address, context); &lt;span style="color:#776e71">//初始化容器并返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">int&lt;/span> &lt;span style="color:#06b6ef">getPort&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> address.&lt;span style="color:#06b6ef">getPort&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="start">start()
&lt;/h4>&lt;p>通过以上的分析，我们知道&lt;code>EmbeddedServletContainer&lt;/code>的&lt;code>start()&lt;/code>是由&lt;code>AbstractApplicationContext.refresh()&lt;/code>模板方法负责调用启动的，我们应该在这个方法里面初始化Netty服务器。Netty的启动大家应该比较清楚了，无非就是设置两个&lt;code>EventLoopGroup&lt;/code>用于处理请求的获取与读写，并设置&lt;code>Pipeline&lt;/code>上的&lt;code>Handler&lt;/code>，最后绑定端口，启动服务。以下是具体实现的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">start&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletContext.&lt;span style="color:#06b6ef">setInitialised&lt;/span>(&lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServerBootstrap sb &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServerBootstrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//根据不同系统初始化对应的EventLoopGroup&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#34;Linux&amp;#34;&lt;/span>.&lt;span style="color:#06b6ef">equals&lt;/span>(StandardSystemProperty.&lt;span style="color:#06b6ef">OS_NAME&lt;/span>.&lt;span style="color:#06b6ef">value&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EpollEventLoopGroup(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EpollEventLoopGroup();&lt;span style="color:#776e71">//不带参数，线程数传入0,实际解析为 Math.max(1, SystemPropertyUtil.getInt(&amp;#34;io.netty.eventLoopThreads&amp;#34;, Runtime.getRuntime().availableProcessors() * 2));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#06b6ef">channel&lt;/span>(EpollServerSocketChannel.&lt;span style="color:#06b6ef">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">group&lt;/span>(bossGroup, workerGroup)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">option&lt;/span>(EpollChannelOption.&lt;span style="color:#06b6ef">TCP_CORK&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NioEventLoopGroup(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NioEventLoopGroup();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#06b6ef">channel&lt;/span>(NioServerSocketChannel.&lt;span style="color:#06b6ef">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">group&lt;/span>(bossGroup, workerGroup);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#06b6ef">option&lt;/span>(ChannelOption.&lt;span style="color:#06b6ef">TCP_NODELAY&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">option&lt;/span>(ChannelOption.&lt;span style="color:#06b6ef">SO_REUSEADDR&lt;/span>, &lt;span style="color:#815ba4">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#06b6ef">option&lt;/span>(ChannelOption.&lt;span style="color:#06b6ef">SO_BACKLOG&lt;/span>, 100);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Bootstrap configuration: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> sb.&lt;span style="color:#06b6ef">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletExecutor &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultEventExecutorGroup(50);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#06b6ef">childHandler&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> ChannelInitializer&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>SocketChannel&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">initChannel&lt;/span>(SocketChannel ch) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChannelPipeline p &lt;span style="color:#5bc4bf">=&lt;/span> ch.&lt;span style="color:#06b6ef">pipeline&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.&lt;span style="color:#06b6ef">addLast&lt;/span>(&lt;span style="color:#48b685">&amp;#34;codec&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">new&lt;/span> HttpServerCodec(4096, 8192, 8192, &lt;span style="color:#815ba4">false&lt;/span>)); &lt;span style="color:#776e71">//HTTP编码解码Handler&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.&lt;span style="color:#06b6ef">addLast&lt;/span>(&lt;span style="color:#48b685">&amp;#34;servletInput&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">new&lt;/span> ServletContentHandler(servletContext)); &lt;span style="color:#776e71">//处理请求，读入数据，生成Request和Response对象&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.&lt;span style="color:#06b6ef">addLast&lt;/span>(checkNotNull(servletExecutor), &lt;span style="color:#48b685">&amp;#34;filterChain&amp;#34;&lt;/span>, &lt;span style="color:#815ba4">new&lt;/span> RequestDispatcherHandler(servletContext)); &lt;span style="color:#776e71">//获取请求分发器，让对应的Servlet处理请求，同时处理404情况&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletContext.&lt;span style="color:#06b6ef">setInitialised&lt;/span>(&lt;span style="color:#815ba4">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChannelFuture future &lt;span style="color:#5bc4bf">=&lt;/span> sb.&lt;span style="color:#06b6ef">bind&lt;/span>(address).&lt;span style="color:#06b6ef">awaitUninterruptibly&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Throwable cause &lt;span style="color:#5bc4bf">=&lt;/span> future.&lt;span style="color:#06b6ef">cause&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> cause) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerException(&lt;span style="color:#48b685">&amp;#34;Could not start Netty server&amp;#34;&lt;/span>, cause);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">info&lt;/span>(servletContext.&lt;span style="color:#06b6ef">getServerInfo&lt;/span>() &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; started on port: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> getPort());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有两个&lt;code>Handler&lt;/code>类是我们实现的——&lt;code>ServletContentHandler&lt;/code>和&lt;code>RequestDispatcherHandler&lt;/code>，我们将在后面讲解。&lt;/p>
&lt;h4 id="stop">stop()
&lt;/h4>&lt;p>在&lt;code>stop()&lt;/code>方法里应该关闭在&lt;code>start()&lt;/code>方法中开启的资源，以便Spring Boot关闭，防止资源/内存泄漏：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">stop&lt;/span>() &lt;span style="color:#815ba4">throws&lt;/span> EmbeddedServletContainerException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> bossGroup) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bossGroup.&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>().&lt;span style="color:#06b6ef">await&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> workerGroup) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerGroup.&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>().&lt;span style="color:#06b6ef">await&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> servletExecutor) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletExecutor.&lt;span style="color:#06b6ef">shutdownGracefully&lt;/span>().&lt;span style="color:#06b6ef">await&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (InterruptedException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedServletContainerException(&lt;span style="color:#48b685">&amp;#34;Container stop interrupted&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="netty服务设计">Netty服务设计
&lt;/h2>&lt;h3 id="设计思路">设计思路
&lt;/h3>&lt;p>看过Tomcat之类Servlet容器的源码的话，应该对Servleti容器设计有一点概念。&lt;/p>
&lt;ol>
&lt;li>首先我们需要通过Socket，处理HTTP连接，获取请求的数据，这一块可通过netty的API进行。&lt;/li>
&lt;li>然后对接收到的数据进行解析封装成&lt;code>HttpServletRequest&lt;/code>和&lt;code>HttpServletResponse&lt;/code>对象，这一块需要netty自带的http解码编码器，并自定义Handler来i实现。&lt;/li>
&lt;li>而&lt;code>HttpServletRequest&lt;/code>本身也需要一些处理，比如Cookie、Session、Attributes（懒解析），需要自行实现。&lt;/li>
&lt;li>接着需要对请求路径进行匹配，找到对应处理的Servlet， 这一部分前面已经实现了（2017-08-26似乎还有点Bug需要解决）。&lt;/li>
&lt;li>接下来就是调用对应Servlet的&lt;code>service()&lt;/code>方法，等待返回（在容器启动的时候需要对有on-startup的Servlet进行&lt;code>init()&lt;/code>方法的调用）。&lt;/li>
&lt;li>Servlet返回后，包装响应，处理异常和HTTP错误。&lt;/li>
&lt;li>HTTP编码响应返回。&lt;/li>
&lt;li>容器关闭的时候，调用所有已注册的Servlet的&lt;code>destroy()&lt;/code>方法，并关闭打开的资源。&lt;/li>
&lt;/ol>
&lt;h3 id="自定义netty的handler处理请求响应">自定义Netty的Handler处理请求响应
&lt;/h3>&lt;p>根据前面的分析，我们的netty服务需要三个Handler，其中HTTP解码编码的有现成的&lt;code>HttpServerCodec&lt;/code>，另外两个则需要我们自己实现。&lt;br>
首先是对请求进行封装的Handler， 功能：&lt;/p>
&lt;ul>
&lt;li>channel激活时， 开启一个新的输入流&lt;/li>
&lt;li>有信息/请求进入时，封装请求和响应对象，执行读操作&lt;/li>
&lt;li>channel恢复时，关闭输入流，等待下一次连接到来&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelActive&lt;/span>(ChannelHandlerContext ctx) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HttpRequestInputStream(ctx.&lt;span style="color:#06b6ef">channel&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead&lt;/span>(ChannelHandlerContext ctx, Object msg) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (msg &lt;span style="color:#815ba4">instanceof&lt;/span> HttpRequest) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpRequest request &lt;span style="color:#5bc4bf">=&lt;/span> (HttpRequest) msg;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpResponse response &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultHttpResponse(HttpVersion.&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>, HttpResponseStatus.&lt;span style="color:#06b6ef">OK&lt;/span>, &lt;span style="color:#815ba4">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpUtil.&lt;span style="color:#06b6ef">setKeepAlive&lt;/span>(response, HttpUtil.&lt;span style="color:#06b6ef">isKeepAlive&lt;/span>(request));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpServletResponse servletResponse &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpServletResponse(ctx, servletContext, response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyHttpServletRequest servletRequest &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyHttpServletRequest(ctx, servletContext, request, servletResponse, inputStream);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (HttpUtil.&lt;span style="color:#06b6ef">is100ContinueExpected&lt;/span>(request)) { &lt;span style="color:#776e71">//请求头包含Expect: 100-continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">write&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse(HttpVersion.&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>, HttpResponseStatus.&lt;span style="color:#06b6ef">CONTINUE&lt;/span>), ctx.&lt;span style="color:#06b6ef">voidPromise&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">fireChannelRead&lt;/span>(servletRequest);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (msg &lt;span style="color:#815ba4">instanceof&lt;/span> HttpContent) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream.&lt;span style="color:#06b6ef">addContent&lt;/span>((HttpContent) msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelInactive&lt;/span>(ChannelHandlerContext ctx) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputStream.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后是一个处理URL匹配分发请求的Handler，完成以下功能：&lt;/p>
&lt;ul>
&lt;li>读入请求数据时，对请求URI获取分发器&lt;/li>
&lt;li>找不到返回404错误.&lt;/li>
&lt;li>找到则调用FilterChain进行业务逻辑&lt;/li>
&lt;li>最后关闭输出流&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelReadComplete&lt;/span>(ChannelHandlerContext ctx) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead0&lt;/span>(ChannelHandlerContext ctx, NettyHttpServletRequest request) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletResponse servletResponse &lt;span style="color:#5bc4bf">=&lt;/span> (HttpServletResponse) request.&lt;span style="color:#06b6ef">getServletResponse&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyRequestDispatcher dispatcher &lt;span style="color:#5bc4bf">=&lt;/span> (NettyRequestDispatcher) context.&lt;span style="color:#06b6ef">getRequestDispatcher&lt;/span>(request.&lt;span style="color:#06b6ef">getRequestURI&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (dispatcher &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletResponse.&lt;span style="color:#06b6ef">sendError&lt;/span>(404);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher.&lt;span style="color:#06b6ef">dispatch&lt;/span>(request, servletResponse);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>request.&lt;span style="color:#06b6ef">isAsyncStarted&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletResponse.&lt;span style="color:#06b6ef">getOutputStream&lt;/span>().&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">exceptionCaught&lt;/span>(ChannelHandlerContext ctx, Throwable cause) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Unexpected exception caught during request&amp;#34;&lt;/span>, cause);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（二）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/</link><pubDate>Thu, 24 Aug 2017 17:43:37 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BA%8C/sanae.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（二）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现二">基于Netty的Spring Boot内置Servlet容器的实现（二）
&lt;/h1>&lt;h2 id="实现servlet-context接口">实现Servlet Context接口
&lt;/h2>&lt;h3 id="servlet-context接口简介">Servlet Context接口简介
&lt;/h3>&lt;p>接口&lt;code>ServletContext&lt;/code>定义了一系列方法用于与相应的servlet容器通信，比如：获得文件的MIME类型，分派请求，或者是向日志文件写日志等。每一个web-app只能有一个&lt;code>ServletContext&lt;/code>，webapp可以是一个放置有web application 文件的文件夹，也可以是一个.war的文件。&lt;code>ServletContext&lt;/code>对象包含在&lt;code>ServletConfig&lt;/code>对象之中，&lt;code>ServletConfig&lt;/code>对象在servlet初始化时提供servlet对象。
接口&lt;code>ServletContext&lt;/code>定义的方法比较多，大致可以分为：添加和配置Servlet、添加和配置Filter、添加和配置Listener、添加Servlet、Filter和Listener的注解处理需求、初始化参数、Context属性、资源获取等几大类方法。&lt;br>
具体可以参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://tomcat.apache.org/tomcat-8.0-doc/servletapi/index.html" target="_blank" rel="noopener"
>Tomcat的JavaDoc&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://waylau.gitbooks.io/servlet-3-1-specification/docs/Servlet%20Context/4.1%20Introduction%20to%20the%20ServletContext%20Interface.html" target="_blank" rel="noopener"
>中文翻译的文档 ServletContext 接口介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="实现">实现
&lt;/h3>&lt;p>实现的思想：&lt;/p>
&lt;ul>
&lt;li>不处理的：InitParameter相关的方法、Listener相关方法——目前用不到&lt;/li>
&lt;li>以后处理的：Session Cookie相关的方法等待实现&lt;/li>
&lt;li>Context的Attributes用&lt;code>Hashtable&lt;/code>实现，主要是考虑到相关的方法需要返回&lt;code>Enumeration&lt;/code>类型，用&lt;code>Hashtable&lt;/code>有现成方法可以返回。&lt;/li>
&lt;li>Filter的注册用&lt;code>HashMap&lt;/code>存储FilterName及对应&lt;code>Registration&lt;/code>的映射关系，暂时还没处理Filter的URL Pattern（所有注册的Filter对所有请求都会过滤，暂时可以满足需求）&lt;/li>
&lt;li>Servlet的注册也是用&lt;code>HashMap&lt;/code>存储ServletName及对应&lt;code>Registration&lt;/code>的映射关系，以及URL Pattern和ServletName的映射关系（相当与&lt;code>web.xml&lt;/code>里的配置）&lt;/li>
&lt;/ul>
&lt;p>这里列出主要的方法，一些没具体实现，或者比较简单的方法就省略了（部分代码参考了Tomcat 8.0.45的源码）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.core&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * ServletContext实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">NettyContext&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> ServletContext {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(getClass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String contextPath; &lt;span style="color:#776e71">//保证不以“/”结尾&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> ClassLoader classLoader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String serverInfo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">volatile&lt;/span> &lt;span style="color:#fec418">boolean&lt;/span> initialized; &lt;span style="color:#776e71">//记录是否初始化完毕&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> RequestUrlPatternMapper servletUrlPatternMapper;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, NettyServletRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//getServletRegistration()等方法要用，key是ServletName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, NettyFilterRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filters &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//getFilterRegistration()等方法要用，Key是FilterName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servletMappings &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//保存请求路径urlPattern与Servlet名的映射,urlPattern是不带contextPath的&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, Object&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> attributes &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Hashtable&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 默认构造方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param contextPath contextPath
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param classLoader classLoader
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param serverInfo 服务器信息，写在响应的server响应头字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">NettyContext&lt;/span>(String contextPath, ClassLoader classLoader, String serverInfo) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(contextPath.&lt;span style="color:#06b6ef">endsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> contextPath &lt;span style="color:#5bc4bf">=&lt;/span> contextPath.&lt;span style="color:#06b6ef">substring&lt;/span>(0, contextPath.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">-&lt;/span>1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">contextPath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> contextPath;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">classLoader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> classLoader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">serverInfo&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> serverInfo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletUrlPatternMapper &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RequestUrlPatternMapper(servletMappings, contextPath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">checkNotInitialised&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkState(&lt;span style="color:#5bc4bf">!&lt;/span>isInitialised(), &lt;span style="color:#48b685">&amp;#34;This method can not be called before the context has been initialised&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addServletMapping&lt;/span>(String urlPattern, String name, Servlet servlet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkNotInitialised();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletMappings.&lt;span style="color:#06b6ef">put&lt;/span>(urlPattern, checkNotNull(name));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletUrlPatternMapper.&lt;span style="color:#06b6ef">addWrapper&lt;/span>(urlPattern, servlet, name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addFilterMapping&lt;/span>(EnumSet&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>DispatcherType&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> dispatcherTypes, &lt;span style="color:#fec418">boolean&lt;/span> isMatchAfter, String urlPattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> checkNotInitialised();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 过滤器的urlPatter解析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getMimeType&lt;/span>(String file) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> MimeTypeUtil.&lt;span style="color:#06b6ef">getMimeTypeByFileName&lt;/span>(file);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getResourcePaths&lt;/span>(String path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> thePaths &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashSet&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>path.&lt;span style="color:#06b6ef">endsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">+=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String basePath &lt;span style="color:#5bc4bf">=&lt;/span> getRealPath(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (basePath &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File theBaseDir &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File(basePath);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>theBaseDir.&lt;span style="color:#06b6ef">exists&lt;/span>() &lt;span style="color:#5bc4bf">||&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>theBaseDir.&lt;span style="color:#06b6ef">isDirectory&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String theFiles&lt;span style="color:#5bc4bf">[]&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> theBaseDir.&lt;span style="color:#06b6ef">list&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (theFiles &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (String filename : theFiles) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File testFile &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File(basePath &lt;span style="color:#5bc4bf">+&lt;/span> File.&lt;span style="color:#06b6ef">separator&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> filename);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (testFile.&lt;span style="color:#06b6ef">isFile&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thePaths.&lt;span style="color:#06b6ef">add&lt;/span>(path &lt;span style="color:#5bc4bf">+&lt;/span> filename);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (testFile.&lt;span style="color:#06b6ef">isDirectory&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> thePaths.&lt;span style="color:#06b6ef">add&lt;/span>(path &lt;span style="color:#5bc4bf">+&lt;/span> filename &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> thePaths;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> URL &lt;span style="color:#06b6ef">getResource&lt;/span>(String path) &lt;span style="color:#815ba4">throws&lt;/span> MalformedURLException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>path.&lt;span style="color:#06b6ef">startsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MalformedURLException(&lt;span style="color:#48b685">&amp;#34;Path &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39; does not start with &amp;#39;/&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> URL url &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> URL(getClassLoader().&lt;span style="color:#06b6ef">getResource&lt;/span>(&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>), path.&lt;span style="color:#06b6ef">substring&lt;/span>(1));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url.&lt;span style="color:#06b6ef">openStream&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Throwable t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting InputStream of &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path, t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> url;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> InputStream &lt;span style="color:#06b6ef">getResourceAsStream&lt;/span>(String path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> getResource(path).&lt;span style="color:#06b6ef">openStream&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(e.&lt;span style="color:#06b6ef">getMessage&lt;/span>(), e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> RequestDispatcher &lt;span style="color:#06b6ef">getRequestDispatcher&lt;/span>(String path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName &lt;span style="color:#5bc4bf">=&lt;/span> servletUrlPatternMapper.&lt;span style="color:#06b6ef">getServletNameByRequestURI&lt;/span>(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Servlet servlet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> servletName &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> : servlets.&lt;span style="color:#06b6ef">get&lt;/span>(servletName).&lt;span style="color:#06b6ef">getServlet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (servlet &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 过滤器的urlPatter解析&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> allNeedFilters &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ArrayList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (NettyFilterRegistration registration : &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">filters&lt;/span>.&lt;span style="color:#06b6ef">values&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allNeedFilters.&lt;span style="color:#06b6ef">add&lt;/span>(registration.&lt;span style="color:#06b6ef">getFilter&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FilterChain filterChain &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> SimpleFilterChain(servlet, allNeedFilters);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyRequestDispatcher(&lt;span style="color:#815ba4">this&lt;/span>, filterChain);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (ServletException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Filter from NettyFilterRegistration of path &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getRealPath&lt;/span>(String path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>path.&lt;span style="color:#06b6ef">startsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File f &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> File(getResource(path).&lt;span style="color:#06b6ef">toURI&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> f.&lt;span style="color:#06b6ef">getAbsolutePath&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Throwable t) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting real path of &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> path, t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getServerInfo&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> serverInfo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// InitParameter相关的方法不实现（返回空/空集合）基本用不到&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Object &lt;span style="color:#06b6ef">getAttribute&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes.&lt;span style="color:#06b6ef">get&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Enumeration&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getAttributeNames&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> attributes.&lt;span style="color:#06b6ef">keys&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setAttribute&lt;/span>(String name, Object object) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">put&lt;/span>(name, object);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeAttribute&lt;/span>(String name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.&lt;span style="color:#06b6ef">remove&lt;/span>(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>(String servletName, String className) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet(servletName, className, &lt;span style="color:#815ba4">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>(String servletName, Servlet servlet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet(servletName, servlet.&lt;span style="color:#06b6ef">getClass&lt;/span>().&lt;span style="color:#06b6ef">getName&lt;/span>(), servlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>(String servletName, Class&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> Servlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servletClass) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addServlet(servletName, servletClass.&lt;span style="color:#06b6ef">getName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ServletRegistration.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>(String servletName, String className, Servlet servlet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyServletRegistration servletRegistration &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyServletRegistration(&lt;span style="color:#815ba4">this&lt;/span>, servletName, className, servlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlets.&lt;span style="color:#06b6ef">put&lt;/span>(servletName, servletRegistration);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> servletRegistration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax.&lt;span style="color:#06b6ef">servlet&lt;/span>.&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>(String filterName, String className) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter(filterName, className, &lt;span style="color:#815ba4">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax.&lt;span style="color:#06b6ef">servlet&lt;/span>.&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>(String filterName, Filter filter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter(filterName, filter.&lt;span style="color:#06b6ef">getClass&lt;/span>().&lt;span style="color:#06b6ef">getName&lt;/span>(), filter);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> javax.&lt;span style="color:#06b6ef">servlet&lt;/span>.&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>(String filterName, String className, Filter filter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NettyFilterRegistration filterRegistration &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> NettyFilterRegistration(&lt;span style="color:#815ba4">this&lt;/span>, filterName, className, filter);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filters.&lt;span style="color:#06b6ef">put&lt;/span>(filterName, filterRegistration);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filterRegistration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax.&lt;span style="color:#06b6ef">servlet&lt;/span>.&lt;span style="color:#06b6ef">FilterRegistration&lt;/span>.&lt;span style="color:#06b6ef">Dynamic&lt;/span> &lt;span style="color:#06b6ef">addFilter&lt;/span>(String filterName, Class&lt;span style="color:#5bc4bf">&amp;lt;?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> filterClass) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> addFilter(filterName, filterClass.&lt;span style="color:#06b6ef">getName&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T &lt;span style="color:#815ba4">extends&lt;/span> Filter&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> T &lt;span style="color:#06b6ef">createFilter&lt;/span>(Class&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> c) &lt;span style="color:#815ba4">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> c.&lt;span style="color:#06b6ef">newInstance&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (InstantiationException &lt;span style="color:#5bc4bf">|&lt;/span> IllegalAccessException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> javax.&lt;span style="color:#06b6ef">servlet&lt;/span>.&lt;span style="color:#06b6ef">FilterRegistration&lt;/span> &lt;span style="color:#06b6ef">getFilterRegistration&lt;/span>(String filterName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> filters.&lt;span style="color:#06b6ef">get&lt;/span>(filterName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> FilterRegistration&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">getFilterRegistrations&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> ImmutableMap.&lt;span style="color:#06b6ef">copyOf&lt;/span>(filters);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO Session Cookie相关的方法等待实现&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不支持Listener，现在很少用了吧&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="url-pattrn匹配查找">URL Pattrn匹配查找
&lt;/h3>&lt;p>参考Tomcat源码，设计了一个&lt;code>RequestUrlPatternMapper&lt;/code>类用于保存，计算URL-pattern与请求路径的匹配关系。在&lt;code>NettyContext&lt;/code>的&lt;code>public RequestDispatcher getRequestDispatcher(String path)&lt;/code>方法中可以看到对其的调用，传入请求的路径，返回对应处理的Servlet名称。此外在&lt;code>NettyContext&lt;/code>的&lt;code> public void addServletMapping(String urlPattern, String name, Servlet servlet)&lt;/code>方法中也调用该类，增加新的Servlet映射。&lt;br>
增加映射的时候，先后判断：&lt;/p>
&lt;ol>
&lt;li>路径匹配&lt;/li>
&lt;li>扩展名匹配&lt;/li>
&lt;li>默认匹配&lt;/li>
&lt;li>精确匹配&lt;/li>
&lt;/ol>
&lt;p>用&lt;code>MappedWrapper&lt;/code>类包装起新的Servlet，根据对应的匹配策略，放加入到&lt;code>ContextVersion&lt;/code>实例的&lt;code>wildcardWrappers&lt;/code>、&lt;code>extensionWrappers&lt;/code>、&lt;code>defaultWrapper&lt;/code>、&lt;code>exactWrappers&lt;/code>中进行保存。&lt;br>
在查询匹配的时候，处理完请求路径后，根据URL Pattern的定义，先后根据以下匹配方法进行匹配：&lt;/p>
&lt;ol>
&lt;li>精确匹配&lt;/li>
&lt;li>路径匹配&lt;/li>
&lt;li>后缀名匹配&lt;/li>
&lt;li>Welcome资源匹配&lt;/li>
&lt;li>默认Servlet匹配&lt;/li>
&lt;/ol>
&lt;p>使用&lt;code>MappingData&lt;/code>类实例对查询结果进行保存，每一级匹配如果已经找到对应的Servlet，那么下一级的匹配将不会进行，直接返回，此时&lt;code>MappingData&lt;/code>对象里保存的就是最终匹配到的结果。&lt;br>
具体的匹配中，精确匹配直接对Map进行查找即可，后缀名匹配类似，根据当前请求的后缀名进行精确匹配；而路径匹配，则是将路径进行降序排序，匹配的时候依次匹配，就能匹配到最长的那一个。&lt;br>
下面贴上主要的实现代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.utils&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存，计算URL-pattern与请求路径的匹配关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz.Hu
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Created on 2017-08-25 11:32.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">RequestUrlPatternMapper&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> Logger log &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(getClass());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> UrlPatternContext urlPatternContext;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> String contextPath;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">RequestUrlPatternMapper&lt;/span>(String contextPath) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">urlPatternContext&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> UrlPatternContext();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">contextPath&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> contextPath;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 增加映射关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param urlPattern urlPattern
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param servlet servlet对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param servletName servletName
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">addServlet&lt;/span>(String urlPattern, Servlet servlet, String servletName) &lt;span style="color:#815ba4">throws&lt;/span> ServletException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">endsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/*&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 路径匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern.&lt;span style="color:#06b6ef">substring&lt;/span>(0, urlPattern.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">-&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (MappedServlet ms : urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (ms.&lt;span style="color:#06b6ef">pattern&lt;/span>.&lt;span style="color:#06b6ef">equals&lt;/span>(pattern)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet(pattern, servlet, servletName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>.&lt;span style="color:#06b6ef">add&lt;/span>(newServlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>.&lt;span style="color:#06b6ef">sort&lt;/span>((o1, o2) &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> o2.&lt;span style="color:#06b6ef">pattern&lt;/span>.&lt;span style="color:#06b6ef">compareTo&lt;/span>(o1.&lt;span style="color:#06b6ef">pattern&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Curretn Wildcard URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays.&lt;span style="color:#06b6ef">toString&lt;/span>(urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>.&lt;span style="color:#06b6ef">toArray&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">startsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;*.&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 扩展名匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern.&lt;span style="color:#06b6ef">substring&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPatternContext.&lt;span style="color:#06b6ef">extensionServlets&lt;/span>.&lt;span style="color:#06b6ef">get&lt;/span>(pattern) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet(pattern, servlet, servletName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">extensionServlets&lt;/span>.&lt;span style="color:#06b6ef">put&lt;/span>(pattern, newServlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Curretn Extension URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays.&lt;span style="color:#06b6ef">toString&lt;/span>(urlPatternContext.&lt;span style="color:#06b6ef">extensionServlets&lt;/span>.&lt;span style="color:#06b6ef">keySet&lt;/span>().&lt;span style="color:#06b6ef">toArray&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">equals&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default资源匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet(&lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>, servlet, servletName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 精确匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPatternContext.&lt;span style="color:#06b6ef">exactServlets&lt;/span>.&lt;span style="color:#06b6ef">get&lt;/span>(pattern) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletException(&lt;span style="color:#48b685">&amp;#34;URL Pattern(&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> urlPattern &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#39;) already exists!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet newServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappedServlet(pattern, servlet, servletName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">exactServlets&lt;/span>.&lt;span style="color:#06b6ef">put&lt;/span>(pattern, newServlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">debug&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Curretn Exact URL Pattern List = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> Arrays.&lt;span style="color:#06b6ef">toString&lt;/span>(urlPatternContext.&lt;span style="color:#06b6ef">exactServlets&lt;/span>.&lt;span style="color:#06b6ef">keySet&lt;/span>().&lt;span style="color:#06b6ef">toArray&lt;/span>()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 删除映射关系
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param urlPattern
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">removeServlet&lt;/span>(String urlPattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">endsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/*&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//路径匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern.&lt;span style="color:#06b6ef">substring&lt;/span>(0, urlPattern.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">-&lt;/span> 2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>.&lt;span style="color:#06b6ef">removeIf&lt;/span>(mappedServlet &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> mappedServlet.&lt;span style="color:#06b6ef">pattern&lt;/span>.&lt;span style="color:#06b6ef">equals&lt;/span>(pattern));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">startsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;*.&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 扩展名匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern.&lt;span style="color:#06b6ef">substring&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">extensionServlets&lt;/span>.&lt;span style="color:#06b6ef">remove&lt;/span>(pattern);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">equals&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default资源匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 精确匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String pattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPattern.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">==&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#5bc4bf">=&lt;/span> urlPattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urlPatternContext.&lt;span style="color:#06b6ef">exactServlets&lt;/span>.&lt;span style="color:#06b6ef">remove&lt;/span>(pattern);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getServletNameByRequestURI&lt;/span>(String absoluteUri) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappingData mappingData &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> MappingData();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchRequestPath(absoluteUri, mappingData);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Throwing exception when getting Servlet Name by request URI, maybe cause by lacking of buffer size.&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Wrapper mapping.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @throws IOException buffer大小不足
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">matchRequestPath&lt;/span>(String absolutePath, MappingData mappingData) &lt;span style="color:#815ba4">throws&lt;/span> IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 处理ContextPath，获取访问的相对URI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">boolean&lt;/span> noServletPath &lt;span style="color:#5bc4bf">=&lt;/span> absolutePath.&lt;span style="color:#06b6ef">equals&lt;/span>(contextPath) &lt;span style="color:#5bc4bf">||&lt;/span> absolutePath.&lt;span style="color:#06b6ef">equals&lt;/span>(contextPath &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>absolutePath.&lt;span style="color:#06b6ef">startsWith&lt;/span>(contextPath)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String path &lt;span style="color:#5bc4bf">=&lt;/span> noServletPath &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> : absolutePath.&lt;span style="color:#06b6ef">substring&lt;/span>(contextPath.&lt;span style="color:#06b6ef">length&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//去掉查询字符串&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> queryInx &lt;span style="color:#5bc4bf">=&lt;/span> path.&lt;span style="color:#06b6ef">indexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#39;?&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(queryInx &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">-&lt;/span>1){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path.&lt;span style="color:#06b6ef">substring&lt;/span>(0, queryInx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 优先进行精确匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internalMapExactWrapper(urlPatternContext.&lt;span style="color:#06b6ef">exactServlets&lt;/span>, path, mappingData);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 然后进行路径匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internalMapWildcardWrapper(urlPatternContext.&lt;span style="color:#06b6ef">wildcardServlets&lt;/span>, path, mappingData);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑JSP的处理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> noServletPath) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 路径为空时，重定向到“/”&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span>.&lt;span style="color:#06b6ef">object&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span>.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 后缀名匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internalMapExtensionWrapper(urlPatternContext.&lt;span style="color:#06b6ef">extensionServlets&lt;/span>, path, mappingData);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑Welcome资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// Default Servlet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span>.&lt;span style="color:#06b6ef">object&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> urlPatternContext.&lt;span style="color:#06b6ef">defaultServlet&lt;/span>.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//TODO 暂不考虑请求静态目录资源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (path.&lt;span style="color:#06b6ef">charAt&lt;/span>(path.&lt;span style="color:#06b6ef">length&lt;/span>() &lt;span style="color:#5bc4bf">-&lt;/span> 1) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#48b685">&amp;#39;/&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 精确匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapExactWrapper&lt;/span>(Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets, String path, MappingData mappingData) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> servlets.&lt;span style="color:#06b6ef">get&lt;/span>(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (servlet &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet.&lt;span style="color:#06b6ef">object&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 路径匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapWildcardWrapper&lt;/span>(List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets, String path, MappingData mappingData) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#5bc4bf">!&lt;/span>path.&lt;span style="color:#06b6ef">endsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet result &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (MappedServlet ms : servlets) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (path.&lt;span style="color:#06b6ef">startsWith&lt;/span>(ms.&lt;span style="color:#06b6ef">pattern&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#5bc4bf">=&lt;/span> ms;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (result &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> result.&lt;span style="color:#06b6ef">object&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> result.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 后缀名匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">internalMapExtensionWrapper&lt;/span>(Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> servlets, String path, MappingData mappingData) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> dotInx &lt;span style="color:#5bc4bf">=&lt;/span> path.&lt;span style="color:#06b6ef">lastIndexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#39;.&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#5bc4bf">=&lt;/span> path.&lt;span style="color:#06b6ef">substring&lt;/span>(dotInx &lt;span style="color:#5bc4bf">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> servlets.&lt;span style="color:#06b6ef">get&lt;/span>(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (servlet &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servlet&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet.&lt;span style="color:#06b6ef">object&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mappingData.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servlet.&lt;span style="color:#06b6ef">servletName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 以下是用到的内部类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">UrlPatternContext&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet defaultServlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>; &lt;span style="color:#776e71">//默认Servlet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> exactServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//精确匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> wildcardServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> LinkedList&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//路径匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String, MappedServlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> extensionServlets &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> HashMap&lt;span style="color:#5bc4bf">&amp;lt;&amp;gt;&lt;/span>(); &lt;span style="color:#776e71">//扩展名匹配&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MappedServlet&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> MapElement&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Servlet&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> pattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MappedServlet(String name, Servlet servlet, String servletName) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>(name, servlet);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">servletName&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> servletName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MapElement&lt;/span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>T&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">final&lt;/span> String pattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">final&lt;/span> T object;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MapElement(String pattern, T object) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">pattern&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> pattern;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">object&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> object;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MappingData&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Servlet servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String servletName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String redirectPath ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">recycle&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servlet &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servletName &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redirectPath &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="再次启动">再次启动
&lt;/h2>&lt;p>现在ServletContext有了，再次启动，不再报错了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>::: Using Embedded Netty Servlet &lt;span style="color:#06b6ef">Container&lt;/span> (version:) ::: &lt;span style="color:#ef6155">＼&lt;/span>(&lt;span style="color:#5bc4bf">^&lt;/span>O&lt;span style="color:#5bc4bf">^&lt;/span>)&lt;span style="color:#ef6155">／&lt;/span> Spring&lt;span style="color:#5bc4bf">-&lt;/span>Boot 1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22:08:33.&lt;span style="color:#06b6ef">019&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> io.&lt;span style="color:#06b6ef">gitlab&lt;/span>.&lt;span style="color:#06b6ef">leibnizhu&lt;/span>.&lt;span style="color:#06b6ef">sbnetty&lt;/span>.&lt;span style="color:#06b6ef">TestWebApp&lt;/span> : Starting TestWebApp on XPS13 with PID 17565
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ef6155">………………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22:08:35.&lt;span style="color:#06b6ef">760&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> io.&lt;span style="color:#06b6ef">gitlab&lt;/span>.&lt;span style="color:#06b6ef">leibnizhu&lt;/span>.&lt;span style="color:#06b6ef">sbnetty&lt;/span>.&lt;span style="color:#06b6ef">TestWebApp&lt;/span> : Started TestWebApp in 3.&lt;span style="color:#06b6ef">383&lt;/span> &lt;span style="color:#06b6ef">seconds&lt;/span> (JVM running &lt;span style="color:#815ba4">for&lt;/span> 4.&lt;span style="color:#06b6ef">012&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22:08:35.&lt;span style="color:#06b6ef">761&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> Thread&lt;span style="color:#5bc4bf">-&lt;/span>2&lt;span style="color:#5bc4bf">]&lt;/span> ationConfigEmbeddedWebApplicationContext : Closing org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">embedded&lt;/span>.&lt;span style="color:#06b6ef">AnnotationConfigEmbeddedWebApplicationContext&lt;/span>&lt;span style="color:#5bc4bf">@4a07d605&lt;/span>: startup date &lt;span style="color:#5bc4bf">[&lt;/span>Fri Aug 25 22:08:33 CST 2017&lt;span style="color:#5bc4bf">]&lt;/span>; root of context hierarchy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>25 22:08:35.&lt;span style="color:#06b6ef">763&lt;/span> INFO 17565 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> Thread&lt;span style="color:#5bc4bf">-&lt;/span>2&lt;span style="color:#5bc4bf">]&lt;/span> o.&lt;span style="color:#06b6ef">s&lt;/span>.&lt;span style="color:#06b6ef">j&lt;/span>.&lt;span style="color:#06b6ef">e&lt;/span>.&lt;span style="color:#06b6ef">a&lt;/span>.&lt;span style="color:#06b6ef">AnnotationMBeanExporter&lt;/span> : Unregistering JMX&lt;span style="color:#5bc4bf">-&lt;/span>exposed beans on shutdown
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Disconnected from the target VM, address: &lt;span style="color:#ef6155">&amp;#39;&lt;/span>127.&lt;span style="color:#06b6ef">0&lt;/span>.&lt;span style="color:#06b6ef">0&lt;/span>.&lt;span style="color:#06b6ef">1&lt;/span>:46101&lt;span style="color:#ef6155">&amp;#39;&lt;/span>, transport: &lt;span style="color:#ef6155">&amp;#39;&lt;/span>socket&lt;span style="color:#ef6155">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可是…………好像有点不对劲……&lt;br>
启动之后过一会儿就自动关了。&lt;br>
原因很简单，在&lt;code>EmbeddedNettyFactory&lt;/code>类里面，我们还没返回真正的&lt;code>EmbeddedServletContainer&lt;/code>实现类，而只是返回null，所以Spring没有Servlet容器可用，也就只能关闭啦。&lt;br>
我们将在下一篇文章里讨论如何实现&lt;code>EmbeddedServletContainer&lt;/code>——与netty结合最紧密的地方。&lt;/p></description></item><item><title>基于Netty的Spring Boot内置Servlet容器的实现（一）</title><link>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/</link><pubDate>Thu, 24 Aug 2017 14:30:11 +0800</pubDate><guid>https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/</guid><description>&lt;img src="https://leibnizhu.github.io/p/%E5%9F%BA%E4%BA%8ENetty%E7%9A%84Spring-Boot%E5%86%85%E7%BD%AEServlet%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80/yuyuko.png" alt="Featured image of post 基于Netty的Spring Boot内置Servlet容器的实现（一）" />&lt;h1 id="基于netty的spring-boot内置servlet容器的实现一">基于Netty的Spring Boot内置Servlet容器的实现（一）
&lt;/h1>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>Spring Boot有Tomcat、Jetty和undertow三种内置Servlet容器，默认使用Tomcat。&lt;br>
一般来说已经够用了，但当Spring Boot用于高并发微服务的时候，可能并不够用，而且tomcat的资源占用在这种情况下说不上轻量化了。于是萌生了自己实现一个Spring Boot的Netty Servlet容器的想法。&lt;br>
接下来可能会有几篇文章关于这个的，相应的代码也在开发之中，放在&lt;a class="link" href="https://gitlab.com/leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>Gitlab&lt;/a> 和 &lt;a class="link" href="https://github.com/Leibnizhu/spring-boot-starter-netty" target="_blank" rel="noopener"
>GitHub&lt;/a>里。&lt;/p>
&lt;h2 id="需要完成的任务">需要完成的任务
&lt;/h2>&lt;h3 id="实现servlet容器">实现Servlet容器
&lt;/h3>&lt;p>Servlet规范有以下几个核心类(接口)：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ServletContext&lt;/code>：定义了一些可以和Servlet Container交互的方法。&lt;/li>
&lt;li>&lt;code>Registration&lt;/code>：实现Filter和Servlet的动态注册。&lt;/li>
&lt;li>&lt;code>ServletRequest&lt;/code>(&lt;code>HttpServletRequest&lt;/code>)：对HTTP请求消息的封装。&lt;/li>
&lt;li>&lt;code>ServletResponse&lt;/code>(&lt;code>HttpServletResponse&lt;/code>)：对HTTP响应消息的封装。&lt;/li>
&lt;li>&lt;code>RequestDispatcher&lt;/code>：将当前请求分发给另一个URL，甚至ServletContext以实现进一步的处理。&lt;/li>
&lt;li>&lt;code>Servlet&lt;/code>(&lt;code>HttpServlet&lt;/code>)：所有“服务器小程序”要实现了接口，这些“服务器小程序”重写doGet、doPost、doPut、doHead、doDelete、doOption、doTrace等方法(HttpServlet)以实现响应请求的相关逻辑。&lt;/li>
&lt;li>&lt;code>Filter&lt;/code>(&lt;code>FilterChain&lt;/code>)：在进入Servlet前以及出Servlet以后添加一些用户自定义的逻辑，以实现一些横切面相关的功能，如用户验证、日志打印等功能。&lt;/li>
&lt;li>&lt;code>AsyncContext&lt;/code>：实现异步请求处理。&lt;/li>
&lt;/ul>
&lt;p>我们想要实现一个Servlet容器，不管是要重头实现一个类似tomcat的容器，还是要实现一个Spring Boot内置Servlet容器，都需要实现以上接口。&lt;br>
我们的任务就是利用Netty的API实现以上接口。&lt;/p>
&lt;h3 id="实现spring-boot内置servlet容器接口">实现Spring Boot内置Servlet容器接口
&lt;/h3>&lt;p>具体来说，就是要实现&lt;code>EmbeddedServletContainer&lt;/code>接口，同时实现一个配置类，配置Spring Boot在哪些情况下启动我们的Netty Servlet容器。&lt;/p>
&lt;h3 id="编写测试类方法">编写测试类/方法
&lt;/h3>&lt;p>需要测试以下内容:&lt;/p>
&lt;ul>
&lt;li>基本的SpringMVC功能，如请求分发、响应是否正常&lt;/li>
&lt;li>异步请求&lt;/li>
&lt;li>热交换&lt;/li>
&lt;li>缓存&lt;/li>
&lt;li>Session&lt;/li>
&lt;li>在一个现有Spring Boot项目中测试使用&lt;/li>
&lt;li>与内置Tomcat、Jetty的性能对比&lt;/li>
&lt;li>…………&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考
&lt;/h2>&lt;p>感谢以下项目/博文的作者：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://fangjian0423.github.io/2017/05/22/springboot-embedded-servlet-container/" target="_blank" rel="noopener"
>SpringBoot源码分析之内置Servlet容器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/DanielThomas/spring-boot-starter-netty" target="_blank" rel="noopener"
>Github DanielThomas/spring-boot-starter-netty&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="现在开始">现在开始
&lt;/h2>&lt;p>首先创建一个Maven项目。&lt;/p>
&lt;h3 id="maven依赖">Maven依赖
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;project&lt;/span> &lt;span style="color:#06b6ef">xmlns=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span> &lt;span style="color:#06b6ef">xmlns:xsi=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">xsi:schemaLocation=&lt;/span>&lt;span style="color:#48b685">&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;modelVersion&amp;gt;&lt;/span>4.0.0&lt;span style="color:#5bc4bf">&amp;lt;/modelVersion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>io.gitlab.leibnizhu&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-netty&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;packaging&amp;gt;&lt;/span>jar&lt;span style="color:#5bc4bf">&amp;lt;/packaging&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.0-SNAPSHOT&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;name&amp;gt;&lt;/span>spring-boot-starter-netty&lt;span style="color:#5bc4bf">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>1.5.2.RELEASE&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;relativePath/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Netty及其建议的反射依赖 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>io.netty&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>netty-all&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>4.1.2.Final&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.javassist&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javassist&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.20.0-GA&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Spring Boot基本依赖及测试，排除内置tomcat，我们自己来实现 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-tomcat&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/exclusions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-test&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span style="color:#5bc4bf">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- Servleten基本API --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>javax.servlet&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>javax.servlet-api&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.1.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>com.google.guava&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>guava&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>18.0&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 省略 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web应用测试类">Web应用测试类
&lt;/h3>&lt;p>我们直接在test包里创建一个SpringBoot应用，暂时先覆盖最基本的SpringMVC使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableAutoConfiguration&lt;/span>(exclude &lt;span style="color:#5bc4bf">=&lt;/span> WebMvcAutoConfiguration.&lt;span style="color:#06b6ef">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@ComponentScan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@EnableWebMvc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">TestWebApp&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String MESSAGE &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Hello, World!这是一条测试语句&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">main&lt;/span>(String&lt;span style="color:#5bc4bf">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SpringApplication.&lt;span style="color:#06b6ef">run&lt;/span>(TestWebApp.&lt;span style="color:#06b6ef">class&lt;/span>, args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>(value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/plaintext&amp;#34;&lt;/span>, produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/plain&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">plaintext&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> MESSAGE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>(value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/async&amp;#34;&lt;/span>, produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;text/plain&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Callable&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>String&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#06b6ef">async&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> () &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> MESSAGE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@RequestMapping&lt;/span>(value &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;/json&amp;#34;&lt;/span>, produces &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;application/json&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> Message &lt;span style="color:#06b6ef">json&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Message(MESSAGE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> ServletRegistrationBean &lt;span style="color:#06b6ef">nullServletRegistration&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> ServletRegistrationBean(&lt;span style="color:#815ba4">new&lt;/span> HttpServlet(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">protected&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">doGet&lt;/span>(HttpServletRequest req, HttpServletResponse resp) &lt;span style="color:#815ba4">throws&lt;/span> ServletException, IOException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">getOutputStream&lt;/span>().&lt;span style="color:#06b6ef">print&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Null Servlet Test&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#48b685">&amp;#34;/null&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Message&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">Message&lt;/span>(String message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">message&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> String &lt;span style="color:#06b6ef">getMessage&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> message;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="实现embeddedservletcontainerfactory接口">实现EmbeddedServletContainerFactory接口
&lt;/h3>&lt;p>直接启动，提示缺少&lt;code>EmbeddedServletContainerFactory&lt;/code>Bean：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>: Unable to start embedded container; nested exception is org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Spring Boot会查找EmbeddedServletContainerFactory接口的实现类(工厂类)，调用其getEmbeddedServletContainer()方法，来获取web应用的容器。
所以我们要实现这个接口，这里不直接实现，而是通过继承AbstractEmbeddedServletContainerFactory类来实现。
其中最重要的就是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>(ServletContextInitializer... initializers);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>方法，用于生成&lt;code>EmbeddedServletContainer&lt;/code>容器实例，顺便可以做一些初始化动作，比如定义监听的端口号，初始化Context，同时调用传入参数的&lt;code>ServletContextInitializer&lt;/code>（Servlet初始化器）们的&lt;code>onStartup()&lt;/code>方法以设置ServletContext中的一些配置。&lt;br>
目前的实现是这样的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.bootstrap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Spring Boot会查找EmbeddedServletContainerFactory接口的实现类(工厂类)，调用其getEmbeddedServletContainer()方法，来获取web应用的容器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以我们要实现这个接口，这里不直接实现，而是通过继承AbstractEmbeddedServletContainerFactory类来实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz on 2017-08-24.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNettyFactory&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> AbstractEmbeddedServletContainerFactory &lt;span style="color:#815ba4">implements&lt;/span> ResourceLoaderAware {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> LoggerFactory.&lt;span style="color:#06b6ef">getLogger&lt;/span>(EmbeddedNettyFactory.&lt;span style="color:#06b6ef">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> String SERVER_INFO &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Netty@SpringBoot&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> ResourceLoader resourceLoader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> EmbeddedServletContainer &lt;span style="color:#06b6ef">getEmbeddedServletContainer&lt;/span>(ServletContextInitializer... initializers) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Netty启动环境相关信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Package nettyPackage &lt;span style="color:#5bc4bf">=&lt;/span> Bootstrap.&lt;span style="color:#06b6ef">class&lt;/span>.&lt;span style="color:#06b6ef">getPackage&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String title &lt;span style="color:#5bc4bf">=&lt;/span> nettyPackage.&lt;span style="color:#06b6ef">getImplementationTitle&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String version &lt;span style="color:#5bc4bf">=&lt;/span> nettyPackage.&lt;span style="color:#06b6ef">getImplementationVersion&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Running with &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> title &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> version);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//上下文，暂时为空&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ServletContext context &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (isRegisterDefaultServlet()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">warn&lt;/span>(&lt;span style="color:#48b685">&amp;#34;This container does not support a default servlet&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (ServletContextInitializer initializer : initializers) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initializer.&lt;span style="color:#06b6ef">onStartup&lt;/span>(context);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (ServletException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">throw&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> RuntimeException(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//从SpringBoot配置中获取端口，如果没有则随机生成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">int&lt;/span> port &lt;span style="color:#5bc4bf">=&lt;/span> getPort() &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 0 &lt;span style="color:#5bc4bf">?&lt;/span> getPort() : &lt;span style="color:#815ba4">new&lt;/span> Random().&lt;span style="color:#06b6ef">nextInt&lt;/span>(65535 &lt;span style="color:#5bc4bf">-&lt;/span> 1024) &lt;span style="color:#5bc4bf">+&lt;/span> 1024;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InetSocketAddress address &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> InetSocketAddress(port);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Server initialized with port: &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> port);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>; &lt;span style="color:#776e71">//初始化容器并返回&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">setResourceLoader&lt;/span>(ResourceLoader resourceLoader) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">resourceLoader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> resourceLoader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在&lt;code>ServletContext&lt;/code>和&lt;code>EmbeddedServletContainer&lt;/code>接口还没实现，先用null代替。&lt;/p>
&lt;h3 id="配置spring-boot启动自定义servlet容器">配置Spring Boot启动自定义Servlet容器
&lt;/h3>&lt;p>就这样直接启动测试Web应用是不行的，因为这个&lt;code>EmbeddedNettyFactory&lt;/code>并没有被Spring加载。&lt;br>
想被Spring加载很简单，类加&lt;code>@Component&lt;/code>之类的注解就行，但这样集成在任何环境中都会加载，可能引起端口冲突。&lt;br>
所以我们还要写一个配置类，配置Spring什么时候去加载&lt;code>EmbeddedNettyFactory&lt;/code>，具体如下，注释里写得比较清楚了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">package&lt;/span> &lt;span style="color:#fec418">io.gitlab.leibnizhu.sbnetty.bootstrap&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 配置加载内置Netty容器的工厂类Bean。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 最早是直接将EmbeddedNettyFactory加@Component注解，这样集成在任何环境中都会加载，可能引起端口冲突。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 所以通过这个配置类，配置在当前上下文缺少EmbeddedServletContainerFactory接口实现类时（即缺少内置Servlet容器），加载EmbeddedNettyFactory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 这样SpringBoot项目在引入这个maven依赖，并且排除了内置tomcat依赖、且没引入其他servlet容器（如jetty）时，就可以通过工厂类加载并启动netty容器了。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz 2017-08-24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@AutoConfigureOrder&lt;/span>(Ordered.&lt;span style="color:#06b6ef">HIGHEST_PRECEDENCE&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@ConditionalOnWebApplication&lt;/span> &lt;span style="color:#776e71">// 在Web环境下才会起作用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNettyAutoConfiguration&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ConditionalOnClass&lt;/span>({Bootstrap.&lt;span style="color:#06b6ef">class&lt;/span>}) &lt;span style="color:#776e71">// Netty的Bootstrap类必须在classloader中存在，才能启动Netty容器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@ConditionalOnMissingBean&lt;/span>(value &lt;span style="color:#5bc4bf">=&lt;/span> EmbeddedServletContainerFactory.&lt;span style="color:#06b6ef">class&lt;/span>, search &lt;span style="color:#5bc4bf">=&lt;/span> SearchStrategy.&lt;span style="color:#06b6ef">CURRENT&lt;/span>) &lt;span style="color:#776e71">//当前Spring容器中不存在EmbeddedServletContainerFactory接口的实例&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">EmbeddedNetty&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//上述条件注解成立的话就会构造EmbeddedNettyFactory这个EmbeddedServletContainerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> EmbeddedNettyFactory &lt;span style="color:#06b6ef">embeddedNettyFactory&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> EmbeddedNettyFactory();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="再次启动">再次启动
&lt;/h3>&lt;p>这样子是启动不了的，但启动报错信息已经改了，变成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>2017&lt;span style="color:#5bc4bf">-&lt;/span>08&lt;span style="color:#5bc4bf">-&lt;/span>24 14:20:25.&lt;span style="color:#06b6ef">660&lt;/span> ERROR 16708 &lt;span style="color:#5bc4bf">---&lt;/span> &lt;span style="color:#5bc4bf">[&lt;/span> main&lt;span style="color:#5bc4bf">]&lt;/span> o.&lt;span style="color:#06b6ef">s&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span> : Application startup failed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">ApplicationContextException&lt;/span>: Unable to start embedded container; nested exception is java.&lt;span style="color:#06b6ef">lang&lt;/span>.&lt;span style="color:#06b6ef">NullPointerException&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">embedded&lt;/span>.&lt;span style="color:#06b6ef">EmbeddedWebApplicationContext&lt;/span>.&lt;span style="color:#06b6ef">onRefresh&lt;/span>(EmbeddedWebApplicationContext.&lt;span style="color:#06b6ef">java&lt;/span>:137) &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">support&lt;/span>.&lt;span style="color:#06b6ef">AbstractApplicationContext&lt;/span>.&lt;span style="color:#06b6ef">refresh&lt;/span>(AbstractApplicationContext.&lt;span style="color:#06b6ef">java&lt;/span>:536) &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>context&lt;span style="color:#5bc4bf">-&lt;/span>4.&lt;span style="color:#06b6ef">3&lt;/span>.&lt;span style="color:#06b6ef">7&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:4.&lt;span style="color:#06b6ef">3&lt;/span>.&lt;span style="color:#06b6ef">7&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">context&lt;/span>.&lt;span style="color:#06b6ef">embedded&lt;/span>.&lt;span style="color:#06b6ef">EmbeddedWebApplicationContext&lt;/span>.&lt;span style="color:#06b6ef">refresh&lt;/span>(EmbeddedWebApplicationContext.&lt;span style="color:#06b6ef">java&lt;/span>:122) &lt;span style="color:#5bc4bf">~[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span>.&lt;span style="color:#06b6ef">refresh&lt;/span>(SpringApplication.&lt;span style="color:#06b6ef">java&lt;/span>:737) &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span>.&lt;span style="color:#06b6ef">refreshContext&lt;/span>(SpringApplication.&lt;span style="color:#06b6ef">java&lt;/span>:370) &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span>.&lt;span style="color:#06b6ef">run&lt;/span>(SpringApplication.&lt;span style="color:#06b6ef">java&lt;/span>:314) &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span>.&lt;span style="color:#06b6ef">run&lt;/span>(SpringApplication.&lt;span style="color:#06b6ef">java&lt;/span>:1162) &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at org.&lt;span style="color:#06b6ef">springframework&lt;/span>.&lt;span style="color:#06b6ef">boot&lt;/span>.&lt;span style="color:#06b6ef">SpringApplication&lt;/span>.&lt;span style="color:#06b6ef">run&lt;/span>(SpringApplication.&lt;span style="color:#06b6ef">java&lt;/span>:1151) &lt;span style="color:#5bc4bf">[&lt;/span>spring&lt;span style="color:#5bc4bf">-&lt;/span>boot&lt;span style="color:#5bc4bf">-&lt;/span>1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>.&lt;span style="color:#06b6ef">jar&lt;/span>:1.&lt;span style="color:#06b6ef">5&lt;/span>.&lt;span style="color:#06b6ef">2&lt;/span>.&lt;span style="color:#06b6ef">RELEASE&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> at io.&lt;span style="color:#06b6ef">gitlab&lt;/span>.&lt;span style="color:#06b6ef">leibnizhu&lt;/span>.&lt;span style="color:#06b6ef">sbnetty&lt;/span>.&lt;span style="color:#06b6ef">TestWebApp&lt;/span>.&lt;span style="color:#06b6ef">main&lt;/span>(TestWebApp.&lt;span style="color:#06b6ef">java&lt;/span>:102) &lt;span style="color:#5bc4bf">[&lt;/span>test&lt;span style="color:#5bc4bf">-&lt;/span>classes&lt;span style="color:#5bc4bf">/&lt;/span>:na&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by: java.&lt;span style="color:#06b6ef">lang&lt;/span>.&lt;span style="color:#06b6ef">NullPointerException&lt;/span>: &lt;span style="color:#815ba4">null&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为SpringBoot在启动的时候，&lt;code>SpringApplication&lt;/code>会调用&lt;code>refresh(context)&lt;/code>方法进行初始化动作，而我们的context传入了null，当然报空指针异常了。&lt;br>
我们将在下一篇文章再讨论怎么实现这个。&lt;/p></description></item><item><title>js跨域获取Cookie的一种新方法</title><link>https://leibnizhu.github.io/p/js%E8%B7%A8%E5%9F%9F%E8%8E%B7%E5%8F%96Cookie%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 12 Jan 2017 14:01:25 +0800</pubDate><guid>https://leibnizhu.github.io/p/js%E8%B7%A8%E5%9F%9F%E8%8E%B7%E5%8F%96Cookie%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B0%E6%96%B9%E6%B3%95/</guid><description>&lt;h2 id="背景">背景
&lt;/h2>&lt;p>同一个项目分配了多个域名，在其中一个域名（下称域名A）的一级域名上放了Cookie。&lt;br>
使用其他域名(下面统称域名B*)去访问某些页面时，需要使用js读取域名A下的那个Cookie。&lt;/p>
&lt;h2 id="已有的解决方案">已有的解决方案
&lt;/h2>&lt;p>网上已经有一些解决方案，如：&lt;a class="link" href="https://m.th7.cn/show/22/201503/88209.htm" target="_blank" rel="noopener"
>JS跨域（ajax跨域、iframe跨域）解决方法及原理详解（jsonp）&lt;/a>、&lt;a class="link" href="http://www.cnblogs.com/chris-shao/archive/2012/12/27/2835986.html" target="_blank" rel="noopener"
>JS 获取跨域的cookie&lt;/a>。&lt;br>
其中document.domain的方法已确认不可用于我的需求，iframe跨域可以实现，但是跨域后的页面在iframe中，此时js变量的作用域只在iframe中，需要通过一个中间元素的值或者属性来写入需要传递的值，比较麻烦；document.name的方法虽然可以跨域，但同时也跨页面了，处理起来要小心点。&lt;/p>
&lt;h2 id="本文的解决方案">本文的解决方案
&lt;/h2>&lt;h3 id="原理">原理
&lt;/h3>&lt;p>在域名B*的页面上，js的确不能直接获取到域名A的cookie，但显然，域名B*的页面如果发请求到域名A，会带上域名A的Cookie。&lt;br>
针对这一点，只要我们在域名A上面部署一个微服务，域名B*的页面发AJAX请求到这个服务，返回域名A的Cookie中我们感兴趣字段的值。域名B*的页面就能接收到域名A的Cookie，可以各种利用了。&lt;/p>
&lt;h3 id="netty实现">Netty实现
&lt;/h3>&lt;p>域名A的服务器端选用Netty实现。实现代码很简单，这里只给出核心Handler部分代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">RPCMissionHandler&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> SimpleChannelInboundHandler&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>FullHttpRequest&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> Logger LOG &lt;span style="color:#5bc4bf">=&lt;/span> Logger.&lt;span style="color:#06b6ef">getLogger&lt;/span>(RPCMissionHandler.&lt;span style="color:#06b6ef">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead0&lt;/span>(ChannelHandlerContext ctx, FullHttpRequest req) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#5bc4bf">!&lt;/span>req.&lt;span style="color:#06b6ef">decoderResult&lt;/span>().&lt;span style="color:#06b6ef">isSuccess&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendError(ctx, BAD_REQUEST);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(req.&lt;span style="color:#06b6ef">method&lt;/span>() &lt;span style="color:#5bc4bf">!=&lt;/span> GET){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sendError(ctx, METHOD_NOT_ALLOWED);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String uri &lt;span style="color:#5bc4bf">=&lt;/span> req.&lt;span style="color:#06b6ef">uri&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String paramUri &lt;span style="color:#5bc4bf">=&lt;/span> uri.&lt;span style="color:#06b6ef">substring&lt;/span>(uri.&lt;span style="color:#06b6ef">indexOf&lt;/span>(&lt;span style="color:#48b685">&amp;#34;?&amp;#34;&lt;/span>) &lt;span style="color:#5bc4bf">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>NameValuePair&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> params &lt;span style="color:#5bc4bf">=&lt;/span> URLEncodedUtils.&lt;span style="color:#06b6ef">parse&lt;/span>(paramUri, Charset.&lt;span style="color:#06b6ef">forName&lt;/span>(&lt;span style="color:#48b685">&amp;#34;UTF-8&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(uri.&lt;span style="color:#06b6ef">startsWith&lt;/span>(&lt;span style="color:#48b685">&amp;#34;/getid&amp;#34;&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String refererDomain &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span>(NameValuePair pair : params){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#48b685">&amp;#34;domain&amp;#34;&lt;/span>.&lt;span style="color:#06b6ef">equals&lt;/span>(pair.&lt;span style="color:#06b6ef">getName&lt;/span>())){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> refererDomain &lt;span style="color:#5bc4bf">=&lt;/span> pair.&lt;span style="color:#06b6ef">getValue&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(refererDomain &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(req.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">get&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>) &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>Cookie&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> cookies &lt;span style="color:#5bc4bf">=&lt;/span> CookieDecoder.&lt;span style="color:#06b6ef">decode&lt;/span>(req.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">get&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Cookie&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> (Cookie cookie : cookies) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#48b685">&amp;#34;ID&amp;#34;&lt;/span>.&lt;span style="color:#06b6ef">equals&lt;/span>(cookie.&lt;span style="color:#06b6ef">name&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">info&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Request ID = &amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> cookie.&lt;span style="color:#06b6ef">value&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithString(ctx, cookie.&lt;span style="color:#06b6ef">value&lt;/span>(), &lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> refererDomain);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithString(ctx, &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;http://&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> refererDomain);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> responseWithImage(ctx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">responseWithString&lt;/span>(ChannelHandlerContext ctx, String data, String referer) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FullHttpResponse resp &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse(HttpVersion.&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>, OK);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*配置不缓存*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Cache-Control&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;no-cache&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Pragma&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;no-cache&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Expires&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;Wed, 31 Dec 1969 23:59:59 GMT&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*配置跨域允许*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-origin&amp;#34;&lt;/span>, referer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;GET, POST&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/*响应类型*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Content-Type&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;text/html;charset=UTF-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ByteBuf buf &lt;span style="color:#5bc4bf">=&lt;/span> Unpooled.&lt;span style="color:#06b6ef">copiedBuffer&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> StringBuffer(data), CharsetUtil.&lt;span style="color:#06b6ef">UTF_8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">content&lt;/span>().&lt;span style="color:#06b6ef">writeBytes&lt;/span>(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf.&lt;span style="color:#06b6ef">release&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>(resp).&lt;span style="color:#06b6ef">addListener&lt;/span>(ChannelFutureListener.&lt;span style="color:#06b6ef">CLOSE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendError&lt;/span>(ChannelHandlerContext ctx, HttpResponseStatus status) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FullHttpResponse resp &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultFullHttpResponse(HttpVersion.&lt;span style="color:#06b6ef">HTTP_1_1&lt;/span>, status, Unpooled.&lt;span style="color:#06b6ef">copiedBuffer&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Failure:&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> status, CharsetUtil.&lt;span style="color:#06b6ef">UTF_8&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(CONTENT_TYPE, &lt;span style="color:#48b685">&amp;#34;text/plain; charset=UTF-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>(resp).&lt;span style="color:#06b6ef">addListener&lt;/span>(ChannelFutureListener.&lt;span style="color:#06b6ef">CLOSE&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelReadComplete&lt;/span>(ChannelHandlerContext ctx) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>(Unpooled.&lt;span style="color:#06b6ef">EMPTY_BUFFER&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>.&lt;span style="color:#06b6ef">channelReadComplete&lt;/span>(ctx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">exceptionCaught&lt;/span>(ChannelHandlerContext ctx, Throwable cause) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LOG.&lt;span style="color:#06b6ef">error&lt;/span>(&lt;span style="color:#48b685">&amp;#34;抛出异常&amp;#34;&lt;/span>, cause);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>.&lt;span style="color:#06b6ef">exceptionCaught&lt;/span>(ctx, cause);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>唯一需要注意的是，在请求的时候，通过&lt;code>domain&lt;/code>参数带上了域名B*，然后在响应的时候，配置跨域相关的一些HTTP响应头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-origin&amp;#34;&lt;/span>, referer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;GET, POST&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>resp.&lt;span style="color:#06b6ef">headers&lt;/span>().&lt;span style="color:#06b6ef">set&lt;/span>(&lt;span style="color:#48b685">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>, &lt;span style="color:#48b685">&amp;#34;true&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中referer就是域名B*。&lt;/p>
&lt;h3 id="页面js调用">页面js调用
&lt;/h3>&lt;p>js发AJAX请求这块就更简单了。唯一注意的是，我们这个Cookie字段可能在页面加载后一段时间才能获取到，所以这里设置了重试机制，获取不到ID的时候等待1秒后重新发送一次请求，一共最多请求5次。&lt;br>
这里发送AJAX请求也涉及到一些跨域的配置，详见注释&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#06b6ef">$&lt;/span>(window).&lt;span style="color:#06b6ef">load&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">setTimeout&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){&lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#f99b15">5&lt;/span>);}, &lt;span style="color:#f99b15">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">function&lt;/span> &lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#06b6ef">times&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">$&lt;/span>.&lt;span style="color:#06b6ef">ajax&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">url&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#39;http://A.com/getid?domain=&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">+&lt;/span>document.&lt;span style="color:#06b6ef">domain&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">type&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#48b685">&amp;#39;get&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">crossDomain&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>, &lt;span style="color:#776e71">/*允许跨域*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">xhrFields&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> { &lt;span style="color:#06b6ef">withCredentials&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">true&lt;/span> }, &lt;span style="color:#776e71">/*允许跨域*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">error&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">function&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>){&lt;span style="color:#06b6ef">alert&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span>);},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">success&lt;/span>&lt;span style="color:#5bc4bf">:&lt;/span> &lt;span style="color:#815ba4">function&lt;/span> (&lt;span style="color:#06b6ef">data&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#06b6ef">data&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">ID&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#06b6ef">data&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(&lt;span style="color:#5bc4bf">--&lt;/span>&lt;span style="color:#06b6ef">times&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#06b6ef">setTimeout&lt;/span>(&lt;span style="color:#815ba4">function&lt;/span>(){&lt;span style="color:#06b6ef">getID&lt;/span>(&lt;span style="color:#06b6ef">times&lt;/span>);}, &lt;span style="color:#f99b15">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Netty+Redis开发高并发应用的一些思考(一)</title><link>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</link><pubDate>Wed, 27 Jul 2016 21:40:22 +0800</pubDate><guid>https://leibnizhu.github.io/p/Netty-Redis%E5%BC%80%E5%8F%91%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E4%B8%80/</guid><description>&lt;p>一个开发中的高并发应用原来部署在tomcat上，但这个应用基于HTTP协议，但并非tomcat所擅长的web服务；在启用了tomcat自带的nio模式后，效率还是不高，所以选择了尝试Netty。&lt;/p>
&lt;p>在缓存方面，一直以来都是使用Redis，为了满足高并发的需求，Redis也需要作一些优化。&lt;/p>
&lt;p>下面就简单总结一下在开发过程中的一些想法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对于Redis读写，有很大一部分的耗时是在网络IO上，尤其是Redis(集群)与应用不在一台服务器上时；此时，对于一些连续的操作，尽量使用pipeline批处理，当然前提是这一系列操作对先后顺序没有要求，因为pipeline是将命令打包一起发送，执行顺序可能没有保证的。若批量的命令对执行顺序有要求，建议用redis事务，效率还是比pipeline低很多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灵活利用lua脚本，减少Redis的网络IO。Redis尽管对Lua脚本有很多限制，但的确能提高效率，对于一些Redis原生API不能满足的批量操作，比如读取多个key再进行简单计算，如果将这些key的值分别读取到本地，再进行计算，会发生多次网络IO，那么可以用上面的pipeline，而效率更高的方法是将这些计算写成Lua脚本，使用其SHA（可以在应用初始化的时候加载所有用到的Lua脚本，保存SHA，在线计算时直接拿SHA）调用直接返回计算结果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于我们的应用，Netty相比Tomcat更为轻量化，毕竟只是一个NIO框架，省去了不必要的中间层。值得注意的是，协议处理和业务逻辑应该尽量解耦，协议处理由Netty完成，包括TCP拆包粘包处理、HTTP协议处理、业务应用的底层协议处理，都可以编写成Netty的Handler进行处理；但业务逻辑本身的处理不建议放在Handler中，一来逻辑上架构上不清晰，耦合度太高，二来一些耗时长的业务逻辑（往往需要数据库IO）会阻塞Eventloop，阻塞后面的channel。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于Netty中的业务逻辑，我的做法是在Handler中将解析出来的请求以及一个DefaultPromise实例封装成对象，压入业务处理的等待队列中，并在Handler中增加Promise的Listener监听器监听业务处理完成的情况，完成则写入响应；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">channelRead&lt;/span>(ChannelHandlerContext ctx, Object msg) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (msg &lt;span style="color:#815ba4">instanceof&lt;/span> BidRequest) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//创建一个Promise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> promise &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>(ctx.&lt;span style="color:#06b6ef">executor&lt;/span>()) ;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//打包成任务对象并加入处理队列&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bidQueueStack.&lt;span style="color:#06b6ef">offer&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> BidMission((BidRequest)msg, promise));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//增加监听器，等任务处理完成之后将BidResponse写入响应&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> promise.&lt;span style="color:#06b6ef">addListener&lt;/span>(&lt;span style="color:#815ba4">new&lt;/span> PromiseNotifier&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse,DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">operationComplete&lt;/span>(DefaultPromise&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidResponse&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> future) &lt;span style="color:#815ba4">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>(future.&lt;span style="color:#06b6ef">isSuccess&lt;/span>()){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">writeAndFlush&lt;/span>(future.&lt;span style="color:#06b6ef">get&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ctx.&lt;span style="color:#06b6ef">channel&lt;/span>().&lt;span style="color:#06b6ef">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外使用线程池管理CPU内核数个业务处理线程，从业务等待队列中获取任务对象，进行业务逻辑处理；处理完成之后通过Promise通知任务完成，并放入任务处理结果（响应）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">BidHandleThread&lt;/span> &lt;span style="color:#815ba4">implements&lt;/span> Runnable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">static&lt;/span> &lt;span style="color:#815ba4">final&lt;/span> &lt;span style="color:#fec418">int&lt;/span> DEFAULT_RANGE_FOR_SLEEP &lt;span style="color:#5bc4bf">=&lt;/span> 50; &lt;span style="color:#776e71">// 随机休眠时间&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#06b6ef">BidHandleThread&lt;/span>(LinkedBlockingQueue&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span>BidMission&lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> bidQueueStack) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">super&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>.&lt;span style="color:#06b6ef">bidQueueStack&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">public&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">while&lt;/span> (&lt;span style="color:#815ba4">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Random r &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> Random();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 从队列弹出数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BidMission mission &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (bidQueueStack.&lt;span style="color:#06b6ef">size&lt;/span>() &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mission &lt;span style="color:#5bc4bf">=&lt;/span> bidQueueStack.&lt;span style="color:#06b6ef">poll&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread.&lt;span style="color:#06b6ef">sleep&lt;/span>(r.&lt;span style="color:#06b6ef">nextInt&lt;/span>(DEFAULT_RANGE_FOR_SLEEP));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> (&lt;span style="color:#815ba4">null&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> mission) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 此处为具体的业务处理过程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//通过Promise通知任务完成&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mission.&lt;span style="color:#06b6ef">getPromise&lt;/span>().&lt;span style="color:#06b6ef">setSuccess&lt;/span>(adxResp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// 打印数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#06b6ef">out&lt;/span>.&lt;span style="color:#06b6ef">println&lt;/span>(&lt;span style="color:#48b685">&amp;#34;队列剩余数据数量：&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> bidQueueStack.&lt;span style="color:#06b6ef">size&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#815ba4">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#06b6ef">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>至于业务处理的线程池内，线程之间对数据库的访问应该还有进一步优化的空间。之前的一个设想是一个业务线程发起Redis访问的时候，把当前线程休眠，让其他线程进行数据库访问以外的业务处理（计算）；等待Redis响应后才苏醒，参与到其他线程之间对时间片的争夺。这样保证数据库IO是饱和的（应该也是业务逻辑处理中耗时最多的部分）。但还没实现。
或者将所有数据库访问都放在一个任务队列中，也是通过Promise监听-通知的方法，实现数据库的异步访问。&lt;/li>
&lt;/ol></description></item></channel></rss>