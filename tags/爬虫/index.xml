<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>爬虫 on Heaven's Door</title><link>https://leibnizhu.github.io/tags/%E7%88%AC%E8%99%AB/</link><description>Recent content in 爬虫 on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Dec 2016 09:39:02 +0800</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/%E7%88%AC%E8%99%AB/index.xml" rel="self" type="application/rss+xml"/><item><title>HtmlUnit爬虫使用代理时对HTTP请求头Proxy-Connection字段的探究</title><link>https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/</link><pubDate>Sun, 04 Dec 2016 09:39:02 +0800</pubDate><guid>https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/</guid><description>&lt;h1 id="背景">背景&lt;/h1>
&lt;p>最近给以前写的一个刷流量的爬虫/工具增加动态切换代理的功能。&lt;/p>
&lt;p>这个工具基于Java开发，使用了HtmlUnit库模拟浏览器进行访问，并加载页面中所有的JS以触发第三方监控。其实可以抓第三方监控的请求，然后再直接模拟这些请求，但这样就缺乏通用性，即不同的网站需要单独针对抓请求分析，所以选择了直接模拟浏览器加载JS的方法。&lt;/p>
&lt;p>而最近新需求要求增加使用代理模拟多地访问的功能，所以：&lt;/p>
&lt;ol>
&lt;li>先是写了个简单的Python爬虫爬各种免费代理的网站，一一验证可用性并放入数据库中备用；&lt;/li>
&lt;li>而后发现这样抓到的代理很少，一直维持50个左右可用的，而且经常返回403错误，不能满足刷流量工具的需求，所以购买了某收费代理；&lt;/li>
&lt;li>在使用收费代理的过程中，发现通过很多宣称高可靠的代理进行访问时依然返回403错误码，结果是大量代理不可用。&lt;/li>
&lt;/ol>
&lt;h1 id="问题分析">问题分析&lt;/h1>
&lt;p>首先，Python抓回来的代理是经过Python的Requests库检验的，确认可以通过其进行网页访问才放入数据库的；而购买的代理宣称高可靠的也是有自己的检测的，而且可以看到他们的检验时间跟我的使用时间一般只相差几分钟，应该不会有大量代理在这几分钟之内失效。&lt;/p>
&lt;p>所以怀疑是HtmlUnit的问题。HtmlUnit库可以选择使用不同的浏览器类型/版本（根据官网文档，这些不同的浏览器的区别是JS的解析方法和User-Agent、HTTP请求头），我们首先尝试了所有HtmlUnit支持的浏览器类型/版本，发现还是有大量的代理在使用时返回403错误码。&lt;/p>
&lt;p>再思考为什么会返回403，要么就是请求头有问题，要么我们的IP被封了。但我们的IP应该没干过什么坏事，不会轻易被列入黑名单吧，所以还是往请求头的方向去想，毕竟爬虫的话出问题也经常是因为请求头有问题，异于常规的访问。所以我们尝试了很多User-Agent，发现还是不行。&lt;/p>
&lt;p>最后考虑到抓包分析。直接用WireShark进行抓包，筛选HTTP包，分别截取Python的Requests库和Java的HtmlUnit去使用同一个代理访问同一个网页的请求包，如下。
Python的Requests库使用代理访问产生的HTTP请求包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Hypertext Transfer Protocol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Expert Info &lt;span style="color:#5bc4bf">(&lt;/span>Chat/Sequence&lt;span style="color:#5bc4bf">)&lt;/span>: GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Severity level: Chat&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Group: Sequence&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Method: GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request URI: http://www.***.com/test/index.htm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Version: HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Host: www.***.com&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Connection: keep-alive&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Encoding: gzip, deflate&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: */*&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User-Agent: python-requests/2.12.2&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Full request URI: http://www.***.com/test/index.htm&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>HTTP request 1/1&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而HtmlUnit产生的包：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Hypertext Transfer Protocol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Expert Info &lt;span style="color:#5bc4bf">(&lt;/span>Chat/Sequence&lt;span style="color:#5bc4bf">)&lt;/span>: GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>GET http://www.***.com/test/index.htm HTTP/1.1&lt;span style="color:#f99b15">\r\n&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Severity level: Chat&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">[&lt;/span>Group: Sequence&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Method: GET
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request URI: http://www.***.com/test/index.htm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Request Version: HTTP/1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Host: www.***.com&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User-Agent: Mozilla/5.0 &lt;span style="color:#5bc4bf">(&lt;/span>Windows NT 10.0; WOW64&lt;span style="color:#5bc4bf">)&lt;/span> AppleWebKit/537.36 &lt;span style="color:#5bc4bf">(&lt;/span>KHTML, like Gecko&lt;span style="color:#5bc4bf">)&lt;/span> Chrome/54.0.2840.99 Safari/537.36&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept: */*&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Language: en-US&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Accept-Encoding: gzip, deflate&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Proxy-Connection: keep-alive&lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f99b15">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>Full request URI: http://www.***.com/test/index.htm&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">[&lt;/span>HTTP request 1/1&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，Requests使用的User-Agent是python-requests，竟然也没被拦截，而HtmlUnit使用真实浏览器的User-Agent却返回403，看来跟User-Agent无关；事实上，我们尝试将HtmlUnit的User-Agent设置为与Requests一样，再去访问，一样得到403。&lt;/p>
&lt;p>然后仔细看HTTP请求头，不难发现，唯一的区别在于python-requests使用了一个Connection的字段，这个大家都比较熟悉，是要求远程服务器启用长连接的；而HtmlUnit没有Connection字段，取而代之的是Proxy-Connection字段，明显与代理有关。那么问题出在这个HTTP请求头字段上面？？？&lt;/p>
&lt;h1 id="proxy-connection是什么">Proxy-Connection是什么&lt;/h1>
&lt;p>通过Google我们发现Proxy-Connection是为了兼容不同HTTP协议版本而产生的一个字段，可以参考这篇文章：&lt;br>
&lt;a class="link" href="https://imququ.com/post/the-proxy-connection-header-in-http-request.html" target="_blank" rel="noopener"
>Http 请求头中的 Proxy-Connection&lt;/a>&lt;br>
大概意思就是如果使用代理服务的时候，还是发送Connection字段，那么一些旧的代理服务器不能处理这个字段而直接转发给目标服务器，最后目标服务器可能同意开启长连接，而代理服务器却没有正确地响应建立长连接，最后导致不能正常访问；所以才在使用代理的时候，使用Proxy-Connection替代Connection，让远程服务器区分对待。&lt;/p>
&lt;p>总而言之，使用代理服务器的时候，请求头使用Proxy-Connection字段是符合HTTP协议的。也就是说其实HtmlUnit的处理是正确的，而Requests的处理反而是不符合HTTP协议的？&lt;/p>
&lt;h1 id="htmlunit中去除proxy-connection字段">HtmlUnit中去除Proxy-Connection字段&lt;/h1>
&lt;p>不管谁对谁错，就目前状况而言，似乎使用了Proxy-Connection就是会让代理服务器返回403，或许是因为这些代理服务器不希望开启长连接？（毕竟很多代理服务器隔一小段时间就要切换端口之类的，比较被人长时间占用），所以我们的目标变成使用HtmlUnit发送请求的时候去除HTTP请求头的Proxy-Connection字段。&lt;/p>
&lt;h2 id="removerequestheader">removeRequestHeader()&lt;/h2>
&lt;p>HtmlUnit的核心类WebClient有方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>removeRequestHeader&lt;span style="color:#5bc4bf">(&lt;/span>String name&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以删除请求头的字段。不过经过尝试，调用了&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>removeRequestHeader&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后，发出的请求还是带有Proxy-Connection字段。&lt;/p>
&lt;h2 id="webrequestremoveadditionalheader">WebRequest.removeAdditionalHeader()&lt;/h2>
&lt;p>于是尝试别的方法，在访问页面的时候再删除请求头：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>WebRequest request &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> WebRequest&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> URL&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;**********&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">removeAdditionalHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>request&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setAdditionalHeader&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;Keep-Alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HtmlPage page1 &lt;span style="color:#5bc4bf">=&lt;/span> webClient&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getPage&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>request&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>依然不行。&lt;/p>
&lt;h2 id="查看源码">查看源码&lt;/h2>
&lt;p>查看了HtmlUnit源码（在此不贴出来了），发现我们调用其方法处理Header，所处理的只不过是一个额外的Map，不管增加和删除都是在这个Map里面处理的，最后的Header是这个额外的Map和预定义的一些Header结合在一起。但是在源码中也没有发现Proxy-Connection字段的处理（如判断当前使用代理，则用Proxy-Connection字段取代Connection字段等逻辑）。&lt;/p>
&lt;p>仔细观察，其实HtmlUnit底层是调用了JDK的&lt;strong>sun.net.www.protocol.http.HttpURLConnection&lt;/strong> 进行访问的，我们再看HttpURLConnection的源码，发现有两处：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">writeRequests&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">usingProxy&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">tunnelState&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#5bc4bf">!=&lt;/span> HttpURLConnection&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TunnelState&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">TUNNELING&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#fec418">void&lt;/span> &lt;span style="color:#06b6ef">sendCONNECTRequest&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">throws&lt;/span> IOException &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">http&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">getHttpKeepAliveSet&lt;/span>&lt;span style="color:#5bc4bf">())&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">requests&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#06b6ef">setIfNotSet&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Proxy-Connection&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#48b685">&amp;#34;keep-alive&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ef6155">…………&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>原来是在这里面处理的！！！！&lt;/p>
&lt;h2 id="编译rtjar">编译rt.jar&lt;/h2>
&lt;p>&lt;strong>sun.net.www.protocol.http.HttpURLConnection&lt;/strong> 是在JRE的rt.jar中的核心类，不能随便修改。
所以我们提取出HttpURLConnection，反编译，注释掉Proxy-Connection相关语句，重新编译，替换rt.jar中的响应class文件：&lt;br>
&lt;img src="https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1.png"
width="1052"
height="532"
srcset="https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1_hu2ce3ac896160117c1db594cb915b315b_46628_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/HtmlUnit%E7%88%AC%E8%99%AB%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E6%97%B6%E5%AF%B9HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4Proxy-Connection%E5%AD%97%E6%AE%B5%E7%9A%84%E6%8E%A2%E7%A9%B6/1_hu2ce3ac896160117c1db594cb915b315b_46628_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="474px"
>&lt;br>
重新测试，发现发出的请求还是带有Proxy-Connection字段！！！！&lt;/p>
&lt;h1 id="python验证">Python验证&lt;/h1>
&lt;p>从另一个角度来验证：对于HtmlUnit使用会返回403的代理，在Python的Requests中使用，并在HTTP请求头加上Proxy-Connection字段。Python代码比较简单，执行时输入需要验证的IP和端口就行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">#coding:utf-8 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">import&lt;/span> &lt;span style="color:#fec418">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip &lt;span style="color:#5bc4bf">=&lt;/span> sys&lt;span style="color:#5bc4bf">.&lt;/span>argv[&lt;span style="color:#f99b15">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port &lt;span style="color:#5bc4bf">=&lt;/span> sys&lt;span style="color:#5bc4bf">.&lt;/span>argv[&lt;span style="color:#f99b15">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>header &lt;span style="color:#5bc4bf">=&lt;/span>{&lt;span style="color:#48b685">&amp;#39;Proxy-Connection&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;Keep-Alive&amp;#39;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxies&lt;span style="color:#5bc4bf">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#39;http&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;http://&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">%&lt;/span>(ip,port),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#39;https&amp;#39;&lt;/span>:&lt;span style="color:#48b685">&amp;#39;http://&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">:&lt;/span>&lt;span style="color:#f99b15">%s&lt;/span>&lt;span style="color:#48b685">&amp;#39;&lt;/span>&lt;span style="color:#5bc4bf">%&lt;/span>(ip,port)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#5bc4bf">=&lt;/span> requests&lt;span style="color:#5bc4bf">.&lt;/span>get(&lt;span style="color:#48b685">&amp;#39;http://www.***.com/test/index.htm&amp;#39;&lt;/span>,proxies&lt;span style="color:#5bc4bf">=&lt;/span>proxies,headers&lt;span style="color:#5bc4bf">=&lt;/span>header)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#5bc4bf">.&lt;/span>encoding&lt;span style="color:#5bc4bf">=&lt;/span>&lt;span style="color:#48b685">&amp;#39;utf-8&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print r&lt;span style="color:#5bc4bf">.&lt;/span>text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">~&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>果然，控制台输出“Access not allowed!”。将“headers=header”去掉之后就能正常输出页面内容。&lt;br>
因此可以确认是Proxy-Connection字段导致的问题。&lt;/p>
&lt;h1 id="目前结论">目前结论&lt;/h1>
&lt;ol>
&lt;li>对于某些代理服务器，使用时请求头不能有Proxy-Connection字段；&lt;/li>
&lt;li>在家里跑这个工具，却基本没有返回403错误…………看来还有可能是办公室IP被列入黑名单了……&lt;/li>
&lt;li>对于Java开发，要选择不适用sun的HttpUrlConnection的html测试工具/模拟浏览器了；看了Selenium的源码，没有用这个类，准备试下。&lt;/li>
&lt;/ol></description></item></channel></rss>