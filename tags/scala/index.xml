<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on Heaven's Door</title><link>https://leibnizhu.github.io/tags/scala/</link><description>Recent content in scala on Heaven's Door</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Aug 2018 15:05:44 +0000</lastBuildDate><atom:link href="https://leibnizhu.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Scala项目发布的小坑</title><link>https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/</link><pubDate>Wed, 01 Aug 2018 15:05:44 +0000</pubDate><guid>https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E7%9A%84%E5%B0%8F%E5%9D%91/raindrop.jpg" alt="Featured image of post Scala项目发布的小坑" />&lt;p>之前写了一篇文章 &lt;a class="link" href="https://leibnizhu.github.io/p/%e5%8f%91%e5%b8%83%e9%a1%b9%e7%9b%ae%e5%88%b0maven%e4%b8%ad%e5%a4%ae%e4%bb%93%e5%ba%93/" >发布项目到Maven中央仓库&lt;/a>, 最近发布一个scala项目的时候, 用原来的配置, deploy到仓库后,提示找不到javadoc.&lt;br>
折腾了一番, 结论:&lt;/p>
&lt;ol>
&lt;li>***-javadoc.jar肯定是要有的, 否则Nexus校验不通过&lt;/li>
&lt;li>用maven的javadoc插件默认查找&lt;code>src/main/java&lt;/code>下面的源码进行文档构建, scala项目里这个目录当然是不存在的&lt;/li>
&lt;li>可以通过&lt;code>&amp;lt;sourceDictionary&amp;gt;&lt;/code>配置让javadoc插件去&lt;code>src/main/scala&lt;/code>目录去找源码, 但是显然没有java文件给他找,也是构建不出文档的&lt;/li>
&lt;li>所以要用maven的scala插件进行scaladoc构建文档并打包(默认jar包文件名跟javadoc兼容), 命令是&lt;code>mvn scala:doc-jar&lt;/code>&lt;/li>
&lt;li>为了和gpg签名,以及最后的deploy到远程maven仓库配合, 只要修改scala插件的配置即可&lt;/li>
&lt;/ol>
&lt;p>最后配置如下:
&lt;strong>注&lt;/strong>: 主要增加了&lt;code>doc-jar&lt;/code>的&lt;code>goal&lt;/code>, 其实在profile或直接在build中配置均可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!--scala编译,scala-doc等--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>net.alchim31.maven&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>scala-maven-plugin&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>3.2.2&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;recompileMode&amp;gt;&lt;/span>incremental&lt;span style="color:#5bc4bf">&amp;lt;/recompileMode&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;args&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;arg&amp;gt;&lt;/span>-target:jvm-1.8&lt;span style="color:#5bc4bf">&amp;lt;/arg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/args&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>-source&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>-target&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;javacArg&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/javacArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/javacArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArg&amp;gt;&lt;/span>-Xms1024m&lt;span style="color:#5bc4bf">&amp;lt;/jvmArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;jvmArg&amp;gt;&lt;/span>-Xmx1024m&lt;span style="color:#5bc4bf">&amp;lt;/jvmArg&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/jvmArgs&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>scala-compile-first&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>process-resources&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>add-source&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>compile&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>doc-jar&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span> &lt;span style="color:#776e71">&amp;lt;!--scaladoc打jar包--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>scala-test-compile&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;phase&amp;gt;&lt;/span>process-test-resources&lt;span style="color:#5bc4bf">&amp;lt;/phase&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>add-source&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;goal&amp;gt;&lt;/span>testCompile&lt;span style="color:#5bc4bf">&amp;lt;/goal&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/goals&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/execution&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/executions&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">&amp;lt;!-- 以前的配置 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>《Scala实用指南》读书笔记(二)</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link><pubDate>Wed, 18 Jul 2018 16:54:47 +0000</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/nightstreet.jpg" alt="Featured image of post 《Scala实用指南》读书笔记(二)" />&lt;h1 id="第8章-集合">第8章 集合&lt;/h1>
&lt;ul>
&lt;li>Scala对元素较少的Set进行了优化,4个元素以内的Set有专门的实现类(&lt;code>Set0&lt;/code>,&lt;code>Set1&lt;/code>,&lt;code>Set2&lt;/code>,&lt;code>Set3&lt;/code>,&lt;code>Set4&lt;/code>),大于4个元素的使用HashSet实现&lt;/li>
&lt;li>Set的方法(&lt;code>filter&lt;/code>,&lt;code>map&lt;/code>,&lt;code>foreach&lt;/code>这些就不说了):
&lt;ul>
&lt;li>&lt;code>mkString&lt;/code>: 允许传入一个分隔符,相当于把集合所有元素用分隔符join起来返回字符串&lt;/li>
&lt;li>&lt;code>++&lt;/code>: 合并两个Set,或者说,并集&lt;/li>
&lt;li>&lt;code>&amp;amp;&lt;/code>: 两个Set的交集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Map的方法:
&lt;ul>
&lt;li>&lt;code>filterKeys&lt;/code>: 根据key去过滤,而&lt;code>filter&lt;/code>方法是根据(key,value)键值对去过滤&lt;/li>
&lt;li>&lt;code>get&lt;/code>: 根据key拿value,注意是返回&lt;code>Option[T]&lt;/code>&lt;/li>
&lt;li>&lt;code>updated(K,V)&lt;/code>: 增加或更新键值对,返回新的Map,也可以用&lt;code>X() = b&lt;/code>,等效于&lt;code>X.updated(b)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>List的&lt;code>a :: list&lt;/code>读作&lt;code>将a前插到list&lt;/code>,后面的list才是::方法的调用者; 而&lt;code>list1 ::: list2&lt;/code>将list1前插到list2&lt;/li>
&lt;li>List的&lt;code>forall()&lt;/code>方法判断是否所有元素都满足条件, &lt;code>exists()&lt;/code>方法判断是否有任意元素满足条件. 其实分别相当于:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>list&lt;span style="color:#5bc4bf">.&lt;/span>forall&lt;span style="color:#5bc4bf">(&lt;/span>f&lt;span style="color:#5bc4bf">)&lt;/span> 等效于 &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">true&lt;/span> &lt;span style="color:#5bc4bf">/:&lt;/span> list&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&amp;amp;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list&lt;span style="color:#5bc4bf">.&lt;/span>exists&lt;span style="color:#5bc4bf">(&lt;/span>f&lt;span style="color:#5bc4bf">)&lt;/span> 等效于 &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span> &lt;span style="color:#5bc4bf">/:&lt;/span> list&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#5bc4bf">||&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果方法名以 &lt;code>:&lt;/code> 结尾, 那么调用时的主语是操作符后面的实例, 即&lt;code>a (操作符): b&lt;/code>等效于&lt;code>b.操作符:(a)&lt;/code>;同时scala不允许字母作为操作符的名称,除非用下划线对操作符增加前缀,如&lt;code>jump_:()&lt;/code>&lt;/li>
&lt;li>&lt;code> + - ! ~&lt;/code>作一元操作符时,也是调用的主语在操作符后面,分别映射到&lt;code>unary_+(),unary_-(),unary_!(),unary_~()&lt;/code>等方法的调用,即&lt;code>-a&lt;/code>调用&lt;code>a.unary_-()&lt;/code>等&lt;/li>
&lt;li>for表达式:&lt;code>for([parrten &amp;lt;- generator; definition*&amp;gt;]+;filter;) [yield] expression&lt;/code>,可以加过滤条件,而yield也是可选的,有yield的时候返回一个值列表,没有yield的时候返回Unit&lt;/li>
&lt;/ul>
&lt;h1 id="第9章-模式匹配和正则表达式">第9章 模式匹配和正则表达式&lt;/h1>
&lt;ul>
&lt;li>匹配List的时候,可以只获取感兴趣的元素,剩下的用&lt;code>_*&lt;/code>省略, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>list &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>head&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">*)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>head&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//后面的直接忽略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> others &lt;span style="color:#815ba4">@&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">*)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>others&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//后面的tail要引用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#48b685">&amp;#34;haha&amp;#34;&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">:&lt;/span>&lt;span style="color:#ef6155">&amp;#34;&lt;/span>&lt;span style="color:#fec418">two&lt;/span>&lt;span style="color:#ef6155">&amp;#34;&lt;/span>&lt;span style="color:#fec418">::tail&lt;/span> &lt;span style="color:#5bc4bf">=&amp;gt;&lt;/span> f&lt;span style="color:#5bc4bf">(&lt;/span>tail&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//这样其实也行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala的模式匹配case子句无需break&lt;/li>
&lt;li>scala约定模式变量名以小写字母开头(scala假设他是模式变量),常量为大写字母(会在作用域范围查找变量)&lt;/li>
&lt;li>不遵守以上规则的时候, 比如需要用模式匹配以外的变量, 可以显式指定作用域(如&lt;code>this.max&lt;/code>),或用反引号 &lt;code>`&lt;/code> 包住变量名(如&lt;code>`max`&lt;/code>)&lt;/li>
&lt;li>case类用于创建轻量级值对象,经常用于模式匹配；如果主构造器无参数，调用时又没加括号，那么传递的是case类的伴生对象（混合了Function0特质，可以视为函数）&lt;/li>
&lt;li>可使用自定义的提取器进行模式匹配，提取器在伴生对象中有&lt;code>unapply()&lt;/code>方法,接受我们想要匹配的值,返回Boolean(传入的值是否可以匹配),例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> unapply&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> s &lt;span style="color:#5bc4bf">==&lt;/span> &lt;span style="color:#48b685">&amp;#34;TEST&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span>&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 TEST
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>提取器还可以返回Boolean型以外的结果,即解析的结果,通过修改&lt;code>unapply()&lt;/code>的返回类型实现(返回&lt;code>Option[T]&lt;/code>,&lt;code>T&lt;/code>即解析成功的结果类型), 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> unapply&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Option&lt;/span>&lt;span style="color:#5bc4bf">[(&lt;/span>&lt;span style="color:#fec418">String&lt;/span>,&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(!&lt;/span>s&lt;span style="color:#5bc4bf">.&lt;/span>contains&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;:&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#fec418">None&lt;/span> &lt;span style="color:#815ba4">else&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> splited &lt;span style="color:#815ba4">=&lt;/span> s&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;:&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">Some&lt;/span>&lt;span style="color:#5bc4bf">((&lt;/span>splited&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> splited&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>a&lt;span style="color:#5bc4bf">,&lt;/span>b&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>a&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685"> and &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>b&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 ***:***
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用提取器的时候还可以应用其他提取器进行模式匹配,如&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>input &lt;span style="color:#815ba4">match&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#fec418">Splitor&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>a &lt;span style="color:#815ba4">@&lt;/span> &lt;span style="color:#fec418">Symbol&lt;/span>&lt;span style="color:#5bc4bf">(),&lt;/span>b&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;matched, &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>a&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685"> and &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>b&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//即匹配 TEST:***
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">case&lt;/span> &lt;span style="color:#815ba4">_&lt;/span> &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Invalid input: &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>input&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>正则表达式: &lt;code>&amp;quot;regex&amp;quot;.r&lt;/code>(可以用原始字符串&lt;code>&amp;quot;&amp;quot;&amp;quot;regex&amp;quot;&amp;quot;&amp;quot;.r&lt;/code>), 实际上是&lt;code>String&lt;/code>隐式转换成&lt;code>StringOps&lt;/code>再调用其&lt;code>r&lt;/code>方法获取&lt;code>Regex&lt;/code>类实例&lt;/li>
&lt;li>正则表达式的方法:
&lt;ul>
&lt;li>&lt;code>findFirstIn(source)&lt;/code>: 获取正则表达式第一个匹配项&lt;/li>
&lt;li>&lt;code>findAllIn(source)&lt;/code>: 获取正则表达式的所有匹配项&lt;/li>
&lt;li>&lt;code>replaceFirstIn(source, replacement)&lt;/code>: 替换第一个匹配项&lt;/li>
&lt;li>&lt;code>replaceAllIn(source, replacement)&lt;/code>: 替换所有匹配项&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scala的正则表达式是提取器,返回值是匹配项(括号的分组)拼接成的元组&lt;/li>
&lt;li>下划线的作用:
&lt;ul>
&lt;li>包引入的通配符&lt;/li>
&lt;li>元组索引的前缀&lt;/li>
&lt;li>函数值的隐式参数&lt;/li>
&lt;li>用默认值初始化变量&lt;/li>
&lt;li>在函数名中混合操作符和:&lt;/li>
&lt;li>在模式匹配中作为通配符&lt;/li>
&lt;li>处理异常时在catch代码块和case一起用(类似模式匹配了)&lt;/li>
&lt;li>作为分解操作的一部分,如&lt;code>max(arg: _*)&lt;/code>可以接受列表或数组参数,自动拆解成离散的值传递给可变长度参数&lt;/li>
&lt;li>部分应用一个函数,如&lt;code>val square = Math.pow(_:Int, 2)&lt;/code>部分应用了pow函数,返回一个新的单参数函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="第10章-处理异常">第10章 处理异常&lt;/h1>
&lt;ul>
&lt;li>Java处理多个异常时,会检查多个异常的处理顺序,子类必须在前面,否则编译会出错(&lt;code>exception ***.*** has already been caught&lt;/code>),但scala对此不会警告,要自己注意(在catch块中使用case匹配的顺序)&lt;/li>
&lt;li>这本书竟然没有讲到&lt;code>Try&lt;/code>类,吐槽一下&lt;/li>
&lt;/ul>
&lt;h1 id="第11章-递归">第11章 递归&lt;/h1>
&lt;ul>
&lt;li>尾递归优化(Tail Recursive Optimization): 不是尾递归的时候,递归调用在字节码对应&lt;code>invokespecial&lt;/code>指令,表明是递归调用,会产生新一层栈;如果写成尾递归, 递归调用时在字节码对应&lt;code>goto&lt;/code>指令,表明使用了迭代而非方法调用,放弃了当前的上下文&lt;/li>
&lt;li>&lt;code>@scala.annotation.tailrec&lt;/code>注解加载函数上,可以让scala检查是否使用了尾递归,如果非尾递归,会报错;该注解可选,主要是增加可读性,并在重构时保持尾递归性质&lt;/li>
&lt;li>蹦床调用(trampoline call): 两个函数互相调用(f调用g,g调用f)构成递归, 对于蹦床调用即使是尾递归&lt;code>@tailrec&lt;/code>注解也会报错(scala不能识别跨方法的递归);此时可以用&lt;code>TailRec&lt;/code>类解决:
&lt;ul>
&lt;li>蹦床调用的函数返回&lt;code>TailRec[T]&lt;/code>,其中&lt;code>T&lt;/code>是真正的返回值类型&lt;/li>
&lt;li>蹦床调用的函数内部,需要结束递归时返回&lt;code>done(结果: T)&lt;/code>,需要递归调用其他函数时返回&lt;code>tailcall(其他函数())&lt;/code>;这两者都只是简单包装参数,以供后续调用或延迟执行&lt;/li>
&lt;li>外部调用这些函数时, 对返回值&lt;code>TailRec[T]&lt;/code>调用&lt;code>result&lt;/code>方法可以获取最终递归结果;真正发生计算是调用&lt;code>result&lt;/code>方法的时候&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="第12章-惰性求值和并行集合">第12章 惰性求值和并行集合&lt;/h1>
&lt;ul>
&lt;li>使用关键字&lt;code>lazy&lt;/code>修饰变量,scala会推迟绑定变量和他的值,直到该值第一次被使用(才会去绑定)&lt;/li>
&lt;li>如果变量绑定的计算有副作用,那么多个变量的绑定顺序机会对绑定的值有影响,此时就不能随便用惰性求值(&lt;code>lazy&lt;/code>)了,否则不可交换计算的结果将会得不可知&lt;/li>
&lt;li>前面介绍的集合都是&lt;code>严格集合&lt;/code>,所有计算都是严格(立刻)执行的; 通过集合的&lt;code>view()&lt;/code>方法可以获得一个严格集合的&lt;code>惰性视图&lt;/code>, 惰性集合会推迟计算,当且晋档请求了非惰性/非视图的结果时(比如&lt;code>head&lt;/code>,&lt;code>last&lt;/code>等等)前面的操作才会进行&lt;/li>
&lt;li>但集合的惰性视图不一定比严格集合性能好,要看具体情况,比如一个集合进行一些操作之后,获取head,那么惰性视图要进行操作的次数就少一些;如果在多次filter后要拿last,那么惰性视图就要把每个元素执行filter计算一遍, 而严格集合每次filter后要计算的结果都小一些,这样计算量反而会少一点.&lt;/li>
&lt;li>&lt;code>Stream&lt;/code>仅按需生成值,有天然的惰性.拥有&lt;code>#::&lt;/code>方法连接(惰性,需要的时候才会连接)现有的Stream和新的值,通过递归定义可以得到一个&lt;code>Stream&lt;/code>, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//第一个元素是start,下一个是前一个加1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">def&lt;/span> gen&lt;span style="color:#5bc4bf">(&lt;/span>start&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Stream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> start &lt;span style="color:#5bc4bf">#&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">:&lt;/span> &lt;span style="color:#fec418">gen&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">start&lt;/span> &lt;span style="color:#fec418">+&lt;/span> &lt;span style="color:#ef6155">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fec418">println&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">gen&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#ef6155">10&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span> &lt;span style="color:#776e71">//Stream(10, ?)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>调用&lt;code>Stream.force()&lt;/code>方法可以强制求值, &lt;code>toList()&lt;/code>方法也类似;如果在无限流上调用的话会抛OutOfMemoryError&lt;/li>
&lt;li>对于无限流,可以使用&lt;code>take(Int)&lt;/code>方法获取前N个值组成的Stream,也可以使用&lt;code>takeWhile()&lt;/code>方法按条件生成值(参数的函数值返回false时终止生成新值)&lt;/li>
&lt;li>Stream会记住(memoize)已经生成的值,即按需生成新的值后,会先缓存再返回. 比如执行&lt;code>stream.take(3).force&lt;/code>计算了3个值,再执行&lt;code>stream.take(4).force&lt;/code>只计算第4个值,前3个值从缓存读取&lt;/li>
&lt;li>对很多顺序集合,scala都有对应的并行版本, 如&lt;code>ParArray&lt;/code>,&lt;code>ParHashMap&lt;/code>,&lt;code>ParHashSet&lt;/code>等等; 可以用&lt;code>par()&lt;/code>和&lt;code>seq()&lt;/code>方法在顺序集合及其并行版本之间转换&lt;/li>
&lt;li>不适合使用并行集合的情况:
&lt;ul>
&lt;li>创建和调度线程的开销不应该大于执行这些任务所需要的时间, 对于慢型任务而言并行集合可能有所裨益,但对于小心集合的快速任务并不适合;&lt;/li>
&lt;li>此外,在集合上的操作如果修改全局状态(线程不安全的修改),那么整体计算结果不可知;&lt;/li>
&lt;li>如果操作不满足结合律也不要使用并行集合,因为并行集合的执行顺序是不确定的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="第13章-使用actor编程">第13章 使用Actor编程&lt;/h1>
&lt;ul>
&lt;li>Actor帮助我们将共享的可变性转换成隔离的可变性(isolated mutability),如果一个任务可以有意义地分成几个子任务,分而治之,那么可以使用Actor模型来解决这个任务&lt;/li>
&lt;li>&lt;code>AtomicLog&lt;/code>之类的类,虽然原子性保证了单个值的线程安全性,但并不能保证跨多个值的原子性,这些值可能同时发生变化&lt;/li>
&lt;li>一个Actor是一个对象,由一个消息队列支撑,任意给定的时间,一个Actor只会处理一条消息; &lt;code>Akka&lt;/code>提供&lt;code>Actor&lt;/code>模型, 创建一个Actor只要继承&lt;code>Actor&lt;/code>特质并实现&lt;code>receive()&lt;/code>方法, &lt;code>receive()&lt;/code>方法主题是模式匹配, 匹配发生在一个隐式消息对象上&lt;/li>
&lt;li>Actor托管在ActorSystem中,管理了线程池(只要系统保持活跃,这个线程池就会一直保持活跃),消息队列,和Actor生命周期,使用&lt;code>actorOf()&lt;/code>工厂方法创建Actor, 用&lt;code>!()&lt;/code>方法(&lt;code>tell()&lt;/code>)发送消息:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> depp &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">XxxActor&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#776e71">//通过actorOd工厂方法创建Actor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>depp &lt;span style="color:#5bc4bf">!&lt;/span> &lt;span style="color:#48b685">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span style="color:#776e71">//往Actor发送消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> terminateFuture &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>terminate&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#776e71">//退出ActorSystem线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>ready&lt;span style="color:#5bc4bf">(&lt;/span>terminateFuture&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Duration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Inf&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Actor一些细节:
&lt;ul>
&lt;li>Actor在不同线程中进行,而不是调用主线程&lt;/li>
&lt;li>每个Actor一次只处理一条消息,多个Actor并发运行处理多条消息&lt;/li>
&lt;li>Actor是异步的,不会阻塞调用者(调用者不等待Actor回复)&lt;/li>
&lt;li>线程和Actor不绑定(没什么线程亲和力),每次处理消息&lt;strong>可能&lt;/strong>使用线程池中不同的线程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Actor中保存的任何字段都是自动线程安全的,可变但没有共享可变性;可以在Actor类中选择性地存储状态,比如用于存储状态的字段,等等&lt;/li>
&lt;li>若希望从Actor得到响应,Akka提供了询问模式,但消息可能永远不会到达,因此强制使用超时时间;询问模式下, 使用&lt;code>?()&lt;/code>方法(&lt;code>ask()&lt;/code>)发送消息, 返回一个&lt;code>Future&lt;/code>,需要用这个Future实例等待响应(可以用&lt;code>Await.result()&lt;/code>方法), 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">//Actor类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">MyActor&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Actor&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> recieve&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Receive&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">case&lt;/span> msg &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> sender &lt;span style="color:#5bc4bf">!&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Got message &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>msg&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> depp &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">MyActor&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#776e71">//通过actorOd工厂方法创建Actor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> timeout &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Timeout&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">2.&lt;/span>seconds&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//通过隐式参数定义超时, ?方法要用到
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> askFuture &lt;span style="color:#815ba4">=&lt;/span> depp &lt;span style="color:#5bc4bf">?&lt;/span> &lt;span style="color:#48b685">&amp;#34;heihei&amp;#34;&lt;/span> &lt;span style="color:#776e71">//询问模式,发出消息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> result &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>result&lt;span style="color:#5bc4bf">(&lt;/span>askFuture&lt;span style="color:#5bc4bf">,&lt;/span> timeout&lt;span style="color:#5bc4bf">.&lt;/span>duration&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//等待响应结果,这里也需要一个超时的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>println&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">s&amp;#34;Response result : &lt;/span>&lt;span style="color:#f99b15">${&lt;/span>result&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> terminateFuture &lt;span style="color:#815ba4">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>terminate&lt;span style="color:#5bc4bf">()&lt;/span> &lt;span style="color:#776e71">//退出ActorSystem线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#fec418">Await&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>ready&lt;span style="color:#5bc4bf">(&lt;/span>terminateFuture&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Duration&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Inf&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Akka提供&lt;code>RoundRobinPool&lt;/code>路由器,会将发送到这个路由器的所有消息均匀地路由到支撑他的多个Actor,使用方法:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> system &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ActorSystem&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;sample&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//创建ActorSystem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> router&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">ActorRef&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> system&lt;span style="color:#5bc4bf">.&lt;/span>actorOf&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">RoundRobinPool&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">100&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>props&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Props&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">MyActor&lt;/span>&lt;span style="color:#5bc4bf">]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Actor中想访问ActorSystem可以使用&lt;code>context()&lt;/code>方法&lt;/li>
&lt;li>使用建议:
&lt;ul>
&lt;li>更多地依赖无状态的而非有状态的Actor&lt;/li>
&lt;li>要保证recieve()方法中的处理速度非常狂,尤其是接收Actor具有状态时,改变状态的长时间运行任务将会降低并发性,要避免&lt;/li>
&lt;li>确保在Actor之间传递的消息是不可变对象&lt;/li>
&lt;li>避免使用ask()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="第14章-和java进行互操作">第14章 和Java进行互操作&lt;/h1>
&lt;ul>
&lt;li>scala使用Java类,当Java变量/方法名等于scala关键字冲突的时候,可以将受影响的变量/方法用反引号&lt;code>`&lt;/code>括起来&lt;/li>
&lt;li>没有方法实现的trait在字节码层面是简单的接口;如果想在scala中创建接口,只能创建没有方法实现的trait&lt;/li>
&lt;li>有方法实现的trait, 2.11及更早版本的scala会编译成一个接口(名为:&lt;code>trait名&lt;/code>)和一个实现该接口的抽象类(名为:&lt;code>trait名$class&lt;/code>), 2.12开始,只包含方法实现而不包含字段的trait会编译成带有默认方法的接口&lt;/li>
&lt;li>scala将单例对象和伴生对象编译成一个单例类,在字节码层面只有static方法&lt;/li>
&lt;li>单例对象(假设名为Single)编译后产生两个类, 一个&lt;code>Single$&lt;/code>类存放具体的静态方法,一个&lt;code>Single&lt;/code>类负责转发方法的调用,在Java中可以直接通过&lt;code>Single&lt;/code>调用其方法&lt;/li>
&lt;li>伴生对象(假设类名为Buddy)编译后产生两个类,一个&lt;code>Buddy$&lt;/code>类存放伴生对象的静态方法,一个&lt;code>Buddy&lt;/code>类存放对应类的方法等;&lt;/li>
&lt;li>在Java中使用类本身的方法可以直接调用;而伴生对象,包含一个&lt;code>MODULE$&lt;/code>的属性保存着该类的静态单例对象,可以通过它去访问其方法,如&lt;code>Buddy$.MODULE$.method()&lt;/code>&lt;/li>
&lt;li>scala没有throws子句,抛出异常时无需在方法签名中显示声明,如果在Java中扩展类覆写方法时抛出异常就会报错; 可以在scala方法签名中增加&lt;code>@throw&lt;/code>注解解决该问题,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">abstract&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Bird&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">@throws&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">NoFlyException&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> fly&lt;span style="color:#5bc4bf">()&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(结束)&lt;/p></description></item><item><title>《Scala实用指南》读书笔记(一)</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link><pubDate>Tue, 17 Jul 2018 15:14:37 +0000</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/summer2.jpg" alt="Featured image of post 《Scala实用指南》读书笔记(一)" />&lt;h1 id="前言">前言&lt;/h1>
&lt;p>好久没写博客了,在&lt;code>Kafka&lt;/code>源码的海洋里挣扎ing,休息的时候还刷&lt;code>Leetcode&lt;/code>玩儿,很多东西匆匆丢到&lt;code>OneNote&lt;/code>里了.&lt;br>
最近花了一周时间看了品神翻译的《Scala实用指南》, 这本书应该主要是面向刚入Scala大门的Javaer的,前面讲Scala基础,后期还讲了下Akka和Scala具体的应用.&lt;br>
我虽然写scala也有一段时间了,再看这本书还是觉得受益匪浅,有很多地方以前没有注意到的.&lt;br>
那么本文就把一些细节写写,仅仅是枚举一下记录一下,并不全面.&lt;br>
P.S. 看书勘误找品神, 找到错误了发红包诶,我就领了一个冰可乐(等值)红包.&lt;br>
&lt;img src="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin.png"
width="500"
height="583"
srcset="https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin_hue0f2ccbae1cd7a20b17d8fd526725f61_54962_480x0_resize_box_3.png 480w, https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/hepin_hue0f2ccbae1cd7a20b17d8fd526725f61_54962_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;h1 id="第2章-体验scala">第2章 体验Scala&lt;/h1>
&lt;ul>
&lt;li>scala的REPL中, &lt;code>Ctrl+A&lt;/code>调到行首,&lt;code>Ctrl+E&lt;/code>调到行尾&lt;/li>
&lt;li>&lt;code>scala &amp;lt;scala源文件&amp;gt;&lt;/code>命令可以在单独的JVM中运行scala代码,而实际上是自动合成Main类调用main()方法&lt;/li>
&lt;/ul>
&lt;h1 id="第3章-从java到scala">第3章 从Java到Scala&lt;/h1>
&lt;ul>
&lt;li>用&lt;code>val&lt;/code>定义所有字段,并只提供读不提供更新状态的方法,可以使一个类的实例不可变&lt;/li>
&lt;li>&lt;code>1 to 3&lt;/code>,&lt;code>1 until 3&lt;/code>这类表达式其实是隐式转换,&lt;code>1&lt;/code>通过&lt;code>intWrapper()&lt;/code>方法转换为成富封装器(rich wrapper,这里具体是&lt;code>RichInt&lt;/code>类)再调用其&lt;code>to()&lt;/code>,&lt;code>until()&lt;/code>方法&lt;/li>
&lt;li>Scala将&lt;code>Scala.Int&lt;/code>视作Java基本类型int是纯粹的编译期转换&lt;/li>
&lt;li>&lt;code>val (a,b)=(1,2)&lt;/code>这种赋值方法叫&lt;code>多重赋值(multiple assignment)&lt;/code>&lt;/li>
&lt;li>元组的索引越界是在编译期报错的&lt;/li>
&lt;li>一个函数如&lt;code>max(values:Int*)&lt;/code>接受可变长度参数值,但不是字面上的数组类型,如果调用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>max&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在编译期会报错,可以使用数组展开标记(Array explode notation)告诉编译期将数组展开成所需的形式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>max&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Array&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>重载基类方法时,要小心参数默认值,如果派生类重载方法使用的参数默认值和基类对应的不一样,会让人困惑&lt;/li>
&lt;li>重载基类方法时,应该保持参数名字一致性,否则使用参数命名调用(如&lt;code>f(a=3,b=4)&lt;/code>)时会优先使用基类的&lt;/li>
&lt;li>隐式参数需要将参数标记为&lt;code>implicit&lt;/code>且放在单独的参数列表中,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#5bc4bf">(&lt;/span>a&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">int&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>b&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)(&lt;/span>&lt;span style="color:#815ba4">implicit&lt;/span> c&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">User&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>隐式参数的值传递是可选的,没有传值时,scala会在调用的作用域中寻找一个隐式变量,因此每个作用域中每一种类型最多只能有一个隐式变量,如上面的例子中,定义一个隐式变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> user&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">User&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">User&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Leibniz&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala能自动将String转换成&lt;code>scala.runtime.RichString&lt;/code>,因此可以使用&lt;code>capitalize()&lt;/code>,&lt;code>lines()&lt;/code>,&lt;code>reverse()&lt;/code>等方法&lt;/li>
&lt;li>跨行字符串:将多行的字符串放在&lt;code>&amp;quot;&amp;quot;&amp;quot;...&amp;quot;&amp;quot;&amp;quot;&lt;/code>中,里面的引号和斜杠等等字符甚至不需要转译,又称为&lt;code>原始字符串&lt;/code>,创建正则的时候就很方便了.&lt;/li>
&lt;li>&lt;code>原始字符串&lt;/code>中的缩进也会被带入结果字符串中,可以使用&lt;code>stripMargin()&lt;/code>方法将管道符号&lt;code>|&lt;/code>前面的空白或控制字符去掉, 如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> str &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&amp;#34;Leibniz said
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#48b685"> |&amp;#34;Scala is exciting&amp;#34;.&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>stripMargin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>字符串拼接用字符串插值,如&lt;code>s&amp;quot;...${expresion}&amp;quot;&lt;/code>,s代表s插值器,如果是简单的一个变量直接&lt;code>$val&lt;/code>,复杂表达式才需要大括号括起来,而美元符号&lt;code>$&lt;/code>此时需要转译:&lt;code>$$&lt;/code>.表达式的值在插值时被捕获,变量后续的变更不会影响字符串.&lt;/li>
&lt;li>字符串格式化可以用f插值器,如&lt;code>f&amp;quot;${a}%2.2f&amp;quot;&lt;/code>将a变量显示小数点后2位,此外还有&lt;code>%s&lt;/code>字符串和&lt;code>%d&lt;/code>整数等格式&lt;/li>
&lt;li>scala的类和方法默认公开&lt;/li>
&lt;li>scala不强制要求捕获异常&lt;/li>
&lt;li>scala默认导入的&lt;code>scala&lt;/code>和&lt;code>scala.Predef&lt;/code>包,包含了一些默认类型,隐式转换等等&lt;/li>
&lt;li>scala没有操作符重载, 但是方法名可以是+_*/等操作符,同时方法调用的句号和括号可以省略,因此有操作符重载的假象;对这些方法,同级操作的左边优先级更高, scala使用方法的第一个字符决定其优先级,从低到高分别为:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">^&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fec418">-&lt;/span> &lt;span style="color:#fec418">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">/&lt;/span> &lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#5bc4bf">%&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala中赋值操作的返回值是Unit&lt;/li>
&lt;li>scala中==是基于值的对比(等效于&lt;code>equals()&lt;/code>方法),需要比较引用的可以用&lt;code>eq()&lt;/code>方法&lt;/li>
&lt;li>scala的protected方法只有派生类可以访问,同包的非派生类不可访问,在派生类中也不可以通过基类实例来访问,只能是通过派生类的实例方法访问&lt;/li>
&lt;li>scala中可以通过&lt;code>private[类名/包名/this]&lt;/code>和&lt;code>protected[类名/包名/this]&lt;/code>实现细粒度的权限控制,具体不表了&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h1 id="第4章-处理对象">第4章 处理对象&lt;/h1>
&lt;ul>
&lt;li>定义类的时候,&lt;code>class A(var a:Int, val b:Int)&lt;/code>被称作主构造器(primary constructor),其中可变的参数a自动生成getter和setter,不可变的参数b自动生成getter方法,但这些getter setter方法不符合JavaBean标准,没有get/set前缀,可以通过在期望产生符合JavaBean规范的字段加上&lt;code>@scala.reflect.BeanProperty&lt;/code>注解来解决这个问题&lt;/li>
&lt;li>scala中val修饰的属性编译后为&lt;code>private final&lt;/code>&lt;/li>
&lt;li>类中单独的代码会作为主构造器的一部分&lt;/li>
&lt;li>还可以定义辅助构造器:&lt;code>def this(...)&lt;/code>,辅助构造器的第一行必须调用主构造器或者其他辅助构造器&lt;/li>
&lt;li>重载方法时强制使用关键字&lt;code>override&lt;/code>(不是注解),如&lt;code>override def f(...) = ...&lt;/code>&lt;/li>
&lt;li>派生类在主构造器(与基类同名的)参数前面加上要关键字&lt;code>override&lt;/code>, 编译器将这些属性的getter方法路由到基类对应方法&lt;/li>
&lt;li>只有object没有对应class叫单例对象(不能传递参数给其构造器),class对应object叫伴生对象&lt;/li>
&lt;li>伴生对象可以访问private修饰的方法&lt;/li>
&lt;li>字节码层面上,单例中的方法会被编译为static方法&lt;/li>
&lt;li>scala创建枚举需要扩展&lt;code>Enumeration&lt;/code>类,并用特殊的Value(表示枚举的类型)来赋值,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">Currency&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Enumeration&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">type&lt;/span> &lt;span style="color:#fec418">Currency&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">Value&lt;/span> &lt;span style="color:#776e71">//高速编译器,将Currency视作一个类型而非实例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#fec418">CNY&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#fec418">USD&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>&lt;span style="color:#fec418">JPY&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scala支持包对象,为单例对象,与包同名,用&lt;code>package object&lt;/code>关键字标记,当包中其他类&lt;code>import 包名._&lt;/code>时,可以直接引用包对象里面的方法;包对象可以存储该包公用的一些方法如工具方法,举例, scala包也有包对象,包含了很多类型别名和隐式类型转换.&lt;/li>
&lt;/ul>
&lt;h1 id="第5章-善用类型">第5章 善用类型&lt;/h1>
&lt;ul>
&lt;li>scala偏向于使用类型推断,但以下情况必须显式指定类型:1.定义没有初始值的类字段;2.定义函数或方法的参数;3.使用return或递归时,定义函数或方法返回类型;4.将变量定义为与推断出来类型不一样&lt;/li>
&lt;li>&lt;code>Nothing&lt;/code>是所有类型的子类型, &lt;code>Any&lt;/code>是所有类型的基础类型,包含&lt;code>AnyRef&lt;/code>子类型(所有引用类型的基础类型,包含Java的&lt;code>Object&lt;/code>类的方法)和&lt;code>AnyVal&lt;/code>子类型(所有值类型Int,Double等的基础类型,映射到Java原始类型)&lt;/li>
&lt;li>使用有类型参数的类但不指定泛型类型的时候,就会使用Nothing作为类型参数,如果没有定义协变,那么任何有意义的类型都不能使用&lt;/li>
&lt;li>抛出异常的表达式的返回类型也是&lt;code>Nothing&lt;/code>,可以替代任意类型,语义上是合法的,可以是类型推断进行下去&lt;/li>
&lt;li>&lt;code>Option[T]&lt;/code>有两个子类,&lt;code>Some[T]&lt;/code>(有值)和&lt;code>None&lt;/code>(没有值),用于值可能存在或不存在的情况&lt;/li>
&lt;li>&lt;code>Either&lt;/code>有两个子类,&lt;code>Right[R]&lt;/code>(正确结果的值)和&lt;code>Left[L]&lt;/code>(错误的时候的值),用于结果可能存在两种不同类型的值的情况&lt;/li>
&lt;li>定义函数的时候,用等号将方法声明和方法主题分开(如&lt;code>def f(a:Int) = {...}&lt;/code>)才能完成返回值类型推断,反之(如&lt;code>def f(a:Int) {...}&lt;/code>)不行&lt;/li>
&lt;li>一个方法只是字段或属性的访问器,不要将&lt;code>()&lt;/code>放在定义中,调用的时候也不用&lt;code>()&lt;/code>;但如果一个函数具有副作用,那么在声明和调用这个函数的时候都要使用&lt;code>()&lt;/code>&lt;/li>
&lt;li>任何返回&lt;code>Unit&lt;/code>的函数必须产生副作用(否则,又不返回东西,又不产生副作用,那这个函数没什么用了)&lt;/li>
&lt;li>&lt;code>T &amp;lt;: P&lt;/code>表示类型T派生自类型P, &lt;code>T &amp;gt;: S&lt;/code>表示类型T是类型S的超类&lt;/li>
&lt;li>&lt;code>[+T]&lt;/code>表示支持&lt;code>协变&lt;/code>(若接受基类实例集合,则也支持子类实例集合);&lt;code>[-T]&lt;/code>表示支持&lt;code>逆变&lt;/code>(若接受基类实例集合,则也支持超类实例集合)&lt;/li>
&lt;li>使用隐式转换函数时,需要导入&lt;code>scala.language.implicitConversions&lt;/code>(主要是提醒阅读代码的人,黑魔法出没)&lt;/li>
&lt;li>与隐式参数类似,如果一个函数标记为&lt;code>implicit&lt;/code>,且存在于当前作用域(import或在当前文件作用域),scala都会自动使用这个函数进行类型转换(如果可以)&lt;/li>
&lt;li>scala还支持隐式类(用&lt;code>implicit&lt;/code>标记类),但不能是独立的类,必须在单例对象/类/特质中;而使用隐式类的时候不需要导入&lt;code>implicitConversions&lt;/code>;例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtil&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Wrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>i&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> conv&lt;span style="color:#5bc4bf">(&lt;/span>unit&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> i&lt;span style="color:#5bc4bf">.&lt;/span>toString &lt;span style="color:#5bc4bf">+&lt;/span> unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtilTest&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">MyUtil._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> s &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">11&lt;/span> conv &lt;span style="color:#48b685">&amp;#34;cm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println&lt;span style="color:#5bc4bf">(&lt;/span>s&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//调用这个对象的时候打印:11cm,仅作示例
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>隐式转换的时候会创建短生命周期的垃圾隐式对象,增加GC压力,而值对象可以解决这个问题(将隐式类示例上的调用自动改写成扩展方法),将隐式类继承&lt;code>AnyVal&lt;/code>,如上面的例子改成:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyUtil&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Wrapper&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>i&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Int&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">AnyVal&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> conv&lt;span style="color:#5bc4bf">(&lt;/span>unit&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> i&lt;span style="color:#5bc4bf">.&lt;/span>toString &lt;span style="color:#5bc4bf">+&lt;/span> unit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>值类型还可以用在其他简单值/原始值已经够用,但是希望使用类型进行更好抽象的地方:最终源码中显示是类/示例,字节码级别上是基础类型&lt;/li>
&lt;li>自定义字符串插值器: 定义一个隐式类,主构造器接受一个&lt;code>StringContext&lt;/code>类型的参数,定义方法&lt;code>name(args: Any*):StringBuilder&lt;/code>,那么当程序作用域包含该隐式类的时候,对&lt;code>name&amp;quot;&amp;quot;&amp;quot;...&amp;quot;&amp;quot;&amp;quot;&lt;/code>的字符串,会自动创建&lt;code>StringContext&lt;/code>对象(其&lt;code>parts&lt;/code>方法可以获取字符串中被表达式分割的各个子字符串),传入隐式转换的的&lt;code>name(Any*)&lt;/code>方法,参数传入字符串中的各个&lt;code>${expression}&lt;/code>,处理完的&lt;code>StringBuilder&lt;/code>对象返回,然后转换成字符串. 例如一个简单的例子,所有表达式前后加上井号:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MyInterpolator&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">implicit&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Interpolator&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> context&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">StringContext&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">AnyVal&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> my&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Any*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">StringBuilder&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">StringBuilder&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>context&lt;span style="color:#5bc4bf">.&lt;/span>parts&lt;span style="color:#5bc4bf">.&lt;/span>zip&lt;span style="color:#5bc4bf">(&lt;/span>args&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>item &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>text&lt;span style="color:#5bc4bf">,&lt;/span> expression&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">s&amp;#34;&lt;/span>&lt;span style="color:#f99b15">$text&lt;/span>&lt;span style="color:#48b685">#&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>expression&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">#&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}).&lt;/span>mkString&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">MyInterpolator._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> name &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Leibniz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>my&lt;span style="color:#48b685">&amp;#34;&amp;#34;&amp;#34;My name is ${name}&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//调用我们自定义的插值器,返回 My name is #Leibniz#
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="第6章-函数值与闭包">第6章 函数值与闭包&lt;/h1>
&lt;ul>
&lt;li>柯里化: 一个有分组参数的函数,如&lt;code>f(a:A)(b:B):C&lt;/code>,使用&lt;code>f _&lt;/code>创建一个部分应用函数(此处类型为&lt;code>A =&amp;gt; (B =&amp;gt; C)&lt;/code>),可以用于创建可复用的临时便利函数;&lt;/li>
&lt;li>多组参数的函数,如果有单独成组的函数参数,可以不使用小括号,直接用大括号,更直观,如&lt;code>f(a:Int)(g:A=&amp;gt;B)&lt;/code>可以这样调用:&lt;code>f(1) {a =&amp;gt; xxx(a)}&lt;/code>&lt;/li>
&lt;li>用下划线代表函数值的参数时,如果无法判断类型,scala会报错,此时可以显式指定类型&lt;/li>
&lt;li>scala自动将函数名视作函数值的引用&lt;/li>
&lt;li>函数或代码块可能含有未绑定的变量,在调用前根据上下文绑定,形成闭包(closure);绑定的时候不会复制相应变量的值,实际上会绑定到变量本身,因此线程不安全&lt;/li>
&lt;/ul>
&lt;h1 id="第7章-特质">第7章 特质&lt;/h1>
&lt;ul>
&lt;li>在trait中定义并初始化的val/var变量，将会在混入了该trait的累的内部实现；定义并&lt;strong>未&lt;/strong>初始化的val/var变量被认为是抽象的,混入该trait的类需要实现他们&lt;/li>
&lt;li>类混入trait的时候,如果类没用用&lt;code>extends&lt;/code>,则第一个&lt;code>trait&lt;/code>用&lt;code>extends&lt;/code>,后面的&lt;code>trait&lt;/code>用&lt;code>with&lt;/code>;如果类已经用&lt;code>extends&lt;/code>了,那么所有&lt;code>trait&lt;/code>都用&lt;code>with&lt;/code>来混入&lt;/li>
&lt;li>混入了trait的类可以调用trait的方法, 其实例引用也可以多态为trait实例&lt;/li>
&lt;li>trait的构造器不接收任何参数&lt;/li>
&lt;li>选择性混入: 可以对没有混入trait的类的实例混入trait,即只有该实例混入了trait,该类其他实例没有,也是用&lt;code>with&lt;/code>进行混入,如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> angle &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Cat&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Angle&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">Friend&lt;/span>&lt;span style="color:#ef6155">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在trait中,使用super调用的方法会触发延迟绑定(late binding),此时并非对基类方法的调用,而是转发到混入该trait的类中,如果混入了多个这样的trait(有同样父类方法,即extends自同一个trait或抽象类),那么从右向左,混入下一个trait直到混入到类, 例如:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">abstract&lt;/span> &lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">String&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;Abstract check...&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Credit...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span> &lt;span style="color:#776e71">//并非调用父类方法,而是转发到下一个trait或类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">MoneyCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;Money...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">trait&lt;/span> &lt;span style="color:#fec418">HouseCheck&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#815ba4">override&lt;/span> &lt;span style="color:#815ba4">def&lt;/span> check&lt;span style="color:#815ba4">:&lt;/span>&lt;span style="color:#fec418">Stirng&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#48b685">s&amp;#34;House...&lt;/span>&lt;span style="color:#f99b15">${&lt;/span>&lt;span style="color:#815ba4">super&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#f99b15">}&lt;/span>&lt;span style="color:#48b685">&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> app1 &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">MoneyCheck&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>app1&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//根据混入的顺序,打印 Credit...Money...Abstract check...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span>&lt;span style="color:#815ba4">val&lt;/span> app2 &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">Check&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">CreditCheck&lt;/span> &lt;span style="color:#815ba4">with&lt;/span> &lt;span style="color:#fec418">HouseCheck&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println&lt;span style="color:#5bc4bf">(&lt;/span>app2&lt;span style="color:#5bc4bf">.&lt;/span>check&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#776e71">//根据混入的顺序,打印 House...Credit...Abstract check...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>如果基类的方法是抽象的,那么方法绑定必须推迟到某个具体的方法已知为止;同样是从右到左的顺序连接混入trait,这样可以避免方法冲突的问题&lt;/li>
&lt;/ul></description></item><item><title>Lucene7获取所有有效文档</title><link>https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/</link><pubDate>Tue, 15 May 2018 16:38:41 +0000</pubDate><guid>https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Lucene7%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E6%9C%89%E6%95%88%E6%96%87%E6%A1%A3/mikuwing.jpg" alt="Featured image of post Lucene7获取所有有效文档" />&lt;p>最近在写一个&lt;code>Vert.X+Lucene&lt;/code>的搜索引擎,为Vert.X中国论坛提供的(详见&lt;a class="link" href="https://github.com/Leibnizhu/vertXearch" target="_blank" rel="noopener"
>Github&lt;/a>),在尝试更新文档索引的时候,遇到如何获取所有有效文档的问题(未被删除索引的). 官方没有直接查询的API,在Google和Stack Overflow搜了之后没有满意的效果,网上的资源很多都是Lucene 6甚至更老的3,4版本的,有些API已经过时.&lt;br>
经过深入查阅官方API文档之后,终于找到了解决方案.&lt;br>
Lucene删除索引之后,通过&lt;code>IndexReader.document()&lt;/code>还是可以查到的,因此当有文档被删除后,不能直接用这个来查; 而&lt;code>MultiFields.getLiveDocs()&lt;/code>在没有删除文档时返回&lt;code>null&lt;/code>,有删除过文档时返回一个&lt;code>Bits&lt;/code>对象,这里面可以通过&lt;code>get()&lt;/code>方法,获取每个documentID是否有效(未被删除).&lt;br>
因此可以这样写:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> indexDirectory &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">FSDirectory&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>open&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#fec418">Paths&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">(&lt;/span>indexDirectoryPath&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">var&lt;/span> reader&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">DirectoryReader&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#fec418">DirectoryReader&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>open&lt;span style="color:#5bc4bf">(&lt;/span>indexDirectory&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> indexSearcher &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">IndexSearcher&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 获取所有有效文档
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> getAllDocuments&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Document&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//获取有哪些存活的文档
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> liveDocs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">MultiFields&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getLiveDocs&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>liveDocs &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//liveDocs非null时有删除过文件,遍历所有文档ID,liveDocs.get为true的话就是存活的,要过滤存活的文档对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#f99b15">0&lt;/span> until reader&lt;span style="color:#5bc4bf">.&lt;/span>maxDoc&lt;span style="color:#5bc4bf">()).&lt;/span>filter&lt;span style="color:#5bc4bf">(&lt;/span>liveDocs&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">).&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>reader&lt;span style="color:#5bc4bf">.&lt;/span>document&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#5bc4bf">)).&lt;/span>toList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//没有删除过文件的时候liveDocs为null,此时只能直接通过IndexSearcher去查询
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> topDocsToDocumentList&lt;span style="color:#5bc4bf">(&lt;/span>indexSearcher&lt;span style="color:#5bc4bf">.&lt;/span>search&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">MatchAllDocsQuery&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">MAX_VALUE&lt;/span>&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> topDocsToDocumentList&lt;span style="color:#5bc4bf">(&lt;/span>topDocs&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">TopDocs&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">Document&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> topDocs&lt;span style="color:#5bc4bf">.&lt;/span>scoreDocs&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">this&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getDocument&lt;span style="color:#5bc4bf">).&lt;/span>toList
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Spark2的Kafka消费Offset管理</title><link>https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 22 Dec 2017 08:46:44 +0000</pubDate><guid>https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/</guid><description>&lt;img src="https://leibnizhu.github.io/p/Spark2%E7%9A%84Kafka%E6%B6%88%E8%B4%B9Offset%E7%AE%A1%E7%90%86/sunup.png" alt="Featured image of post Spark2的Kafka消费Offset管理" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>网上流传一篇关于Spark Streaming消费Kafka时用Zookeeper保存Kafka队列offset的文章，如&lt;a class="link" href="https://www.2cto.com/net/201710/692443.html" target="_blank" rel="noopener"
>https://www.2cto.com/net/201710/692443.html&lt;/a>，最初源头没找了，亲测在Spark1.6是可以用的。&lt;br>
然而在Spark2中，这种方法的&lt;code>KafkaManager&lt;/code>类中所依赖的&lt;code>KafkaCluster&lt;/code>等等的类并不存在，因此此法无法直接套用到Spark中；此外，如果使用Cloudera的CDH集群的Spark2，其API更为缺少。因此，本文给出一种在CDH5.13的Spark2中通过Zookeeper管理Kafka消费Offset的方法。&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;ul>
&lt;li>集群：&lt;code>Cloudera CDH&lt;/code>（&lt;code>Cloudera Manager&lt;/code> 5.13.0）&lt;/li>
&lt;li>&lt;code>Spark&lt;/code>：2.1.0 cloudera2&lt;/li>
&lt;li>&lt;code>Scala&lt;/code>：2.11.8&lt;/li>
&lt;li>&lt;code>Java&lt;/code>：1.8.0_u91&lt;/li>
&lt;/ul>
&lt;h2 id="maven依赖">Maven依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.source&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;maven.compiler.target&amp;gt;&lt;/span>1.8&lt;span style="color:#5bc4bf">&amp;lt;/maven.compiler.target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span style="color:#5bc4bf">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scala.version&amp;gt;&lt;/span>2.11.8&lt;span style="color:#5bc4bf">&amp;lt;/scala.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;spark.version&amp;gt;&lt;/span>2.1.0.cloudera2&lt;span style="color:#5bc4bf">&amp;lt;/spark.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;kafka.version&amp;gt;&lt;/span>0.11.0-kafka-3.0.0&lt;span style="color:#5bc4bf">&amp;lt;/kafka.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;scala-test.version&amp;gt;&lt;/span>3.0.0&lt;span style="color:#5bc4bf">&amp;lt;/scala-test.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>cloudera&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>https://repository.cloudera.com/artifactory/cloudera-repos/&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;id&amp;gt;&lt;/span>aliyun&lt;span style="color:#5bc4bf">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;url&amp;gt;&lt;/span>http://maven.aliyun.com/nexus/content/groups/public&lt;span style="color:#5bc4bf">&amp;lt;/url&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.scala-lang&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>scala-library&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${scala.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-core_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-streaming_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.spark&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>spark-streaming-kafka-0-10_2.11&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${spark.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.kafka&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kafka-clients&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${kafka.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.kafka&lt;span style="color:#5bc4bf">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;artifactId&amp;gt;&lt;/span>kafka-streams&lt;span style="color:#5bc4bf">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;version&amp;gt;&lt;/span>${kafka.version}&lt;span style="color:#5bc4bf">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="管理kafka消费offset">管理Kafka消费Offset&lt;/h2>
&lt;h3 id="使用方法">使用方法&lt;/h3>
&lt;h4 id="创建kafkamanager对象">创建KafkaManager对象&lt;/h4>
&lt;p>使用类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Kafka的连接和Offset管理工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param zkHosts Zookeeper地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param kafkaParams Kafka启动参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Serializable&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> zkHosts &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#48b685">&amp;#34;localhost:2181&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> kafkaParams &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;auto.offset.reset&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#48b685">&amp;#34;latest&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;bootstrap.servers&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> kafkaBrokers&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#fec418">MAXWELL_KAFKA_GROUP&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;enable.auto.commit&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">java.lang.Boolean&lt;/span>&lt;span style="color:#5bc4bf">),&lt;/span> &lt;span style="color:#776e71">//禁用自动提交Offset，否则可能没正常消费完就提交了，造成数据错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#48b685">&amp;#34;key.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#48b685">&amp;#34;value.deserializer&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">-&amp;gt;&lt;/span> classOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">StringDeserializer&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> km &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建kafka输入流">创建Kafka输入流&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* 包装createDirectStream方法，支持Kafka Offset，用于创建Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @param ssc Spark Streaming Context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @tparam K Kafka消息Key类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @tparam V Kafka消息Value类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @return Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">* @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">def&lt;/span> createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>, &lt;span style="color:#fec418">V:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">StreamingContext&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">InputDStream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">val&lt;/span> kafkaStream &lt;span style="color:#815ba4">=&lt;/span> km&lt;span style="color:#5bc4bf">.&lt;/span>createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#5bc4bf">,&lt;/span> kafkaTopics&lt;span style="color:#5bc4bf">.&lt;/span>split&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toSeq&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="操作完毕后更新offset">操作完毕后更新Offset&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存Kafka消息队列消费的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param rdd SparkStreaming的Kafka RDD，RDD[ConsumerRecord[K, V]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param storeEndOffset true=保存结束offset， false=保存起始offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">RDD&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]],&lt;/span> storeEndOffset&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>km&lt;span style="color:#5bc4bf">.&lt;/span>persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="详细代码">详细代码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">package&lt;/span> &lt;span style="color:#fec418">com.turingdi.enmonster.nrt.common&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">java.lang.Object&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">com.turingdi.enmonster.nrt.common.Constants._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">kafka.utils.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.kafka.clients.consumer.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">KafkaConsumer&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.kafka.common.TopicPartition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.rdd.RDD&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.StreamingContext&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.dstream.InputDStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.apache.spark.streaming.kafka010.&lt;/span>&lt;span style="color:#5bc4bf">{&lt;/span>&lt;span style="color:#fec418">ConsumerStrategies&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">HasOffsetRanges&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">KafkaUtils&lt;/span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">org.slf4j.LoggerFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.collection.JavaConversions._&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.reflect.ClassTag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">import&lt;/span> &lt;span style="color:#fec418">scala.util.Try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * Kafka的连接和Offset管理工具类
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param zkHosts Zookeeper地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param kafkaParams Kafka启动参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">class&lt;/span> &lt;span style="color:#fec418">KafkaManager&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span> &lt;span style="color:#815ba4">extends&lt;/span> &lt;span style="color:#fec418">Serializable&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//Logback日志对象，使用slf4j框架
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#5bc4bf">@transient&lt;/span> &lt;span style="color:#815ba4">private&lt;/span> &lt;span style="color:#815ba4">lazy&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> log &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">LoggerFactory&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>getLogger&lt;span style="color:#5bc4bf">(&lt;/span>getClass&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//建立ZkUtils对象所需的参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>zkClient&lt;span style="color:#5bc4bf">,&lt;/span> zkConnection&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createZkClientAndConnection&lt;span style="color:#5bc4bf">(&lt;/span>zkHosts&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZK_SESSION_TIMEOUT&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ZK_CONNECTION_TIMEOUT&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//ZkUtils对象，用于访问Zookeeper
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> zkUtils &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZkUtils&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>zkClient&lt;span style="color:#5bc4bf">,&lt;/span> zkConnection&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#815ba4">false&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 包装createDirectStream方法，支持Kafka Offset，用于创建Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param ssc Spark Streaming Context
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @tparam K Kafka消息Key类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @tparam V Kafka消息Value类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return Kafka Streaming流
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>, &lt;span style="color:#fec418">V:&lt;/span> &lt;span style="color:#fec418">ClassTag&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">StreamingContext&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">])&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">InputDStream&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> groupId &lt;span style="color:#815ba4">=&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> storedOffsets &lt;span style="color:#815ba4">=&lt;/span> readOffsets&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#5bc4bf">,&lt;/span> groupId&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>info&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;Kafka消息偏移量汇总(格式:(话题,分区号,偏移量)):{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> storedOffsets&lt;span style="color:#5bc4bf">.&lt;/span>map&lt;span style="color:#5bc4bf">(&lt;/span>off &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>off&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">,&lt;/span> off&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">(),&lt;/span> off&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> kafkaStream &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">KafkaUtils&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>createDirectStream&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>ssc&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">PreferConsistent&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">ConsumerStrategies&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">Subscribe&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>topics&lt;span style="color:#5bc4bf">,&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">,&lt;/span> storedOffsets&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kafkaStream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 从Zookeeper读取Kafka消息队列的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param topics Kafka话题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param groupId Kafka Group ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @return 返回一个Map[TopicPartition, Long]，记录每个话题每个Partition上的offset，如果还没消费，则offset为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> readOffsets&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">],&lt;/span> groupId&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Map&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">TopicPartition&lt;/span>, &lt;span style="color:#fec418">Long&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span> &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> topicPartOffsetMap &lt;span style="color:#815ba4">=&lt;/span> collection&lt;span style="color:#5bc4bf">.&lt;/span>mutable&lt;span style="color:#5bc4bf">.&lt;/span>&lt;span style="color:#fec418">HashMap&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>empty&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">TopicPartition&lt;/span>, &lt;span style="color:#fec418">Long&lt;/span>&lt;span style="color:#5bc4bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> partitionMap &lt;span style="color:#815ba4">=&lt;/span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>getPartitionsForTopics&lt;span style="color:#5bc4bf">(&lt;/span>topics&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">// /consumers/&amp;lt;groupId&amp;gt;/offsets/&amp;lt;topic&amp;gt;/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> partitionMap&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkGroupTopicDirs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>groupId&lt;span style="color:#5bc4bf">,&lt;/span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_2&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>partition &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetPath &lt;span style="color:#815ba4">=&lt;/span> zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> partition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> tryGetKafkaOffset &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">Try&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetStatTuple &lt;span style="color:#815ba4">=&lt;/span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>readData&lt;span style="color:#5bc4bf">(&lt;/span>offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>offsetStatTuple &lt;span style="color:#5bc4bf">!=&lt;/span> &lt;span style="color:#815ba4">null&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>info&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;查询Kafka消息偏移量详情: 话题:{}, 分区:{}, 偏移量:{}, ZK节点路径:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetStatTuple&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>put&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>valueOf&lt;span style="color:#5bc4bf">(&lt;/span>partition&lt;span style="color:#5bc4bf">)),&lt;/span> offsetStatTuple&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">.&lt;/span>toLong&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>tryGetKafkaOffset&lt;span style="color:#5bc4bf">.&lt;/span>isFailure&lt;span style="color:#5bc4bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">//http://kafka.apache.org/0110/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71">&lt;/span> &lt;span style="color:#815ba4">val&lt;/span> consumer &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">KafkaConsumer&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">String&lt;/span>, &lt;span style="color:#fec418">Object&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>kafkaParams&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> partitionList &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#fec418">List&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>assign&lt;span style="color:#5bc4bf">(&lt;/span>partitionList&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> minAvailableOffset &lt;span style="color:#815ba4">=&lt;/span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>beginningOffsets&lt;span style="color:#5bc4bf">(&lt;/span>partitionList&lt;span style="color:#5bc4bf">).&lt;/span>values&lt;span style="color:#5bc4bf">.&lt;/span>head
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consumer&lt;span style="color:#5bc4bf">.&lt;/span>close&lt;span style="color:#5bc4bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>warn&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;查询Kafka消息偏移量详情: 没有上一次的ZK节点:{}, 话题:{}, 分区:{}, ZK节点路径:{}, 使用最小可用偏移量:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>tryGetKafkaOffset&lt;span style="color:#5bc4bf">.&lt;/span>failed&lt;span style="color:#5bc4bf">.&lt;/span>get&lt;span style="color:#5bc4bf">.&lt;/span>getMessage&lt;span style="color:#5bc4bf">,&lt;/span> topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">,&lt;/span> minAvailableOffset&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>put&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">TopicPartition&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>topicPartitions&lt;span style="color:#5bc4bf">.&lt;/span>_1&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Integer&lt;/span>&lt;span style="color:#5bc4bf">.&lt;/span>valueOf&lt;span style="color:#5bc4bf">(&lt;/span>partition&lt;span style="color:#5bc4bf">)),&lt;/span> minAvailableOffset&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topicPartOffsetMap&lt;span style="color:#5bc4bf">.&lt;/span>toMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#776e71">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * 保存Kafka消息队列消费的Offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param rdd SparkStreaming的Kafka RDD，RDD[ConsumerRecord[K, V]]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @param storeEndOffset true=保存结束offset， false=保存起始offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> * @author Leibniz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#776e71"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> persistOffsets&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>rdd&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">RDD&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">ConsumerRecord&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">K&lt;/span>, &lt;span style="color:#fec418">V&lt;/span>&lt;span style="color:#5bc4bf">]],&lt;/span> storeEndOffset&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Boolean&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#815ba4">true&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Unit&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> groupId &lt;span style="color:#815ba4">=&lt;/span> kafkaParams&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;group.id&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toString
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetsList &lt;span style="color:#815ba4">=&lt;/span> rdd&lt;span style="color:#5bc4bf">.&lt;/span>asInstanceOf&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">HasOffsetRanges&lt;/span>&lt;span style="color:#5bc4bf">].&lt;/span>offsetRanges
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offsetsList&lt;span style="color:#5bc4bf">.&lt;/span>foreach&lt;span style="color:#5bc4bf">(&lt;/span>or &lt;span style="color:#815ba4">=&amp;gt;&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> zkGroupTopicDirs &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">new&lt;/span> &lt;span style="color:#fec418">ZKGroupTopicDirs&lt;/span>&lt;span style="color:#5bc4bf">(&lt;/span>groupId&lt;span style="color:#5bc4bf">,&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetPath &lt;span style="color:#815ba4">=&lt;/span> zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> offsetVal &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>storeEndOffset&lt;span style="color:#5bc4bf">)&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>untilOffset &lt;span style="color:#815ba4">else&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>fromOffset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zkUtils&lt;span style="color:#5bc4bf">.&lt;/span>updatePersistentPath&lt;span style="color:#5bc4bf">(&lt;/span>zkGroupTopicDirs&lt;span style="color:#5bc4bf">.&lt;/span>consumerOffsetDir &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;/&amp;#34;&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">,&lt;/span> offsetVal &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#48b685">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#776e71">/*, JavaConversions.bufferAsJavaList(acls)*/&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#5bc4bf">.&lt;/span>debug&lt;span style="color:#5bc4bf">(&lt;/span>&lt;span style="color:#48b685">&amp;#34;保存Kafka消息偏移量详情: 话题:{}, 分区:{}, 偏移量:{}, ZK节点路径:{}&amp;#34;&lt;/span>&lt;span style="color:#5bc4bf">,&lt;/span> &lt;span style="color:#fec418">Seq&lt;/span>&lt;span style="color:#5bc4bf">[&lt;/span>&lt;span style="color:#fec418">AnyRef&lt;/span>&lt;span style="color:#5bc4bf">](&lt;/span>or&lt;span style="color:#5bc4bf">.&lt;/span>topic&lt;span style="color:#5bc4bf">,&lt;/span> or&lt;span style="color:#5bc4bf">.&lt;/span>partition&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetVal&lt;span style="color:#5bc4bf">.&lt;/span>toString&lt;span style="color:#5bc4bf">,&lt;/span> offsetPath&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#815ba4">_&lt;/span>&lt;span style="color:#fec418">*&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Scala实现64位的MurmurHash函数</title><link>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%8E%B064%E4%BD%8D%E7%9A%84MurmurHash%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 19 Jan 2017 11:20:52 +0000</pubDate><guid>https://leibnizhu.github.io/p/Scala%E5%AE%9E%E7%8E%B064%E4%BD%8D%E7%9A%84MurmurHash%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="简介">简介&lt;/h1>
&lt;p>最近使用Spark的GraphX进行一些图计算，GraphX要求每个节点都有唯一的ID；但我们的数据并没有包含唯一的ID，所以需要使用Hash函数将每条数据的信息进行摘要生成唯一ID。&lt;br>
Hash中，String自己的hashCode()自然是很烂的(字符串每个字符乘以质数再与之前hash相加，如此迭代)，MD5/SHA1之类的算法开销又比较大，Spark图运算的时候节点较多，hash的开销还是蛮可观的。&lt;br>
经过搜索，发现了MurmurHash算法，具体参考 &lt;a class="link" href="https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C" target="_blank" rel="noopener"
>维基百科&lt;/a> ，总而言之就是高效低碰撞，hadoop/memcached之类都在用。&lt;br>
Scala API自身是有MurmurHash算法的实现的（&lt;a class="link" href="http://www.scala-lang.org/api/current/scala/util/hashing/MurmurHash3$.html" target="_blank" rel="noopener"
>scala.util.hashing.MurmurHash3&lt;/a>），但返回值是int，32位。对于海量数据而言，显然不够用，我们需要64位的。&lt;br>
于是就写了个scala实现的64位MurmurHash函数，详见下文（没有测试过具体的碰撞性能）。&lt;/p>
&lt;h1 id="scala实现">scala实现&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#815ba4">object&lt;/span> &lt;span style="color:#fec418">MurmurHash64&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">def&lt;/span> stringHash&lt;span style="color:#5bc4bf">(&lt;/span>str&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">String&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>&lt;span style="color:#815ba4">:&lt;/span> &lt;span style="color:#fec418">Long&lt;/span> &lt;span style="color:#5bc4bf">=&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> data &lt;span style="color:#815ba4">=&lt;/span> str&lt;span style="color:#5bc4bf">.&lt;/span>getBytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> length &lt;span style="color:#815ba4">=&lt;/span> data&lt;span style="color:#5bc4bf">.&lt;/span>length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> seed &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">0xe17a1465&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> m &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">0xc6a4a7935bd1e995&lt;/span>L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> r &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#f99b15">47&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> h &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>seed &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xffffffff&lt;/span>L&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">^&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">*&lt;/span> m&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> length8 &lt;span style="color:#815ba4">=&lt;/span> length &lt;span style="color:#5bc4bf">/&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">for&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>i &lt;span style="color:#815ba4">&amp;lt;-&lt;/span> &lt;span style="color:#f99b15">0&lt;/span> until length8&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">val&lt;/span> i8 &lt;span style="color:#815ba4">=&lt;/span> i &lt;span style="color:#5bc4bf">*&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">var&lt;/span> k &lt;span style="color:#815ba4">=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">0&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">16&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">24&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">32&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">40&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">48&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#5bc4bf">((&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>i8 &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">56&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">^=&lt;/span> k &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">48&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">6&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">40&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">5&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">4&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">24&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">3&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">2&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">((&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">+&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong &lt;span style="color:#5bc4bf">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f99b15">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#815ba4">if&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">%&lt;/span> &lt;span style="color:#f99b15">8&lt;/span> &lt;span style="color:#5bc4bf">&amp;gt;=&lt;/span> &lt;span style="color:#f99b15">1&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> &lt;span style="color:#5bc4bf">(&lt;/span>data&lt;span style="color:#5bc4bf">(&lt;/span>length &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#5bc4bf">~&lt;/span>&lt;span style="color:#f99b15">7&lt;/span>&lt;span style="color:#5bc4bf">)&lt;/span> &lt;span style="color:#5bc4bf">&amp;amp;&lt;/span> &lt;span style="color:#f99b15">0xff&lt;/span>&lt;span style="color:#5bc4bf">).&lt;/span>toLong
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> h &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">*=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#5bc4bf">^=&lt;/span> h &lt;span style="color:#5bc4bf">&amp;gt;&amp;gt;&amp;gt;&lt;/span> r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#5bc4bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>